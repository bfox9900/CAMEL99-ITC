\ CAMEL99 Direct Threaded Forth for the TI-99  May 1,2022 Fox
\ Copyright (c) 2018 Brian Fox
\ KILWORTH Ontario Canada
\ brian.fox@brianfox.ca

\ compiles with XFC99X.EXE cross-compiler SEE: FORTHITC.MAK

TARGET-COMPILING

   VARIABLE STATE

   STATE [CC] TO XSTATE

\ ======================================================================
\ S Y S T E M   C O N S T A N T S

[CC] HEX
CR .( Constants and VARIABLEs...)

TARGET-COMPILING
  'SP0  CONSTANT SP0
  'RP0  CONSTANT RP0
  'TIB  CONSTANT TIB
  'FIB  CONSTANT FIB

\ Utility constants
        0 CONSTANT FALSE
       -1 CONSTANT TRUE
        0 CONSTANT 0
        1 CONSTANT 1
       20 CONSTANT BL

\ ======================================================================
\ U S E R   V A R I A B L E S
\ CAMEL99 uses space after workspace for user vars.
[CC] HEX [TC]
\ *G User VARIABLEs begin at >8320 for the primary Forth task
\ ** User VARIABLE 0 .. 1F are workspace registers.

      20 USER TFLAG
      22 USER JOB
      24 USER DP
      26 USER HP
      28 USER CSP
      2A USER BASE
      2C USER >IN
      2E USER C/L
      30 USER OUT
      32 USER VROW
      34 USER VCOL
\      36 USER 'KEY     \ for vectored char input
\      38 USER 'EMIT    \ for vectored char output
      3A USER LP
      3C USER SOURCE-ID
      3E USER 'SOURCE    \ Source is a 2VARIABLE
\      40 USER -------   \ used by 'SOURCE

      46 USER TPAD

\ TI-99 system memory locations
\  8374 CONSTANT KUNIT#  \ byte
\  837C CONSTANT GPLSTAT \ byte

  VARIABLE LATEST

\ *G These system VARIABLEs control cold starting the system
VARIABLE ORGDP
VARIABLE ORGLAST
VARIABLE BOOT

[CC] DECIMAL [TC]
   0024 CONSTANT L/SCR

[CC] HEX [TC]
VARIABLE VMODE
VARIABLE L0  [CC]  6 CELLS TALLOT  [TC]
VARIABLE LP
VARIABLE ^PAB
VARIABLE LINES
VARIABLE C/SCR
VARIABLE 'IV    \ *G interpretor vector. Hold address of <INTERPRET>
VARIABLE H
VARIABLE VP
VARIABLE CURS   [CC] 205F CURS T! [TC]  \ BLANK and '_' in one VARIABLE
VARIABLE VTOP
VARIABLE WARNINGS  [CC] -1 WARNINGS T! [TC]

\ Special Assembler labels, converted to FORTH constants
\ My convention is use underscore as indicator for non-Forth words
  _DOCON   CONSTANT _DOCON
  _DOVAR   CONSTANT _DOVAR
  _DOUSER  CONSTANT _DOUSER
  _DODOES  CONSTANT _DODOES

  _BRANCH >HSRAM  CONSTANT _HSBRANCH
  _?BRANCH >HSRAM CONSTANT _?HSBRANCH
  _EXIT   >HSRAM  CONSTANT _HSEXIT
  _LIT    >HSRAM  CONSTANT _HSLIT

  _@      >HSRAM  CONSTANT _HS@
  _!      >HSRAM  CONSTANT _HS!
  _DROP   >HSRAM  CONSTANT _HSDROP
  _DUP    >HSRAM  CONSTANT _HSDUP
  _plus   >hsram  constant _HSPLUS

\ ======================================================================
[CC] cr .( Hi-level FORTH Primitives...)

\ In DTC Forth, the extra 4 bytes in every colon def make CODE words
\ the same size as Forth equivalent but faster

TARGET-COMPILING
\ Forth compiler primitives.
\ For DTC we can save space and improve speed with code words

CODE HERE   ( -- addr) \ : HERE   ( -- addr) DP @  ;
      TOS PUSH,
      TOS STWP,
      24 (TOS) TOS MOV,
      NEXT,
ENDCODE

CODE ALLOT  ( n --)  \ : ALLOT     ( n --)   DP +! ;
      R1 STWP,
      TOS 24 (R1) ADD,
      TOS POP,
     NEXT,
ENDCODE

0 [IF]
   : ,   ( n -- ) HERE ! 2 ALLOT ;

[else]
   CODE ,  ( n --)
      R1 STWP,
      24 (R1) R2 MOV,
      TOS *R2 MOV,
      24 (R1) INCT,
      TOS POP,
     NEXT,
   ENDCODE
[THEN]

0 [IF]
: C,  ( n -- ) HERE C! 1 ALLOT ;

[ELSE]
   CODE C, ( c --)
      TOS SWPB,
      R1 STWP,
      24 (R1) R2 MOV,
      TOS *R2 MOVB,
      24 (R1) INC,
      TOS POP,
     NEXT,
   ENDCODE
[THEN]

: COMPILE,  ( n -- )  , ;
: ALIGN     ( -- )   HERE ALIGNED DP ! ;
: PAD       ( -- addr) HERE TPAD @ + ;
: COMPILE   ( -- ) R> DUP 2+ >R @ COMPILE, ;  \ DTC/ITC Version
: IMMEDIATE ( -- ) 01 LATEST @ 1-  C! ;
: LITERAL   ( n -- n|~) STATE @ IF _HSLIT ,  ,  THEN ;  XIMMEDIATE

\ : ]       STATE ON ;
CODE ]      ( -- ) STATE @@ SETO, NEXT, ENDCODE
\ : [       STATE OFF ; XIMMEDIATE
CODE [      ( -- ) STATE @@ CLR, NEXT, ENDCODE  XIMMEDIATE

: DEPTH     ( -- n ) SP0 SP@ 2+ - 2/ ;

\ ======================================================================
\ PAB base address
: VDPTOP  ( -- n) 8370 @ 2- ;
\ CODE VDPTOP   TOS PUSH,  8370 @@ TOS MOV,  TOS DECT, NEXT, ENDCODE

\ ======================================================================
\ S T A C K   P R I M I T I V E S
[CC] cr .( Stack primitives ...)  [tc]

\  : TUCK  SWAP OVER ;
CODE TUCK  ( w1 w2 --  w2 w1 w2 ) \ same size as DTC Forth
        *SP   R1 MOV,
         TOS *SP MOV,
              R1 PUSH,
         NEXT,
         ENDCODE

CODE 2>R    ( d -- ) ( r-- n n)
        RP -4 ADDI,          \ 14
        TOS 2 (RP) MOV,      \ 22
        *SP+   *RP MOV,      \ 26
        TOS POP,             \ 22
        NEXT,              \ = 84
        ENDCODE

CODE 2R>     ( -- d )
        TOS PUSH,            \ 28
        SP  DECT,            \ 10
        *SP RPOP,            \ 26
        TOS RPOP,            \ 22
        NEXT,              \ = 88
        ENDCODE

\ *G NOT standard forth. Nice native 9900 instructions
CODE 1+! ( addr -- )  *TOS INC,  TOS POP,  NEXT,   ENDCODE
CODE 1-! ( addr -- )  *TOS DEC,  TOS POP,  NEXT,   ENDCODE

\ =====================================================================
\ C O M P A R I S O N   O P E R A T O R S

TARGET-COMPILING
: U>  ( n n -- ?)  SWAP U< ;
: 0>  ( n -- ?)    1- 0< INVERT ;
: <>  ( n n -- ?)  =  INVERT ;

: UMIN ( u1 u2 -- u )  2DUP U> IF SWAP THEN DROP ;
: UMAX ( u1 u2 -- u )  2DUP U< IF SWAP THEN DROP ;

CODE WITHIN   ( n  lo  hi -- flag )
        *SP  TOS  SUB,
        *SP+ *SP  SUB,
         TOS *SP+ SUB,
         TOS CLR,
         NC IF,  TOS SETO, ENDIF,
         NEXT,
         ENDCODE  \ 2 bytes bigger than Forth

\ CODE HALT    BEGIN, AGAIN, ENDCODE \ debug break

\ =====================================================================
\ M I X E D  (32BIT/16BIT)   M A T H   O P E R A T I O N S

: */MOD  ( n1 n2 n3 -- n4 n5) >R UM* R> M/MOD ;
: S>D    ( n -- d)  DUP 0< ;
: M+     ( d n -- d) S>D  D+ ;    \ * change from V2.67

: /MOD   ( n1 n2 -- n3 n4) >R S>D R> M/MOD ;
: /      ( n n -- n)   /MOD NIP  ;
: MOD    ( n n -- n)   /MOD DROP ;
: */     ( n n n -- n) */MOD NIP ;

\ =====================================================================
\ S T R I N G   T H I N G S

TARGET-COMPILING

\ CAMEL Forth calls this ">COUNTED"
: PLACE   ( src n dst -- ) 2DUP C! 1+ SWAP MOVE ;

CODE /STRING ( c-addr1 u1 n -- c-addr2 u2 ) \ ~20uS!!       Clks
              TOS   *SP  SUB,                               \ 18
              TOS 2 (SP) ADD,                               \ 22
              TOS POP,                         \ refill TOS   22
              NEXT,                            \ 8 bytes      62  ~20uS
              ENDCODE

: S,       ( c-addr u -- ) HERE OVER 1+ ALLOT PLACE  ALIGN ;

\ =====================================================================
\ H E A D E R   N A V I G A T I O N

TARGET-COMPILING
\ CODE NFA>LFA ( n -- n')   TOS -3 ADDI, NEXT, ENDCODE

: NFA>LFA ( n -- n')  3 - ;

\ Changed 7F to 1F . 31 character max name length. Other bits for future use
: NFA>CFA       ( nfa -- cfa ) COUNT  1F AND + ALIGNED ;

\ smudge bit control in the Camel Forth
: HIDE          ( -- )  LATEST @ ( nfa) DUP C@ 80 OR  SWAP C! ;
: REVEAL        ( -- )  LATEST @ ( nfa) DUP C@ 7F AND SWAP C! ;

\    **SPECIAL FOR DTC. Advance by 4 CELLS*
CODE >BODY ( cfa -- pfa)  TOS 4 ADDI,  NEXT, ENDCODE

\ =====================================================================
\ P A R S E   W O R D
[CC] cr .( Parsing...)

TARGET-COMPILING

CODE DUP>R  ( n -- n) TOS RPUSH,  NEXT, ENDCODE  \ used 3 times

: SOURCE   ( -- addr len) 'SOURCE 2@ ;

: PARSE    ( char -- c-addr u )  \ gForth
            >R
            SOURCE  >IN @ OVER MIN /STRING
            OVER SWAP R>  SCAN >R
            OVER - DUP
            R> IF 1+ THEN  >IN +! ;

: PARSE-WORD  ( char -- c-addr n)  \ Camel/BFox common factor for WORD
            DUP SOURCE >IN @ /STRING
            ROT SKIP
            DROP SOURCE  -ROT -  MIN  0 MAX >IN !
            PARSE ;

: WORD     ( char -- c-addr)
            PARSE-WORD HERE PLACE
            HERE BL OVER COUNT + C!  \ append blank character
;

\ =====================================================================
\ S T R I N G  T O  N U M B E R   C O N V E R S I O N
[CC] CR .( CAMEL FORTH Number conversion)
 HEX
TARGET-COMPILING

CODE BASE@
         TOS PUSH,
         R1 STWP,
         2A (R1) TOS MOV,
         NEXT,
         ENDCODE

CODE DIGIT?   ( char -- n f )
          R1 STWP,           \ multi-tasking friendly for USER VARS
          TOS PUSH,          \  dup char
          TOS -30 ADDI,      \  convert char to number
          TOS 9 CMPI,
          HI IF,             \ > 9 ?
              TOS -7 ADDI,
              TOS 9 CMPI,
              @@1 JL,         \ less than 9, jump out
           ENDIF,
           TOS 2A (R1) CMP, \ USER var 2A (BASE)
           @@2 JHE,       \ tos>base, jump out
           TOS *SP MOV,   \ replace char with no.
           TOS SETO,      \ set flag to true
           NEXT,
       ( error out here)
@@1: @@2:  TOS CLR,
           NEXT,
           ENDCODE        \ 36 bytes, much faster

: UD*      ( ud1 u2 -- ud3) DUP>R * SWAP R> UM* ROT + ;

: >NUMBER  ( ud adr u -- ud' adr' u' )
            BEGIN
            DUP WHILE
                OVER C@ DIGIT?
                0= IF DROP EXIT THEN
                >R 2SWAP BASE@ UD*
                R> M+ 2SWAP
                1 /STRING
            REPEAT ;

\ *G This is smaller than original ?NUMBER but ***FLAG LOGIC IS REVERSED***
: NUMBER?  ( addr len -- n ?)      \ ?=0 is good conversion
           (          -- addr len) \ bad conversion
            OVER C@ T[CHAR] - = DUP>R     \ save flag for later
            IF 1 /STRING THEN             \ remove minus sign
            0 0  2SWAP >NUMBER NIP NIP    \ convert the number
            R> IF SWAP NEGATE SWAP THEN   \ negate if needed
;

\ ======================================================================
\ S I M P L E   S O U N D  I N T E R F A C E

[CC] HEX [TC]

\ write a byte to address of TMS9919 chip
CODE SND!   ( c -- )  TOS SWPB, TOS 8400 @@ MOVB,  TOS POP, NEXT, ENDCODE

: BEEP     ( -- )
            80 SND! 5 SND!    \ pre-calculated values for OSC1 1390Hz
            91 SND!           \ turn on OSC1 at -2 dB level
            AA MS             \ Delay ~ 170 mS
            9F SND! ;         \ turn off OSC1

\ We use the HONK sound for ABORT like TI-BASIC does on errors
: HONK     ( -- )
            81 SND! 20 SND!   \ pre-calculated values for OSC1 218Hz
            90 SND!           \ turn on OSC1 at 0 dB level
            AA MS             \ Delay ~ 170 mS
            9F SND! ;         \ turn off OSC1

\ ======================================================================
\ V D P  S C R E E N   D R I V E R
[CC] CR .( Console output)

HEX [TC]

: C/L!   ( c/l -- )  \ pronounced "SEE-PER-ELL-STORE"
         DUP C/L !           \ set chars per line
         L/SCR *  C/SCR ! ;  \ calc. chars per screen

: VPOS   ( -- vaddr) VROW 2@ >VPOS ;
: VPUT   ( char -- ) VPOS VC! ;
: AT-XY  ( col row -- ) VROW 2! ;  \ set VDP address for Fast type

CODE TOPLN ( -- vaddr)
       TOS PUSH,
       VPG @@  TOS MOV,
       VTOP @@ TOS ADD,
       NEXT,
       ENDCODE

CODE LASTLN ( -- vaddr)
       TOS PUSH,
       VPG   @@ TOS MOV,
       C/SCR @@ TOS ADD,
       NEXT,
       ENDCODE  \ 12 bytes

\ =====================================================================
\ *G Scrolling has been implemented in Forth using VREAD & VWRITE
\ ** Uses un-allocated Dictionary as a temporary buffer to hold lines of text

0 [IF]
:  SCROLL ( -- ) \ FULL screen buffer version (fast)
         PAUSE
         VPG @  HERE 100 + DUP>R C/SCR @  VREAD
         R> C/L@ +  VPG @  C/SCR @ C/L@ - VWRITE
         0 17 AT-XY VPOS C/L@ BL VFILL
;

[ELSE]
: SCROLL ( -- )  \ One line buffer version (slooow)
       PAUSE
       HERE 100 +     \ grab some space above Forth PAD
       TOPLN C/SCR @  ( -- buffer Vstart len)
       BOUNDS  ( -- buffer SCRend SCRstart)
       DO
         I  C/L@ +  OVER  C/L@ 8* VREAD
         DUP  I           C/L@ 8* VWRITE
       C/L@ 8* +LOOP
       DROP
       0 17 AT-XY VPOS C/L@ BL VFILL
;

[THEN]

\ ======================================================================
\ V D P   T E X T   O U T P U T

[cc] HEX [tc]
: CR     ( -- )  (CR) L/SCR = IF  SCROLL  THEN  ;
: PAGE   ( -- ) TOPLN LASTLN OVER -  BL VFILL   0 0 AT-XY ;
: (EMIT) ( c--)  CPUT IF  CR  THEN ;
: BS     ( --)   VCOL DUP @ 1-  0 MAX  SWAP ! ;

: EMIT   ( char -- )
          PAUSE
          DUP 0D = IF  DROP CR   EXIT THEN
          DUP 08 = IF  DROP BS   EXIT THEN
          (EMIT)
;

: TYPE   ( addr cnt --)  PAUSE BOUNDS ?DO  I C@ (EMIT) LOOP ;

: SPACE  ( -- )   BL (EMIT) ;
: SPACES ( n -- ) 0 MAX  0 ?DO  SPACE  LOOP ;

\ ======================================================================
\ S T R I N G   L I T E R A L S
[cc] HEX [tc]
\ run-time action of S"
: (S")    ( -- c-addr u) R>  COUNT  2DUP + ALIGNED  >R ;

\ ======================================================================
CROSS-COMPILING

\ *G Re-solve CROSS-COMPILER Forward reference for '(S") and 'TYPE
T' (S")  RESOLVES '(S")
T' TYPE  RESOLVES 'TYPE

[cc] cr .( Character input)
\ ======================================================================
\ C H A R A C T E R   I N P U T
\ *G Cursor flash control is now done by reading the 9901 timer.
\ ** It counts down from >3FFF in 349mS. If the timer> 1FFF we show the cursor.
\ ** If < 1FFF show the screen char. Flash rate is about 2 per second.

TARGET-COMPILING
: KEY      ( -- char)
           BEGIN                  \ start the loop
              PAUSE               \ Essential for Multi-tasking with Console
              CURS @              \ fetch 2 char cursor (space & _ )
              TMR@ 1FFF <         \ compare hardware timer to 1FFF
              IF >< THEN VPUT     \ swap cursor bytes & write
              KEY?                \ check the keyboard
              ?DUP                \ DUP IF <> 0
            UNTIL                 \ loop until a key pressed
            BL VPUT ;             \ put the space char on screen

\ High level: input/output          (c) 31mar95 bjr
: ACCEPT     ( caddr +n -- +n')
             OVER + OVER          \ removed 1-  to accept all chars
             BEGIN
                KEY DUP 0D <>
             WHILE
                DUP EMIT
                DUP 8 =
                IF   DROP  1-   3 PICK UMAX  \ changed to use: 3 PICK  B.F.
                ELSE OVER C!  1+  OVER UMIN
                THEN
             REPEAT
             DROP NIP SWAP -  ;

[cc] cr .( Number printing)
\ =====================================================================
\ N U M B E R   T O   S T R I N G   C O N V E R S I O N

TARGET-COMPILING
CODE >DIGIT  ( n -- c) \ ASM is 9 bytes, 4X faster
            TOS 9 CMPI,
            HI IF,              \ if n>9
               TOS 7 ADDI,      \ number is not base 10, add 7
            ENDIF,
            TOS  TCHAR 0 ADDI,  \ add ASCII 0 to TOS create char value
            NEXT,
            ENDCODE

: <#     ( --) PAD HP ! ;

 CODE HOLD  ( char -- )
 \ *G HOLD is CODE. 4 bytes bigger, 9% faster number output than Forth version.
           R1 STWP,        \ get workspace pointer
           26 (R1) DEC,    \ DEC address in HP user variable
           26 (R1) R1 MOV, \ put the address into R1
           TOS SWPB,
           TOS *R1 MOVB,   \ store char in address in R1
           TOS POP,
           NEXT,
           ENDCODE

: #      ( u -- ud2 ) 0 BASE@ UM/MOD >R  BASE@ UM/MOD SWAP >DIGIT HOLD R> ;
: #S     ( ud1 -- ud2)  BEGIN  # 2DUP OR  WHILE REPEAT ;
: #>     ( ud1 -- c-addr u) 2DROP HP @ PAD OVER - ;
: SIGN   ( n -- ) 0< IF  T[CHAR] -  HOLD  THEN ;
: UD.    ( d -- ) <#  #S  #> TYPE SPACE ;
: U.     ( u -- ) 0 UD. ;
: .      ( n -- ) DUP ABS 0 <#  #S ROT SIGN  #> TYPE SPACE ;

\ ======================================================================
\ M I S C E L L A N E O U S
[cc] HEX [tc]

: RECURSE     ( -- ) LATEST @ NFA>CFA COMPILE,  ; XIMMEDIATE
: DECIMAL     ( -- ) 0A BASE ! ;
: HEX         ( -- ) 10 BASE ! ;

\ ======================================================================
\ I N T E R P R E T E R

: INTERPRET  ( addr len -- ) 'IV PERFORM ;

\ ======================================================================
\ Q U I T :  The  O U T E R   I N T E R P R E T E R

: QUIT     ( -- )
           RP0 RP!
           SOURCE-ID OFF
           t[COMPILE] [
           BEGIN
              TIB DUP 80 ACCEPT SPACE
              INTERPRET
              STATE @ 0= IF  ."  ok"  THEN CR
           AGAIN ;

: EVALUATE ( c-addr u -- j*x)
      SOURCE-ID DUP @ >IN @ 2>R  ON 
      SOURCE 2>R
      INTERPRET
      2R> 'SOURCE 2!
      2R> >IN ! SOURCE-ID !
;

\ ======================================================================
\ E R R O R   H A N D L I N G
\
: ABORT    ( -- )
           SP0 SP!
           VDPTOP ^PAB !   \ set base pab pointer
           CR QUIT ;

: ?ABORT   ( f caddr u --)
           ROT
           IF
             CR
             CR ." ? " TYPE  HONK
             SOURCE-ID @   ( if source is NOT console)
             0> IF  ."  Line " LINES @ DECIMAL U.
                 CR CR SOURCE TYPE
             THEN ABORT
           THEN 2DROP ;

                  \ flag        addr length
: ?ERR     ( ? -- )             HERE COUNT ?ABORT ;
: ?EXEC    ( -- ) STATE @       TS" Interpret only" ?ABORT ;
: ?COMP    ( -- ) STATE @ 0=    TS" Compile only"   ?ABORT ;
: ?CSP     ( -- ) SP@ CSP @ -   TS" Unfinished"     ?ABORT ;
: !CSP     ( -- ) SP@ CSP ! ;

\ ======================================================================
\ S T R I N G   L I T E R A L

true [IF]  \ MULTI-STRING version
: S"       ( cccc" -- )          \ compiling action
\ *G Non-standard: when interpreting S" puts the string at HERE+>IN
\ ** and returns the address.
           ( cccc" --- addr len) \ interpreting action *NON-STANDARD*
           T[CHAR] " PARSE
           STATE @
           IF  COMPILE (S")  S,  EXIT THEN
           PAD >IN @ + DUP>R PLACE R> COUNT ; XIMMEDIATE
[ELSE]
 : S"       ( cccc" -- )  \ OLD VERSION
            T[CHAR] " PARSE
            STATE @
            IF  COMPILE (S")  S,
            ELSE PAD PLACE PAD COUNT
            THEN ; XIMMEDIATE
[THEN]

: ABORT"   ( i*x 0  -- i*x)    \ R: j*x -- j*x  x1=0
           ?COMP
           t[COMPILE] S"
            COMPILE ?ABORT ; XIMMEDIATE

[cc] cr .( FIND )
\ ======================================================================
\ D I C T I O N A R Y   S E A R C H
TARGET-COMPILING
 VARIABLE CONTEXT  [CC]  0 T, 0 T, 0 T, 0 T, 0 T, 0 T, 0 T, 0 T, [TC]
\ *G Array of Root + 8 wordlists to control search order

 VARIABLE CURRENT
\ ** wordlist where definitions will be added

: <FIND>  ( caddr --  caddr  0  if not found)
\                    xt    1  if immediate,
\                    xt   -1  if "normal"
          CONTEXT @ @ (FIND) ;

VARIABLE 'FIND   \ *G vector for the action of find
: FIND  ( -- ) 'FIND PERFORM ;

: '        ( -- xt) BL WORD FIND 0= ?ERR ;
: [']      ( -- <name> ) ?COMP  '  T[COMPILE] LITERAL ; XIMMEDIATE

: POSTPONE ( <name> -- ) \ *G replaces COMPILE and [COMPILE]
          ?COMP
          BL WORD FIND DUP 0= ?ERR
          0< IF   COMPILE COMPILE
          THEN  , ; XIMMEDIATE

\ ======================================================================
\ T E X T   O U T P U T

: ."      (  ccc" -- )
          t[COMPILE] S"                ( -- str len)
          STATE @
          IF   COMPILE TYPE EXIT THEN
          TYPE  ; XIMMEDIATE

: .(     T[CHAR] ) PARSE TYPE ; XIMMEDIATE

[CC] cr .( Interpreter/compiler loop)
\ ======================================================================
\ I N T E R P R E T E R  /  C O M P I L E R

TARGET-COMPILING
: <INTERP>  ( i*x c-addr u -- j*x )
         'SOURCE 2!  >IN OFF
          BEGIN
              BL WORD
              DUP C@  ( -- addr len)
          WHILE
              FIND ?DUP
              IF ( it's a word)
                   1+ STATE @ 0= OR
                   IF   EXECUTE
                   ELSE  ,
                   THEN
              ELSE ( it's a number)
                   COUNT NUMBER? ?ERR
                   t[COMPILE] LITERAL
              THEN
              DEPTH 0< TS" Short stack" ?ABORT
          REPEAT
          DROP ;

\ ======================================================================
\ T I - 9 9   T E X T   M O D E   C O N T R O L
TARGET-COMPILING

: TEXT    ( -- )
            F0 DUP 83D4 C!
       ( -- F0) 01 VWTR
              0  2 VWTR  \ set VDP screen page
               VTOP OFF  \ topline VDP offset
               VPG  OFF  \ VDP screen page offset
               E4 7 VWTR  \ sets FG & BG color
                28 C/L!
              2 VMODE !  \ 2=ID for 40 column "TEXT" mode
                PAGE ;

\ TI-99 F I L E   S Y S T E M   I N T E R F A C E

 [CC] include CC9900\SRC.DTC\dsrlinkA.hsf
 [CC] include CC9900\SRC.DTC\filesyX2.hsf

\ ======================================================================
0 [if]
TARGET-COMPILING
: WORDS     ( -- )
             CR
             0        ( word counter on stack)
             LATEST @
             BEGIN
                DUP   ( -- nfa) COUNT TYPE SPACE
                SWAP 1+ SWAP       \ inc. the counter
                NFA>LFA @ DUP
                ?TERMINAL  TS" *BREAK*" ?ABORT
             0= UNTIL
             DROP
             CR  U. SPACE ." words" ;
[then]
TARGET-COMPILING
: .S        ( -- )
      ." |"
      DEPTH
      IF
         0 DEPTH 2-
         DO    I PICK  U.    -1 +LOOP
      THEN ;

\ ======================================================================
\ D I C T I O N A R Y   C R E A T I O N
\ * UN-COMMENT HASH and you get 4-way hashed dictionary for 3..4x faster lookups.
: HEADER, ( addr len --)
      ALIGN
      CURRENT @ @ ,        \ get last NFA & compile in this LFA field
      0 C,                 \ compile the precedence byte (immediate flag)
      HERE >R              \ save HERE (ie: new NFA location)
      S,                   \ compile (addr len) as counted string
      WARNINGS @
      IF
        R@ FIND ( xt ?) NIP ( ?)
        IF
          SPACE  R@ COUNT 1F AND TYPE  ."  isn't unique "
        THEN
      THEN
      R@ LATEST !       \ HERE now is the last word defined
      R> CURRENT @ !    \ Also store in the current 'WID'
;

: HEADER    BL PARSE-WORD HEADER, ;

\ =======================================================================
\ T A R G E T   S Y S T E M   D E F I N I N G   W O R D S
\ dtc requires that each word starts with a branch to its executor routine.

( 06A0  is  the BL @   machine instruction )
\                   name-creator  runtime-action  parameter(s)
\                   ------------  --------------  -----------
: CONSTANT  ( n --)  HEADER      06A0 , _DOCON  ,      , ;
: USER      ( n --)  HEADER      06A0 , _DOUSER ,      , ;
: CREATE    ( -- )   HEADER      06A0 , _DOVAR  ,        ;
: VARIABLE  ( -- )   CREATE                          0 , ;

\ from studying gforth. It's a nice factor.
\ common code for ':' and ':NONAME'
: (:NONAME) ( -- )  06A0 , 839C ,  HIDE  ] ;


\ \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
\  =====[ CANNOT DEFINE ANY CONSTANT, VARIABLE OR USER AFTER THIS ]=====
\ //////////////////////////////////////////////////////////////////////


\ ======================================================================
\ D O E S   S U P P O R T  f o r  D T C  c o d e
: (;CODE) ( -- )
      R> LATEST @ NFA>CFA  \ DTC CFA is address of "BL @XXXX"
      2+ ! ;               \ we add 1 cell to replace XXXX. Don't touch BL@

: DOES>    ( -- )
      COMPILE (;CODE)
      0460 , _DODOES ,   \ *BRANCH* to _DODOES (cannot BL or we lose R11 value)
     ; XIMMEDIATE

\ ======================================================================
\ LOOPS AND BRANCH COMPILERS FOR THE TI-99 SYSTEM
[CC] HEX [TC]

\ MOVED most to load at boot time from DSK1.ISOLOOPS

\ ======================================================================
\ COLD sets Workspace, copy code to scratch pad, set stacks, run BOOT

[cc] HEX

TARGET-COMPILING
CODE COLD
              WRKSP0 LWPI,
              R0 HSprims LI,   \ source
              R1 HSstart LI,   \ destination
              BEGIN,           \ Copy hi-speed routines to fast RAM
                *R0+ *R1+ MOV,
                 R1 HSend CMPI,
              EQ UNTIL,
              SP  SP0  LI,     \ data stack
              RP  RP0  LI,     \ return stack
              R10 HSNEXT LI,   \ address of hs-speed NEXT to R10.
                               \ only used by a few primitives in DTC
              IP   BOOT LI,    \ LOAD CFA of boot word. ie: BL code address
              NEXT,            \ run Forth (inner interpreter)
              ENDCODE

\ *G MOVED TO DSK1.SYSTEM ** loads on Forth startup
\ *G : CODE      ( -- )  HEADER  HERE 2+ , !CSP ;
\ *G : NEXT,     ( -- )  045A , ;  \ B *R10
\ *G : ENDCODE   ( -- )  ?CSP  ;
\ *G ;CODE is moved to DSK1.SYSTEM ***

\ ======================================================================
\ B O O T  U P  C O D E
\ *new* Added VER string for easy updates
[CC] CODESEG 6000 =
[IF]
    [TC] : .VER   ." DTC 2.69 15Apr23 SuperCart" ;
[ELSE]
    [TC] : .VER   ." DTC 2.69 15Apr23" ;
[THEN]

[CC]
\ ======================================================================
\ B O O T   U P   C O D E
HEX
TARGET-COMPILING

0 [IF]
: DEBUG
        HEX
          CR  HERE U.  DP @ U.
          CR  CONTEXT @ U.   CURRENT @ U.
          CR  CONTEXT @ @ U.
          CR  LATEST U.  LATEST @ U.
;
[THEN]

\ *G (WARM) initializes variables and vectors
: WARM      ( -- )
              80 83C2 C!
              26 TPAD !
              1000 VP !
              H @ 2000 MAX 3FFF MIN  H !
              3FFF TMR!
              VDPTOP ^PAB !
              L0 LP !
              FLOOR ON
              SOURCE-ID OFF

            t['] <INTERP> 'IV !
            t['] <FIND>   'FIND !

             DECIMAL
             ORGDP @ DP !
             ORGLAST @ LATEST !
             LATEST DUP CONTEXT ! CURRENT !
             TEXT TS" CAMEL99 Forth " TYPE .VER
;

\ G*  CAMEL99 is the primary boot word that starts Forth and loads extensions
: LOADSYS
            WARM
            TS" DSK1.START" INCLUDED
            CR ABORT ;

\ ======================================================================
\ define target comment words
TARGET-COMPILING
: (         T[CHAR] ) PARSE 2DROP ; XIMMEDIATE
: \                 1 PARSE 2DROP ; XIMMEDIATE

[CC]
\ ======================================================================
\ TARGET Colon, :NONAME and Semi-colon  definitions
\ X: ;X are aliases for the cross-compiler : and ;

TARGET-COMPILING
 X: :         !CSP  HEADER (:NONAME)  ;X
 X: :NONAME   HERE  !CSP   (:NONAME)  ;X
 X: ;     [  REVEAL  _HSEXIT ,  ?CSP  ;X  XIMMEDIATE

 CROSS-COMPILING
