\ sub-routine threaded code words FORTH data types
\ ========================================================================
\ T A R G E T   C O D E - W O R D   C R E A T I O N

\ create SMART "code" words in the Target segment
\ They CANNOT run on the HOST system but abort with an error

CROSS-COMPILING

\ variable tcodewords

: TCODE-ERR     TRUE ABORT" Cannot run Target CODE words" ;

: ?code-ERR   sp@ csp @ - ABORT" XASM99: code word has left something on the stack" ;

: DOCALL      R11 RPUSH,

: (CODE)       TCREATE:                         \ make the word header(TCREATE: Taligns when done)
               R11 RPUSH,			            \ on entry save R11


                tcodewords 1+!                  \ count the new code word for COMPILER report
                TALIGN ;

 \ you MUST use CROSS-ASSEMBLING directive before using CODE:
: CODE         !CSP                             \ record the stack pointer for error checking
                (CODE)                          \ create the code word header & save R11

                NEW-JMPTABLE                     \ init the jump table
                DOES> TCODE-ERR ;                \ if you try to run these words they error out

: +CODE        (CODE)                          \ keep same jump-table but add this label inside a definition
                                                 \ so we can jump from word to word
                                                 \ *** DOES NOT NEED END-CODE ***
                 DOES> TCODE-ERR ;

: END-CODE      ?CODE-ERR ;



\ ============================================================================
\ C R O S S   C O M P I L E R   W O R D   " C R E A T O R S "

\ I add  the ':' to the cross-compiler creating words just so I can remember what's what.

\ these routines compile the 'jump to the EXECUTOR' for each word type
\ they are not defined yet so we make DEFERRed place-holders
DEFER JMP.DOCOL
DEFER JMP.DOVAR
DEFER JMP.DOCON
DEFER JMP.DOUSER
CROSS-COMPILING

: CREATE
                TCREATE:                       \ compile time: create a dual header and record the Target LFA in Host Forth
                  TOS PUSH, 
                  THERE @@ TOS MOV,
                DOES> @ nfa>PFA                \ Run-time: fetch the nfa we stored and convert to PFA (pointer to the data)
; 

: VARIABLE                       ( this creates an inline variable )
                TCREATE:                       \ compile time: create a dual header and record the Target LFA in Host Forth
                  TOS PUSH,  
                  THERE TCELL+ @@ TOS MOV,
                  0 T, 

                DOES> @ nfa>PFA ;              \ Run-time: fetch the nfa we stored and convert to PFA (pointer to the data)

: 2VARIABLE
                TCREATE:                       \ compile time: create a dual header and record the Target LFA in Host Forth
                THERE
                0 T, 0 T,                      \ make space for 2 cells and init them to 0
	              THERE TCELL-  @@ TOS MOV,


                DOES> @ nfa>PFA ;              \ Run-time: fetch the LFA we stored and convert to PFA (pointer to the data)

: CONSTANT                                    \ CONSTANT: words are used like a normal constant for debugging and compiling on the HOST
                TCREATE:                       \ compile time: create a dual header and record the Target LFA in Host Forth
                'DOCON  cfa,                   \ compile the 'docon' XT into this CFA
                ( n) T,                        \ compile the actual number into the next CELL which is the TARGET word's PFA

                DOES> @ nfa>PFA T@ ;           \ Run-time: fetch the nfa we stored and convert to PFA & fetch the data


\ =======================================================================
\ TMS9900 and user variables under CAMEL99

\ USER variables are used in Multi-tasking Forth systems.
\ They are "local" to a specific task and usually reference by a pointer
\ called 'UP' (user pointer)
\ CAMEL99 does not have a user pointer. It uses the TMS9900 WP register
\ Cool trick, but it means we can't read a value from the TARGET system
\ for the cross-compiler to use.

\ So we have to create a variable UP(t) and assign the value of the for
\ of the WP register for the Cross compiler to calculate a USER variable's
\ Address.

\ For TI-994a our primary workspace is at at HEX 8300
VARIABLE UP(t)   HEX 8300 UP(t) !

: USER
                TCREATE:                       \ compile time: create a dual header and record the Target LFA in Host Forth
                'DOUSER cfa,                   \ CROSS-compile the 'DOUSER' XT into this CFA
                ( n) T,                        \ compile the user variable no. in the PFA of the word.

                DOES> @ nfa>PFA t@  UP(t) @ + ;  \ reads parameter field (PFA) add it to the address of target UP


\ create smart TARGET colon words that abort if you try to run them
: <colon:>
                TCREATE:                       \ create a dual header and record the Target CFA in Host Forth
                'DOCOL  cfa,                   \ compile the DOCOL XT into this CFA
                                               \ PFA will contain the XTs of other words that are compiled into a new word.

                DOES> true abort" Cannot run a TARGET colon definition" ;
