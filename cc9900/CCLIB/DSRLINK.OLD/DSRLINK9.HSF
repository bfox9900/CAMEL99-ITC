\ DSRLNK  Ver 9 for XFC99 cross-compiler/Assembler

\ PASSES error code back to Forth workspace, TOS register

\ Source:
\ http://atariage.com/forums/topic/283914-specialized-file-access-from-xb/page-2
\ by InsaneMultitasker via Thierry Nouspikel

\ - Re-write to used CAMEL Forth Heap via the variable 'H' for NAMBUF
\ - Changed some jumps to structured loops & IF/THEN
\ - removed some unused code ( at least it looks unused)
\ - saved 44 bytes!!                                        B. Fox

CROSS-ASSEMBLING  XASSEMBLER DEFINITIONS

\ we need more labels than I normally use for Forth style CODE Words
 A DUP refer: @@A    binder: @@A:
 B DUP refer: @@B    binder: @@B:

CROSS-COMPILING XASSEMBLER DEFINITIONS
\ MACRO to simplify the VDP code
: VDPWA, ( reg -- )
       DUP           SWPB,   \ setup VDP address
       DUP VDPWA @@  MOVB,   \ write 1st byte of address to VDP chip
       DUP           SWPB,
           VDPWA @@  MOVB,   \ write 2nd byte of address to VDP chip
                     NOP,  ; \ need this tiny delay for VDP chip

\ gives access to Forth R4. (top of stack cache)
: [TOS]    8 (R13)  ;

\ === DSR WORKSPACE ======
[CC] HEX
 RP0 80 -     EQU DREGS    \ use memory below Forth RETURN stack for workspace
 5 2* DREGS + EQU DREG(5)  \ compute address of DREGS register 5

TARGET-COMPILING
\ === DATA BYTES ===
l: HEX20   20 BYTE,
l: HEXAA   AA BYTE,
l: DOT     2E BYTE,    \ ascii period
          .EVEN

CLR-JMPTABLE
\ === DSR ENTRY POINT ===
l: DSR1                      \ label creates headless code
      *R14+     R5   MOV,    \ get '8'->R5, auto inc R14, for return
       HEX20 @@ R15  SZCB,   \ >20 eq flag=0
       8356 @@  R0   MOV,    \ [PAB FNAME] to R0
       R0       R9   MOV,    \ dup R0 in R9
       R9       -8   ADDI,   \ R9-8 = [PAB FLG]
       R0           VDPWA,   \ set VDP address to address in R0
       VDPRD @@ R1   MOVB,   \ R1= length of FNAME

\ setup to copy VDP FNAME ->namebuf to '.' character
       R1       R3   MOVB,   \ DUP length byte to R3
       R3       08   SRL,    \ swap the byte to other side
       R4            SETO,   \ R4 = -1
       H @@      R2 MOV,     \ unused heap becomes temp. namebuf
       BEGIN,                \ search for length match and/or period in name
         R0            INC,    \ point to next fname VDP address
         R4            INC,    \ counter starts at 0
         R4       R3   CMP,    \ is counter = fnamelength
         @@1           JEQ,    \ if true goto @@1:
         R0          VDPWA,    \ set VDP address
         VDPRD @@ R1  MOVB,    \ read next VDP char from fname
         R1      *R2+ MOVB,    \ copy to namebuf & inc pointer
         R1    DOT @@ CMPB,    \ is it a '.'
       EQ UNTIL,               \ until '.' found  34 bytes!!!

\ ==== error checks ====
@@1:   R4        R4  MOV,    \ test R4 (device name length)=0
       @@6           JEQ,    \ if so, goto ERROR 6
       R4        07  CMPI,   \ is dev name length>7
       @@8           JGT,    \ if so, goto @@8 (ERROR6)
       83D0 @@       CLR,    \ erase magic CRU addr. holder
       R4   8354 @@  MOV,    \ put length in magic address
       R4            INC,    \ +1 points to '.' character
       R4   8356 @@  ADD,    \ add offset to PAB address (makes "real PAB")

\ ==== GPL WORKSPACE ====
       83E0         LWPI,    \ SROM (search ROM device list)
       R1           CLR,     \ MAGIC GPL REGISTER=0
       R12     1000 LI,      \ init CRU base to 1000
@@A:   BEGIN,                \ scan for I/O cards
         R12   R12   MOV,
         NE IF,              \ if card address<>0
              00 SBZ,        \ turn off card
         ENDIF,
         R12    0100  ADDI,  \ advance CRU to next card
         R12    2000 CMPI,   \ test for last card address
         @@5          JEQ,   \ no more cards. goto ERROR5
\ card activation...
         R12  83D0 @@ MOV,   \ save card CRU in magic address
         00           SBO,   \ turn on the card
         R2   4000    LI,    \ ROM start addr -> R2
        *R2  HEXAA @@ CMPB,  \ test for card present
       EQ UNTIL,             \ loop until card is found

       DREG(5) @@ R2 ADD,    \ add '8'+4000= >4008 = "DSR ROM List"
       @@B          JMP,

@@3: \ scan ROM linked list for code address
      BEGIN,
          BEGIN,
            83D2 @@   R2 MOV,   \ start of ROM device list -> R2
            00           SBO,   \ turn card on
 @@B:      *R2       R2  MOV,   \ Fetch next link
            @@A          JEQ,   \ if link=0 goto @@A (NEXT CARD)
            R2  83D2 @@  MOV,   \ save link address in magic address
            R2           INCT,  \ R2 = code pointer
           *R2+      R9  MOV,   \ fetch code address ->R9
            8355 @@  R5  MOVB,  \ dev length->R5
            @@4          JEQ,   \ if 0 we have a string match
            R5      *R2+ CMPB,
         EQ UNTIL,

\ find dev string match
         R5         08  SRL,    \ shift length byte
         H @@       R6  MOV,    \ heap ->R6 is NAMEBUF
         BEGIN,
            *R6+   *R2+ CMPB,   \ compare namebuf to ROM string
             @@3        JNE,    \ if mismatch goto @@3
             R5         DEC,    \ dec the counter register
         EQ UNTIL,

\ === run DSR code ===
@@4:     R1            INC,    \ count entries into the DSR ?
        *R9            BL,     \ call the DSR code
      AGAIN,                   \ try next card

\   -- DSR returns here if we are done --
       00            SBZ,  \ Turn off the card
       DREGS         LWPI, \ ==== DSR Workspace ====
       R9           VDPWA, \ set vdp address
       VDPRD @@  R1  MOVB, \ read error value to DREGS R1
       R1 0D         SRL,  \ shift error to correct range
       @@7           JNE,  \ if error<>0 goto @@7
                     RTWP, \ else return to Forth workspace

\ error condition handlers
@@5:   DREGS         LWPI, \ we came from GPL workspace, restore DREGS
@@6:                       \ device name length=0
@@8:   R1            SETO, \ device name length>7
@@7:
       GPLSTAT @@ R0 MOVB, \ get gpl status byte
                  R0 SWPB,
       R0       0020 ANDI, \ mask to get GPL error bit
       R0         R1 OR,   \ combine GPL & DSR error codes
       R1     [TOS]  MOV,  \ put error code in Forth TOS
                     RTWP, \ return to Forth

\          ******* DSRLINK ENDS *******
\ /\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/

\ create the vector for BLWP
l: DLNK
        DREGS DATA,        \ the workspace
        DSR1  DATA,        \ entry address of the code

CODE: DSRLNK  ( [pab_fname] -- ior)
          TOS 8356 @@ MOV,
          TOS CLR,
          TOS GPLSTAT @@ MOVB,   \ clear GPL status register
          0 LIMI,                \ critical that we disable interrupts here.
        DLNK @@ BLWP,
          8 DATA,
          2 LIMI,
        NEXT,
END-CODE