\ DISK only DSRLINK   VERSION 2                BJF MAR 20 2018
\ Aug 2018 replaced literal $20 with CONSTANT BL to save space

\ Overview:
\ This file provides a way to CALL code in the DSR ROM.
\ R9 of the GPL workspace is loaded directly with the entry address
\ for the DSR code that you are calling.
\ USAGE:   DSKLNK BLWP  **notice DSK LNK not  DSR LNK**

TARGET-COMPILING
\ Steal top address of the data stack and use for DSRWSP.
\ We in fact only use 6 bytes.
\ This workspace is only needed to isolate the Forth
\ workspace from the DSR workspace.

[CC] SP0 100 - [TC] VALUE: DSRWKSP
\                 [CC] [PRIVATE] [TC]
\ Define PAB constants
[CC] HEX [TC]
 1100 CONSTANT: DSKCARD   \ No need to scan for the Floppy DISK CARD. It's here
 4000 CONSTANT: 'ID       \ DSR ROM header addresses
 4008 CONSTANT: 'DSRLIST

\ ========================================================
\ This DRKLNK checks board status and turns is on and off
\ as needed

\ Create the BLWP VECTOR with the code
\               workspace    compile program address
\               ---------    -----------------------
CREATE: DSKLNK  DSRWKSP T,  [cc] THERE TCELL + T, [tc]
            0 LIMI,
            83E0 LWPI,             \ change to GPL workspace
            83D0 @@ R12 CMP, NE    \ is this a different card?
            IF,
                 0 SBZ,            \ if so, turn it off
                 83D0 @@ R12 MOV,  \ set the CRU address
                 0 SBO,            \ turn on the requested card
            ENDIF,
           *R9 BL,          \ GPL R9 already has the entry address
            8 DATA,         \ DSR returns here on an error
            0 SBZ,          \ turn off the card
            DSRWKSP LWPI,   \ back to the dummy workspace
            2 LIMI,
            RTWP,           \ Return to Forth Workspace
            NEXT,           \ Return to Forth interpreter

\ ========================================================


\ Create the DSR card scanner
[CC] HEX [TC]
                [CC] [PUBLIC] [TC]

: /DOT    ( caddr len -- caddr len')  \ cut string at the dot
           2DUP T[CHAR] . SCAN  NIP -  ;

\ : >DSR$   ( link -- $) 4 +  ;       \ add 4 to the link gets to the DSR$

: =$ ( $1 $2 -- flag) OVER C@ 1+ S= 0= ; \ compare 2 counted strings

\ DSRFIND searches for a matching device NAME in the DSR ROM starting at ROMLIST
\ It returns the link-address. (Link-address+2 = runnable code address)
: DSRFIND ( addr len ROMLIST -- link_addr)
           -ROT                        \ save the ROM list for later
     ( $20) BL MALLOC >R               \ get a temp$ buffer >20 bytes
           /DOT  R@ PLACE              \ cut filename at dot, place in temp$
           BEGIN
              @                        \ fetch the next link
              DUP 83D2 !               \ copy to 83D2 for O/S
              DUP 0=                   \ test for end of list
              SWAP  R@ OVER 4 +  =$    \ match TEMP$ to $ in ROM
              ROT OR                   \ if either is true we're done.
           UNTIL
           BL MFREE                    \ release 20 bytes to heap
           R> DROP ;                   \ free the heap

CODE: Enable ( CRU -- )       \ CODE versions, NO need for CRUSMALL library
              TOS R12 CMP,    \ is this a different card?
              NE IF,          \ if so, turn it off
                   0 SBZ,
              ENDIF,
              TOS R12 MOV,
              TOS 83D0 @@ MOV,
              0 SBO,          \ then turn on the requested card
              TOS POP,
              NEXT,
              END-CODE

CODE: Disable ( CRU -- )               \ turn off card address in R12
             TOS R12 CMP,    \ is this a different card?
             NE IF,          \ if so, turn it off
                 0 SBZ,
             ENDIF,
             TOS R12 MOV,
             0 SBZ,
             83D0 @@ CLR,
             R12 CLR,
             TOS POP,
             NEXT,
             END-CODE
