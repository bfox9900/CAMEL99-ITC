\ DSRLNK in XFC99 cross-compiler 9900 Assembler

\ VERSION 6 PASSES error code back to Forth workspace, TOS register
\ AND KEEPS THE EXTRA CODE RE: R12

\ Source:
\ http://atariage.com/forums/topic/283914-specialized-file-access-from-xb/page-2
\ by InsaneMultitasker via Thierry Nouspikel
[cc] HEX

CROSS-ASSEMBLING  XASSEMBLER DEFINITIONS

\ we need more labels than I normally use for Forth style CODE Words
 A DUP refer: @@A    binder: @@A:
 B DUP refer: @@B    binder: @@B:

CROSS-COMPILING XASSEMBLER DEFINITIONS
\ MACROS to simplify the VDP code
: VDPWA, ( reg -- )
       DUP           SWPB,    \ setup VDP address
       DUP VDPWA @@  MOVB,
       DUP           SWPB,
           VDPWA @@  MOVB,
                     NOP,  ;  \ 14 bytes

\ Access Forth TOS register from DSR workspace
: [TOS]    R4 CELLS (R13)  ;

\ ============== DSR LINK BEGINS ================
TARGET-COMPILING
8C02 EQU VDPWA
8C00 EQU VDWWD
8800 EQU VDPRD
837C EQU STATUS

l: HEX20  20 BYTE,
l: HEXAA  AA BYTE,
l: DOT    2E BYTE,  \ '.'
         .EVEN

\ Allocate a small buffer to parse the device name
 l: NAMBUF   BSS 6 \ TALLOT

\ These are ASM "variables"
l: H2000  2000 DATA,
l: CYC1   0000 DATA,
l: H1300  1300 DATA,

\ Use space 256 BYTES below Forth DATA stack for a workspace
[CC] SP0 100 - [TC] VALUE: DREGS

\ COMPUTE the address of R5 in DREGS workspace
[CC] 5 CELLS DREGS + [TC] EQU DREG(5)

CLR-JMPTABLE

l: DSR1
      *R14+     R5   MOV,    \ CALLER'S address->R5, auto inc for return
       HEX20 @@ R15  SZCB,   \ >20 eq flag=0
       8356 @@  R0   MOV,    \ [PAB FNAME] to R0
       R0       R9   MOV,    \ dup R0 to R9
       R9       -8   ADDI,   \ R9-8 = [PAB FLG]
       R0           VDPWA,
       VDPRD @@ R1   MOVB,   \ R1= length of FNAME
       R1       R3   MOVB,   \ DUP length byte to R3
       R3       08   SRL,    \ swap the byte to other side
       R4            SETO,   \ R4 = -1
       R2   NAMBUF   LI,     \ R2 is ^namebuf

  BEGIN, ( copy VDP FNAME ->namebuf upto '.' character  )
       R0            INC,    \ point to next fname VDP address
       R4            INC,    \ counter starts at 0
       R4       R3   CMP,    \ is counter = fnamelength
       @@1           JEQ,    \ if true goto @@1:
       R0          VDPWA,    \ set VDP address
       VDPRD @@ R1  MOVB,    \ read next VDP char from fname
       R1      *R2+ MOVB,    \ copy to namebuf & inc pointer
       R1    DOT @@ CMPB,    \ is it a '.'
  EQ UNTIL,                  \ until '.' found  80 bytes!!!

\ **********************************************************
\ possible new entry point if we record device length
\ and pass it to DREGS R4 from Forth
@@1:   R4        R4  MOV,    \ test R4=0
       @@6           JEQ,    \ if so, goto ERROR6
       R4        07  CMPI,   \ is dev name length>7
       @@8           JGT,    \ if so, goto @@8 (same as @@6)
       83D0 @@       CLR,    \ erase magic CRU addr. holder
       R4   8354 @@  MOV,    \ put DEVICE NAME (ex: DSK1) length in magic address
       R4            INC,    \ +1 points to '.' character
       R4   8356 @@  ADD,    \ add offset to PAB address (makes "real PAB")

\ ==== GPL WORKSPACE ====
       83E0         LWPI,    \ SROM (search ROM device list)
       R1           CLR,     \ MAGIC GPL REGISTER=0
       H2000 @@ CYC1 @@ MOV, \ init the CYC1 variable ??
       R12     0F00 LI,      \ init CRU base to 1000
       @@A          JMP, 

@@9:  R12    1000   LI,    \ Scan ROM
       H1300 @@ CYC1 @@ MOV,

@@A:  \ scan for I/O cards
    BEGIN,
       R12   R12   MOV,
       NE IF,              \ if card address<>0
           00 SBZ,         \ turn off card
       ENDIF,
       R12    0100  ADDI,  \ advance CRU to next card
       83D0 @@      CLR,   \ erase magic addres
       R12    2000  CMPI,  \
       @@9         JEQ,    \ Scan ROM
       R12  CYC1 @@ CMP,
       @@5          JEQ,   \ no more cards. goto ERROR5

\ card activation...
       R12  83D0 @@ MOV,   \ save card CRU in magic address
       00           SBO,   \ turn on the card
       R2   4000    LI,    \ ROM start addr -> R2
      *R2  HEXAA @@ CMPB,  \ test for card present
    EQ UNTIL,              \ loop until card is found
       DREG(5) @@ R2 ADD,
       @@B          JMP,

@@3: \ scan ROM linked list for code address
  BEGIN,
    BEGIN,
       83D2 @@   R2 MOV,   \ start of ROM device list -> R2
       00           SBO,   \ turn card on
@@B:  *R2       R2  MOV,   \ Fetch next link
       @@A          JEQ,   \ if link=0 goto @@A (NEXT CARD)
       R2  83D2 @@  MOV,   \ save link address in magic address
       R2           INCT,  \ R2 = code pointer
      *R2+      R9  MOV,   \ fetch code address ->R9
       8355 @@  R5  MOVB,  \ dev length->R5
       @@4          JEQ,   \ if 0 we have a string match
       R5      *R2+ CMPB,  \
    EQ UNTIL,              \ JNE DLOOP3

\ find dev string match
       R5       08  SRL,   \ shift length byte
       R6   NAMBUF  LI,    \ R6 hold ^nambuf
    BEGIN,
       *R6+   *R2+  CMPB,  \ compare namebuf to ROM string
        @@3         JNE,   \ if mismatch goto @@3
        R5          DEC,   \ dec the counter register
    EQ UNTIL,

@@4: \ DJUMP4 run DSR code
       R1            INC,
      *R9            BL,   \ call the DSR code
  AGAIN, \   @@3   JMP,  \ try next card

\   -- DSR returns here if we are done --
       00            SBZ,  \ Turn off the card
       DREGS         LWPI, \ ==== DSR Workspace ====
       R9    R0      MOV,  \ put [PAB FLG] addr ->R0
       R0           VDPWA, \ set vdp address
       VDPRD @@  R1  MOVB, \ read error value to DREGS R1
       R1 0D         SRL,  \ shift error to correct range
       @@7           JNE,  \ if error<>0 goto @@7
                     RTWP, \ else return to Forth workspace

\ error condition handlers
@@5:    DREGS        LWPI,
@@6: @@8:  R1        SETO, \ error code = -1 (DEVICE NOT FOUND)
@@7:    R1   [TOS]   MOV,  \ put error code in Forth's TOS register
        HEX20 @@ R15 SOCB, \ set Forth's workspace 'EQ' flag to 1
                     RTWP,
\ ============= DSR LINK ENDS ==============

\ Create a vector for BLWP
l: DLNK   DREGS DATA, DSR1 DATA,

\ CODE: DSRLNK  ( -- ior)
\        TOS PUSH,          \ space for error code on Forth stack
\        TOS CLR,           \ clear error code
\        0 LIMI,
\        DLNK @@      BLWP,
\        8            DATA,
\        2 LIMI,
\        NEXT,
\        END-CODE

 CODE: DSRLNK  ( [pab_fname] -- ior)
      TOS  8356 @@ MOV,    \ VDP file name addr->8356
\      *SP+  DREG(4) @@ MOV,
               TOS CLR,
                 0 LIMI,   \ disable interrupts here
    TOS GPLSTAT @@ MOVB,   \ clear GPL status register
           DLNK @@ BLWP,
                 8 DATA,
                 2 LIMI,
                   NEXT,
 END-CODE     \ 24 BYTES

