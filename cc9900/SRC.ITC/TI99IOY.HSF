\ T I - 9 9   S C R E E N   C O N T R O L  P R I M I T I V E S
\ These assembler routines manage the screen math at machine speed.
\ They are smaller and faster in ASM while still easy to understand.
\ Using these primitives and the VDP words CAMEL99 creates the rest of
\ video screen control in Forth.
\ We took a Forth approach to naming VDP memory routines.
\ So TI name, VSBR, becomes VC@  and VSBW becomes VC!.
\ VMBW and VMBR become VWRITE AND VREAD.
\ We also added a new one V! and V@ that load and store 16 bit numbers to VDP.

\ I embraced the Forth paradigm so these routines are created as
\ Forth words with stack based parameter passing. This gives us the freedom
\ to call these fast routines directly from Forth.
\ With these fast primitives we can write most of the VDP driver
\ in Forth and still get excellent performance.

\ Aug 31 2018,
\ CHANGED to read user variables correctly, via the workspace pointer WP.
\ 9900 Indexed addressing mode makes this almost as fast as indirect addressing
\ the variables.  It's all Multi-tasking friendly now
\ April 2020  On advice of Tursi, Atariage, I disable interrupts when VDP
\             address is set then restore them at the end of the routine.
\ Feb 2021    - Changed all address setting to use index addressing for
\              odd numbered bytes loading into VDP ports.
\ Jan 2022    - use address setter sub-routines for all words. Saved 62 bytes
\             - TOS is VDP address for all routines

[CC] CR ." V D P  C H I P  I N T E R F A C E"

\ Register Usage:
\ R0  down counter
\ R1  current workspace
\ R3  VDP data port
\ R4  VDP memory address

\
\ ================ LEAF SUB-ROUTINE  ** NOT NESTABLE ** ===================
TARGET-COMPILING
\ VDP set-address sub-routines

\ ** NOTE ** 
\ R1 is set to the workspace address. 
\ This is assumed to true in other VDP routines to access user variables 

L: WMODE  ( Vaddr -- Vaddr)
         TOS 4000 ORI,
L: RMODE R1 STWP,               \ avoids 2 SWPB instructions
         0 LIMI,
         9 (R1) 8C02 @@ MOVB,   \ write odd byte from TOS (ie: R4)
         TOS 8C02 @@ MOV,       \ MOV writes the even byte to the port
         RT,

\ ================== FORTH WORDS ======================
CODE VC@ ( VDP-adr -- char )   \ Video CHAR fetch
         RMODE @@ BL,
         TOS CLR,
         VDPRD @@ 9 (R1) MOVB, \ READ char from VDP RAM into TOS
         2 LIMI,
         NEXT,
         ENDCODE

CODE V@  ( VDPadr -- n)        \ video fetch 16bit int
         RMODE @@ BL,
         R3 VDPRD LI,          \ VDP port address in R3 faster reads
         *R3  TOS MOVB,        \ READ char from VDP RAM into TOS
         *R3  9 (R1) MOVB,     \ READ 2nd char from VDP RAM into TOS
         2 LIMI,
         NEXT,
         ENDCODE

CODE VREAD ( VDP-adr RAM-addr cnt  -- )
         TOS R0 MOV,        \ cnt->R0
         R2 POP,            \ pop ram addr. to R2
         TOS POP,           \ VDP address to TOS
         RMODE @@ BL,
         R3 VDPRD LI,       \ put VDP read port address in R3. 12% faster
         BEGIN,
            R0 DEC,
         OC WHILE,                 
            *R3 *R2+ MOVB,  \ READ from VDP RAM into CPU RAM , autoINC
         REPEAT,
         2 LIMI,
         TOS POP,           \ refill TOS
         NEXT, 
         ENDCODE

\ ===================================================================
[CC] CR ." V D P   W R I T E"  ( VMBW ) [TC]
0 [IF]
CODE VWRITE  ( RAM-addr VDP-addr cnt -- ) 
         TOS R0 MOV,         \ cnt in R0
         TOS POP,            \ vaddr to TOS
         R2 POP,             \ cpu addr to R2
         WMODE @@ BL,
         R3 VDPWD LI,        \ vdp addr. in a reg. makes this 12.9% faster
         BEGIN,
              R0 DEC,
         OC WHILE,      
             *R2+ *R3 MOVB, \ write byte to vdp write port
         REPEAT,
         2 LIMI,
         TOS POP,            \ refill top of stack cache register
         NEXT,               \ return to Forth
         ENDCODE
[ELSE]
CODE VWRITE  ( RAM-addr VDP-addr cnt -- ) 
         TOS R0 MOV,         \ cnt in R0
         TOS POP,            \ vaddr to TOS
         R2 POP,             \ cpu addr to R2
         WMODE @@ BL,
         R3 VDPWD LI,        \ vdp addr. in a reg. makes this 12.9% faster
         BEGIN,
              R0 DEC,
         OC WHILE,      
             *R2+ *R3 MOVB, \ write byte to vdp write port
         REPEAT,
         2 LIMI,
         TOS POP,            \ refill top of stack cache register
         NEXT,               \ return to Forth
         ENDCODE
[THEN]


CODE VC! ( char vaddr --)
         WMODE @@ BL,
         TOS POP,
         9 (R1) VDPWD @@ MOVB,  \ Odd byte R4, write to screen
         2 LIMI,
         TOS POP,               \ refill TOS
         NEXT,
         ENDCODE


\ : V!    ( n Vaddr --  ) SWAP HERE !  HERE SWAP 2 VWRITE ; 

CODE V! ( n Vaddr  -- )       \ Video store 16BIT int
         WMODE @@ BL,         \ branch to setup VDP write address
         TOS POP,
         TOS  VDPWD @@ MOVB,       \ even byte
         9 (R1) VDPWD @@ MOVB,     \ Odd byte R4, write to screen
         2 LIMI,
         TOS POP,             \ refill TOS
         NEXT,
         ENDCODE

CODE VFILL ( VDP-addr count char-- )
         TOS SWPB,             \ fix the TMS9900 byte order
         TOS W MOV,
         R0 POP,               \ R0=count
         TOS POP,              \ VDP-addr popped into TOS
         WMODE @@ BL,          \ setup VDP write address in TOS register
         R3 VDPWD LI,          \ vdp addr. in a reg. makes this 12.9% faster
         BEGIN,
            W *R3 MOVB,        \ write byte to vdp ram
            R0 DEC,            \ dec the byte counter
         EQ UNTIL,             \ jump back if not done
         2 LIMI,
         TOS POP,
         NEXT,
         ENDCODE

\ * VDP write to register. Kept the TI name
CODE VWTR   ( c reg -- )        \ Usage: 5 7 VWTR
         TOS SWPB,              \ register goes to left side
         *SP+ TOS ADD,
         0 LIMI,
         R1 STWP,
         9 (R1) 8C02 @@ MOVB,   \ write odd byte from R4
         TOS 8000 ORI,          \ set bit for write to VDP register
         TOS 8C02 @@ MOVB,      \ write the even byte
         2 LIMI,
         TOS POP,
         NEXT,
         ENDCODE
0 [IF]
 CODE VDPWA!  ( Vaddr -- ) \ set vdp address to write mode
        WMODE @@ BL,
        TOS POP,
        NEXT,
        ENDCODE
[THEN]

\ FAST user variable for screen driver
CODE C/L@   ( -- n )        \ this is used 8 times in the KERNEL. Saves 24 bytes
         TOS         PUSH,  \ and is 50% faster than C/L @
         TOS         STWP,
         2E (TOS) TOS MOV,
         NEXT,
         ENDCODE

