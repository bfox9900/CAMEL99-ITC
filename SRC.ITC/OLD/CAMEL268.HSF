\ CAMEL99 Forth for the TI-99  un-optimized  version  11Apr2019
\ Copyright (c) 2018 Brian Fox
\ KILWORTH Ontario Canada
\ brian.fox@brianfox.ca

\ compiles with XFC99D.EXE cross-compiler

\ This program is free software; you can redistribute it and/or modify
\ it under the terms of the GNU General Public License as published by
\ the Free Software Foundation; either version 3 of the License, or
\ (at your option) any later version.
\ You should have received a copy of the GNU General Public License
\ along with this program.  If not, see <http://www.gnu.org/licenses/>.
\
\ The work derived from CAMEL Forth under the GNU General Public License.
\ CamelForth (c) 2009 Bradford J. Rodriguez.
\ Commercial inquiries for Camel Forth should be directed to:
\ 115 First St., #105, Collingwood, Ontario L9Y 4W3 Canada
\ or via email to bj@camelforth.com

\ History
\ Oct 21 2019, replaced critical routines with CODE.
\              15% compile time speedup on TI-99

\ Dec 29 2019  V2.58 added VPG variable for multiple display screens
\              >VPOS computes address from col,row & adds VPG
\              added TOPLN code word to calc. topln of a screen
\ Jan 28 2020  V2.59 Replaced ?NUMBER with NUMBER?
\              Minor changes to <INTERPRET> Saved 34 bytes.
\ Oct 2020     V.266 Added CONTEXT array and CURRENT to support wordlists
\              Fixed bug in RAKE and fixed ISOLOOPS

\ Jul 2021     V2.68 Corrected bug in M+ found in V2.67
\ Dec 2021     V2.68G removed JIFFS. Replaced with TICKS, hi res timer.

\ ===================[ COMPILER CONTROL VALUES ]======================
CROSS-COMPILING

FALSE VALUE SLOWER     \ TRUE saves 26 bytes
FALSE VALUE HASHING
FALSE VALUE SUPERCART

\ ======================================================================
\ M E M O R Y   U S A G E   D E F I N I T I O N S
CROSS-COMPILING
HEX
       0FFFE   EQU EMEM    \ EMEM = "end of memory"
   EMEM 0080 - EQU 'TIB    \ ADDRESS OF Terminal Input Buffer
   EMEM 'TIB - EQU TIBSIZE \ 128 bytes

\ ======================================================================
\ Create FORTH stacks
HEX
     'TIB 2 -   EQU SP0    \ FORTH DATA stack base address
     'TIB 90 - EQU RP0    \ FORTH RETURN stack base address

\ ======================================================================
\ configure cross-compiler header and threading mechanism
CROSS-COMPILING

 INCLUDE CC9900\SRC.ITC\ITCTYPES.HSF   \ indirect threaded Forth words

\ ======================================================================
\ C O D E   P R I M I T I V E S

[CC] cr .( Compile Forth Assembler primitives ...)

 INCLUDE CC9900\SRC.ITC\9900CODE.HSF  \ ASM primitives for TMS9900
 INCLUDE CC9900\SRC.ITC\TI99IOX.HSF    \ VDP & KEY code

\ ======================================================================
\ T A R G E T   D E - C O M P I L E R
\ debugging tool used to examine cross-compiler output

CROSS-COMPILING
FALSE [IF]   INCLUDE CC9900\SRC.ITC\TSEE.HSF   [THEN]

\ ======================================================================
\ C R O S S   C O M P I L E R   B O O T - S T R A P P I N G
\ add loop and branch words to the cross-compiler (not the TARGET)

CROSS-COMPILING
INCLUDE CC9900\SRC.ITC\BOOTSTRP.HSF

TARGET-COMPILING

   VARIABLE STATE

   STATE [CC] TO XSTATE

\ ======================================================================
\ S Y S T E M   C O N S T A N T S

[CC] HEX
cr .( Constants and VARIABLEs...)

TARGET-COMPILING
\ ASM/Equate       Forth Name
\ -----------      ------------
 'TIB     CONSTANT TIB
 SP0      CONSTANT SP0
 RP0      CONSTANT RP0
 \ TIBSIZE  CONSTANT TIB#

\ Utility constants 
        0 CONSTANT FALSE
       -1 CONSTANT TRUE
        0 CONSTANT 0
        1 CONSTANT 1
\        2 CONSTANT 2
       20 CONSTANT BL

\ ======================================================================
\ U S E R   V A R I A B L E S
\ CAMEL99 uses space after workspace for user vars.
[CC] HEX [TC]
\ *G User VARIABLEs begin at >8320 for the primary Forth task
\ ** User VARIABLE 0 .. 1F are workspace registers.

      20 USER TFLAG
      22 USER JOB
      24 USER DP
      26 USER HP
      28 USER CSP
      2A USER BASE
      2C USER >IN
      2E USER C/L
      30 USER OUT
      32 USER VROW
      34 USER VCOL
      36 USER 'KEY     \ for vectored char input
      38 USER 'EMIT    \ for vectored char output
      3A USER LP
      3C USER SOURCE-ID
      3E USER 'SOURCE
\      40 USER -------   \ used by 'SOURCE

      46 USER TPAD
\     7E USER VPG        \ declared in TI99 VDP driver code

\ TI-99 system memory locations
\  8374 CONSTANT KUNIT#  \ byte
\  837C CONSTANT GPLSTAT \ byte

\ initial vocabulary with 4 threads
HASHING [IF]

  4 CONSTANT #THREADS
  VARIABLE LATEST  [CC] 4 CELLS TALLOT  [TC]

[ELSE]
  VARIABLE LATEST

[THEN]

\ *G These system VARIABLEs control cold starting the system
VARIABLE ORGDP
VARIABLE ORGLAST
VARIABLE BOOT

[CC] DECIMAL [TC]
   0024 CONSTANT L/SCR

[CC] HEX [TC]
VARIABLE VMODE
VARIABLE L0  [CC] 4 CELLS TALLOT  [TC]
VARIABLE ^PAB
VARIABLE LINES
VARIABLE C/SCR
VARIABLE 'IV    \ *G interpretor vector. Hold address of <INTERPRET>
VARIABLE H
VARIABLE VP
VARIABLE CURS     [CC] 205F CURS T! [TC]  \ BLANK and '_' in one VARIABLE
VARIABLE VTOP
\ VARIABLE WID-LINK

?stk
\ ======================================================================
[CC] cr .( Hi-level FORTH Primitives...)
TARGET-COMPILING
SLOWER [IF]
    : HERE   ( -- addr) DP @  ;
[ELSE]
 ( faster HERE speeds up the compiler)
 CODE HERE   ( -- addr) TOS PUSH, TOS STWP,  24 (TOS) TOS MOV,  NEXT, ENDCODE
[THEN]

: ALLOT     ( n --)   DP +! ;
: ,         ( n -- )  HERE ! 2 ALLOT ;
: COMPILE,  ( n -- )  , ;
: C,        ( n -- ) HERE C! 1 ALLOT  ;
: ALIGN     ( -- )   HERE ALIGNED DP ! ;
: PAD       ( -- addr) HERE TPAD @ + ;
: COMPILE   ( -- )  R> DUP 2+ >R @ COMPILE, ;
: IMMEDIATE ( --)   01 LATEST @ 1-  C! ;
: LITERAL   ( n -- n|~) STATE @ IF  COMPILE LIT  COMPILE,  THEN ;  XIMMEDIATE
: ]         ( -- ) STATE ON  ;
: [         ( -- ) STATE OFF ;  XIMMEDIATE
: DEPTH     ( -- n ) SP0 SP@ 2+ - 2/ ;

\ ======================================================================
\ PAB base address
: VDPTOP  ( -- n) 8370 @ 2- ;

\ ======================================================================
\ S T A C K   P R I M I T I V E S
[CC] cr .( Stack primitives ...)  [tc]

: TUCK  ( w1 w2 --  w2 w1 w2 ) SWAP OVER ;

0 [IF]

    : 2>R   SWAP >R >R ;  \ these don't work ??
    : 2R>   R> R> SWAP  ;

[ELSE]

CODE 2>R    ( d -- ) ( r-- n n)
              RP -4 ADDI,          \ 14
              TOS 2 (RP) MOV,      \ 22
             *SP+   *RP MOV,       \ 26
              TOS POP,             \ 22
              NEXT,              \ = 84
              ENDCODE

CODE 2R>     ( -- d )
              TOS PUSH,            \ 28
              SP DECT,             \ 10
             *SP  RPOP,            \ 26
              TOS RPOP,            \ 22
              NEXT,              \ = 88
              ENDCODE
[THEN]

\ *G NOT standard forth. Nice native 9900 instructions
CODE 1+! ( addr -- )  *TOS INC,  TOS POP,  NEXT,   ENDCODE
CODE 1-! ( addr -- )  *TOS DEC,  TOS POP,  NEXT,   ENDCODE

\ =====================================================================
\ C O M P A R I S O N   O P E R A T O R S

TARGET-COMPILING
: U>  ( n n -- ?)  SWAP U< ;
: 0>  ( n -- ?)    1- 0< INVERT ;
: <>  ( n n -- ?)  =  INVERT ;

: UMIN ( u1 u2 -- u )  2DUP U> IF SWAP THEN DROP ;
: UMAX ( u1 u2 -- u )  2DUP U< IF SWAP THEN DROP ;

SLOWER [IF]
    : WITHIN ( u lo hi -- t ) OVER - -ROT - U> ;
[ELSE]
CODE WITHIN   ( n  lo  hi -- flag )
        *SP  TOS  SUB,
        *SP+ *SP  SUB,
         TOS *SP+ SUB,
         TOS CLR,
         NC IF,  TOS SETO, ENDIF,
         NEXT,
         ENDCODE  \ 2 bytes bigger than Forth
[THEN]

\ =====================================================================
\ M I X E D  (32BIT/16BIT)   M A T H   O P E R A T I O N S

: */MOD  ( n1 n2 n3 -- n4 n5) >R UM* R> M/MOD ;

SLOWER [IF]
 : S>D    ( n -- d)  DUP 0< ;

[ELSE]
CODE S>D ( n -- d)
         TOS PUSH,     \ DUP
         TOS TOS MOV,  \ compare TOS to zero this way is smallest
         TOS CLR,      \ CLR does not affect CPU flags
         LT IF,        \ so we can jump on the previous compare instruction
              TOS SETO,
         ENDIF,
         NEXT,
         ENDCODE
[THEN]
: M+     ( d n -- d) S>D  D+ ;    \ * change from V2.67

: /MOD   ( n1 n2 -- n3 n4) >R S>D R> M/MOD ;
: /      ( n n -- n)   /MOD NIP  ;
: MOD    ( n n -- n)   /MOD DROP ;
: */     ( n n n -- n) */MOD NIP ;

\ =====================================================================
\ S T R I N G   T H I N G S

TARGET-COMPILING

\ CAMEL Forth calls this ">COUNTED"
: PLACE   ( src n dst -- ) 2DUP C! 1+ SWAP CMOVE ;

SLOWER [IF]
: /STRING ( caddr1 u1 n - caddr2 u2 ) TUCK - >R + R> ; \ 10 bytes

[ELSE]

CODE /STRING ( c-addr1 u1 n -- c-addr2 u2 ) \ ~20uS!!       Clks
              TOS   *SP  SUB,                               \ 18
              TOS 2 (SP) ADD,                               \ 22
              TOS POP,                         \ refill TOS   22
              NEXT,                            \ 8 bytes      62  ~20uS
              ENDCODE
[THEN]

: S,       ( c-addr u -- ) HERE OVER 1+ ALLOT PLACE  ALIGN ;

\ =====================================================================
\ H E A D E R   N A V I G A T I O N

TARGET-COMPILING
\ : NFA>LFA       ( nfa -- lfa)  3 - ;
CODE NFA>LFA    TOS -3 ADDI, NEXT, ENDCODE  ( faster, same size)
\ Changed 7F to 1F . 31 character max name length. Other bits for future use
: NFA>CFA       ( nfa -- cfa ) COUNT  1F AND + ALIGNED ;

\ smudge bit control in the Camel Forth
: HIDE          ( -- )  LATEST @ ( nfa) DUP C@ 80 OR  SWAP C! ;
: REVEAL        ( -- )  LATEST @ ( nfa) DUP C@ 7F AND SWAP C! ;

\ =====================================================================
\ P A R S E   W O R D
[CC] cr .( Parsing...)
TARGET-COMPILING

CODE DUP>R  ( n -- n) TOS RPUSH,  NEXT, ENDCODE  \ used 3 times

: SOURCE   ( -- addr len) 'SOURCE 2@ ;

: PARSE    ( char -- c-addr u )  \ gForth
            >R
            SOURCE  >IN @ OVER MIN /STRING
            OVER SWAP R>  SCAN >R
            OVER - DUP
            R> IF 1+ THEN  >IN +! ;

: PARSE-WORD  ( char -- c-addr n)  \ Camel/BFox common factor for WORD
            DUP SOURCE >IN @ /STRING
            ROT SKIP
            DROP SOURCE  -ROT -  MIN  0 MAX >IN !
            PARSE ;

: WORD     ( char -- c-addr)
            PARSE-WORD HERE PLACE
            HERE BL OVER COUNT + C!  \ append blank character
;

\ =====================================================================
\ S T R I N G  T O  N U M B E R   C O N V E R S I O N
[CC] CR .( CAMEL FORTH Number conversion)
 HEX
TARGET-COMPILING

SLOWER [IF]
    : BASE@   BASE @ ;
[ELSE]
 CODE BASE@
             TOS PUSH,
             R1 STWP,
             2A (R1) TOS MOV,
             NEXT,
             ENDCODE
[THEN]

SLOWER [IF]

: DIGIT?  ( c -- n -1) \ if c is a valid digit
 \             -- x  0  \ otherwise
  DUP  39 > 100 AND +    \ silly looking
  DUP 140 > 107 AND -  t[CHAR] 0 -   \ but it works!
  DUP BASE@ U< ;         \ 48 Bytes

[ELSE]

CODE DIGIT?   ( char -- n f )
            TOS PUSH,          \  dup char
            TOS -30 ADDI,      \  convert char to number
            TOS 9 CMPI,
            HI IF,
               TOS -7 ADDI,
               TOS 9 CMPI,
               LO IF,
                   TOS CLR,  \ bad result
                   NEXT,
               ENDIF,
            ENDIF,
            R1 STWP,       \ multi-tasking friendly
            TOS 2A (R1) CMP, \ USER var 2A (BASE)
            HE IF,
               TOS CLR,    \ bad result
               NEXT,
            ENDIF,
            TOS *SP MOV,   \ replace char with no.
            TOS SETO,      \ set flag to true
            NEXT,
            ENDCODE        \ 4 bytes bigger than Forth, much faster

[THEN]

: UD*      ( ud1 u2 -- ud3) DUP>R * SWAP R> UM* ROT + ;

: >NUMBER  ( ud adr u -- ud' adr' u' )
            BEGIN
            DUP WHILE
                OVER C@ DIGIT?
                0= IF DROP EXIT THEN
                >R 2SWAP BASE@ UD*
                R> M+ 2SWAP
                1 /STRING
            REPEAT ;

\ *G This is smaller than original ?NUMBER but ***FLAG LOGIC IS REVERSED***
: NUMBER?  ( addr len -- n ?)      \ ?=0 is good conversion
           (          -- addr len) \ bad conversion
            OVER C@ T[CHAR] - = DUP>R     \ save flag for later
            IF 1 /STRING THEN             \ remove minus sign
            0 0  2SWAP >NUMBER NIP NIP    \ convert the number
            R> IF SWAP NEGATE SWAP THEN   \ negate if needed
;

\ ======================================================================
\ S I M P L E   S O U N D  I N T E R F A C E

[CC] include cc9900\SRC.ITC\ticktock.hsf   \ hardware milli-second timer

TARGET-COMPILING

\ write a byte to address of TMS9919 chip
: SND!   ( c -- )  8400 C!  ;  \ 4 bytes, 277 uS

: BEEP     ( -- )
            80 SND! 5 SND!    \ pre-calculated values for OSC1 1390Hz
            91 SND!           \ turn on OSC1 at -2 dB level
            AA MS             \ Delay ~ 170 mS
            9F SND! ;         \ turn off OSC1

\ We use the HONK sound for ABORT like TI-BASIC does on errors
: HONK     ( -- )
            81 SND! 20 SND!   \ pre-calculated values for OSC1 218Hz
            90 SND!           \ turn on OSC1 at 0 dB level
            AA MS             \ Delay ~ 170 mS
            9F SND! ;         \ turn off OSC1

\ ======================================================================
\ V D P  S C R E E N   D R I V E R
[CC] cr .( Console output)

HEX [TC]

: C/L!     ( c/l -- )  \ pronounced "SEE-PER-ELL-STORE"
           DUP C/L !           \ set chars per line
           L/SCR *  C/SCR ! ;  \ calc. chars per screen

: VPOS   ( -- vaddr) VROW 2@ >VPOS ;
: VPUT   ( char -- ) VPOS VC! ;
: AT-XY  ( col row -- ) VROW 2! ;  \ set VDP address for Fast type

SLOWER [IF]

    : TOPLN   ( -- vaddr)  VPG @ VTOP @ + ;  \ 10 bytes
    : LASTLN  ( -- vaddr)  VPG @ C/SCR @ + ; \ 10 bytes

[ELSE]

CODE TOPLN ( -- vaddr)
       TOS PUSH,
       VPG @@  TOS MOV,
       VTOP @@ TOS ADD,
       NEXT,
       ENDCODE  \ 12 bytes

CODE LASTLN ( -- vaddr)
       TOS PUSH,
       VPG   @@ TOS MOV,
       C/SCR @@ TOS ADD,
       NEXT,
       ENDCODE  \ 12 bytes
[THEN]

\ =====================================================================
\ *G Scrolling has been implemented in Forth using VREAD & VWRITE
\ ** Uses un-allocated Dictionary as a temporary buffer to hold lines of text
: SCROLL ( buffer vaddr -- )
       PAUSE
       HERE 100 +     \ grab some space above Forth PAD
       TOPLN C/SCR @  ( -- buffer Vstart len)
       BOUNDS  ( -- buffer SCRend SCRstart)
       DO
         I  C/L@ +  OVER  C/L@ 4* VREAD
         DUP  I           C/L@ 4* VWRITE
       C/L@ 4* +LOOP
       DROP
       0 17 AT-XY VPOS C/L@ BL VFILL
;

\ ======================================================================
\ V D P   T E X T   O U T P U T

[cc] HEX [tc]
:  CR    ( -- )  (CR) L/SCR = IF  SCROLL  THEN  ;
: (EMIT) ( char -- ) CPUT IF  CR  THEN ;
: PAGE   ( -- ) TOPLN LASTLN OVER -  BL VFILL   0 0 AT-XY ;
: BS     ( --)  VCOL DUP @ 1- 0 MAX  SWAP ! ;

: EMIT   ( char -- )  \ shows how to handle control characters
          PAUSE
          DUP 0D = IF  DROP CR     EXIT THEN
          DUP 08 = IF  DROP BS     EXIT THEN
         (EMIT) ;

: TYPE ( addr cnt -- )
\    DUP 0= IF  2DROP EXIT  THEN PAUSE
    0 DO   COUNT (EMIT)   LOOP  DROP ;

: SPACE  ( -- )   BL (EMIT) ;
: SPACES ( n -- ) 0 MAX  0 ?DO  SPACE  LOOP ;

\ ======================================================================
\ S T R I N G   L I T E R A L S
[cc] HEX [tc]
\ run-time action of S"   (For ITC Forth only)
: (S")    ( -- c-addr u) R>  COUNT  2DUP + ALIGNED  >R ;

\ ======================================================================
CROSS-COMPILING

\ *G Re-solve CROSS-COMPILER Forward reference for '(S") and 'TYPE
T' (S")  RESOLVES '(S")
T' TYPE  RESOLVES 'TYPE

[cc] cr .( Character input)
\ ======================================================================
\ C H A R A C T E R   I N P U T
\ *G Cursor flash control is now done by reading the 9901 timer.
\ ** It counts down from >3FFF in 349mS. If the timer> 1FFF we show the cursor.
\ ** If < 1FFF show the screen char. Flash rate is about 2 per second.

TARGET-COMPILING
: KEY      ( -- char)
           BEGIN                  \ start the loop
              PAUSE               \ Essential for Multi-tasking with Console
              CURS @              \ fetch 2 char cursor (space & _ )
              TMR@ 1FFF <         \ compare hardware timer to 1FFF
              IF >< THEN VPUT     \ swap cursor bytes & write
              KEY?                \ check the keyboard
              ?DUP                \ DUP IF <> 0
            UNTIL                 \ loop until a key pressed
            BL VPUT ;             \ put the space char on screen

\ High level: input/output          (c) 31mar95 bjr
: ACCEPT     ( caddr +n -- +n')
             OVER + OVER         \ removed 1-  to accept all chars
             BEGIN
                KEY DUP 0D <>
             WHILE
                DUP EMIT
                DUP 8 =
                IF   DROP 1-  3 PICK  UMAX  \ changed to use: 3 PICK   B.F.
                ELSE OVER C!  1+ OVER UMIN
                THEN
             REPEAT
             DROP NIP SWAP -  ;

[cc] cr .( Number printing)
\ =====================================================================
\ N U M B E R   T O   S T R I N G   C O N V E R S I O N

TARGET-COMPILING

0 [IF]
   : >DIGIT   DUP 9 > IF 7 + THEN T[CHAR] 0 + ;  \ 20 BYTES :)

[ELSE]
CODE >DIGIT  ( n -- c) \ ASM is 9 bytes, 4X faster
            TOS 9 CMPI,
            HI IF,              \ if n>9
               TOS 7 ADDI,      \ number is not base 10, add 7
            ENDIF,
            TOS  TCHAR 0 ADDI,  \ add ASCII 0 to TOS create char value
            NEXT,
            ENDCODE
[THEN]

: <#     ( --)   PAD HP ! ;

SLOWER [if]
   : HOLD   ( char -- )  HP DUP 1-! @ C! ;

[else]  \ this took a while to get right :)
 CODE HOLD  ( char -- )
 \ *G HOLD is CODE. 4 bytes bigger, 4..9% faster number output than Forth version.
           R1 STWP,        \ get workspace pointer
           26 (R1) DEC,    \ DEC address in HP user variable
           26 (R1) R1 MOV, \ put the address into R1
           TOS SWPB,
           TOS *R1 MOVB,   \ store char in address in R1
           TOS POP,
           NEXT,
           ENDCODE
[then]

: #      ( u -- ud2 ) 0 BASE@ UM/MOD >R  BASE@ UM/MOD SWAP >DIGIT HOLD R> ;
: #S     ( ud1 -- ud2)  BEGIN  # 2DUP OR  WHILE REPEAT ;
: #>     ( ud1 -- c-addr u) 2DROP HP @ PAD OVER - ;
: SIGN   ( n -- ) 0< IF  T[CHAR] -  HOLD  THEN ;
: UD.    ( d -- ) <#  #S  #> TYPE SPACE ;
: U.     ( u -- ) 0 UD. ;
: .      ( n -- ) DUP ABS 0 <#  #S ROT SIGN  #> TYPE SPACE ;

\ ======================================================================
\ M I S C E L L A N E O U S
[cc] HEX [tc]

: RECURSE     ( -- ) LATEST @ NFA>CFA COMPILE,  ; XIMMEDIATE
: DECIMAL     ( -- ) 0A BASE ! ;
: HEX         ( -- ) 10 BASE ! ;

\ ======================================================================
\ I N T E R P R E T E R

: INTERPRET  ( addr len -- ) 'IV PERFORM ;

\ ======================================================================
\ Q U I T :  The  O U T E R   I N T E R P R E T E R

: QUIT     ( -- )
           L0 LP !   RP0 RP!
           SOURCE-ID OFF
           t[COMPILE] [
           BEGIN
              TIB DUP 80 ACCEPT SPACE    \ TIB is $80 (128) bytes long
            ( addr len) INTERPRET
              STATE @ 0= IF  T."  ok"  THEN CR
           AGAIN ;

: EVALUATE ( c-addr u -- j*x)
           SOURCE-ID ON
           SOURCE 2>R
           >IN @ >R
           INTERPRET
           R> >IN !
           2R> 'SOURCE 2!
           SOURCE-ID OFF ;

\ ======================================================================
\ E R R O R   H A N D L I N G
\
: ABORT    ( -- )
           SP0 SP!
           VDPTOP ^PAB !   \ set base pab pointer
           CR QUIT ;

: ?ABORT   ( f caddr u --)
           ROT
           IF
             CR
             CR T." * " TYPE  T."  ?" HONK
             SOURCE-ID @   ( if source is NOT console)
             0> IF  T."  Line " LINES @ DECIMAL U.
                 CR CR SOURCE TYPE
             THEN ABORT
           THEN 2DROP ;

                  \ flag        addr length
: ?ERR     ( ? -- )             HERE COUNT ?ABORT ;
: ?EXEC    ( -- ) STATE @       TS" Interpret only" ?ABORT ;
: ?COMP    ( -- ) STATE @ 0=    TS" Compile only"   ?ABORT ;
: ?CSP     ( -- ) SP@ CSP @ -   TS" Unfinished"     ?ABORT ;
: !CSP     ( -- ) SP@ CSP ! ;

\ ======================================================================
\ S T R I N G   L I T E R A L

true [IF]  \ MULTI-STRING version
: S"       ( cccc" -- )          \ compiling action
\ *G Non-standard: when interpreting S" puts the string at HERE+>IN
\ ** and returns the address.
           ( cccc" --- addr len) \ interpreting action *NON-STANDARD*
           T[CHAR] " PARSE
           STATE @
           IF  COMPILE (S")  S,

           ELSE  PAD >IN @ + DUP>R PLACE
                 R> COUNT
           THEN ; XIMMEDIATE
[ELSE]
 : S"       ( cccc" -- )  \ OLD VERSION
            T[CHAR] " PARSE
            STATE @
            IF  COMPILE (S")  S,
            ELSE PAD PLACE PAD COUNT
            THEN ; XIMMEDIATE
[THEN]

: ABORT"   ( i*x 0  -- i*x)    \ R: j*x -- j*x  x1=0
           ?COMP
           t[COMPILE] S"
            COMPILE ?ABORT ; XIMMEDIATE

[cc] cr .( FIND )
\ ======================================================================
\ D I C T I O N A R Y   S E A R C H
TARGET-COMPILING

\ used to compute 4way hash of words for fast dictionary searches

HASHING [IF]
CODE HASH  ( string wid-pfa -- thread-addr )
         *SP+ R1 MOV,        \ Address of the STRING
          R1     INC,
         *R1  R1 MOVB,       \ fetch first character
          R1   8 SRA,        \ switch to other side
          R1  03 ANDI,       \ use to LSB bits
          R1  R1 ADD,        \ 2* to make a cell offset
          R1 TOS ADD,        \ addr to base PFA
          NEXT,              \ 16 bytes
          ENDCODE
[THEN]

 VARIABLE CONTEXT  [CC]  0 T, 0 T, 0 T, 0 T, 0 T, 0 T, 0 T, 0 T, [TC]
\ *G Array of Root + 8 wordlists to control search order

 VARIABLE CURRENT
\ ** wordlist where definitions will be added

: <FIND>  ( caddr --  caddr  0  if not found)
\                    xt    1  if immediate,
\                    xt   -1  if "normal"
            CONTEXT @ ( HASH) @ (FIND) ;

VARIABLE 'FIND   \ *G vector for the action of find

: FIND    'FIND PERFORM ;

: '        ( -- xt) BL WORD FIND 0= ?ERR ;
: [']      ( -- <name> ) ?COMP  '  T[COMPILE] LITERAL ; XIMMEDIATE

 : POSTPONE ( <name> -- ) \ *G replaces COMPILE and [COMPILE]
          ?COMP
          BL WORD FIND DUP 0= ?ERR
          0< IF   COMPILE COMPILE
          THEN  COMPILE, ;  XIMMEDIATE

\ ======================================================================
\ T E X T   O U T P U T

: ."      (  ccc" -- )
          t[COMPILE] S"                ( -- str len)
          STATE @
          IF   COMPILE TYPE
          ELSE TYPE
          THEN ; XIMMEDIATE

: .(     T[CHAR] ) PARSE TYPE ; XIMMEDIATE

[CC] cr .( Interpreter/compiler loop)
\ ======================================================================
\ I N T E R P R E T E R  /  C O M P I L E R

TARGET-COMPILING
: <INTERP>  ( i*x c-addr u -- j*x )
         'SOURCE 2!  >IN OFF
          BEGIN
              BL WORD DUP C@ ( -- addr len)
          WHILE
              FIND ?DUP
              IF ( it's a word)
                   1+ STATE @ 0= OR
                   IF   EXECUTE
                   ELSE COMPILE,
                   THEN
              ELSE ( it's a number)
                   COUNT NUMBER? ?ERR
                   t[COMPILE] LITERAL
              THEN
              DEPTH 0< TS" Short stack" ?ABORT
          REPEAT
          DROP ;

\ ======================================================================
\ T I - 9 9   T E X T   M O D E   C O N T R O L
TARGET-COMPILING

: TEXT    ( -- )
             F0 DUP 83D4 C!
       ( -- F0) 01 VWTR
              0  2 VWTR  \ set VDP screen page
               VTOP OFF  \ topline VDP offset
               VPG  OFF  \ VDP screen page offset
             12  7 VWTR  \ sets FG & BG color
             28 C/L!
             0 0 AT-XY
             2 VMODE !   \ 2=ID for 40 column "TEXT" mode
             PAGE
;
\ ======================================================================
\ TI-99 F I L E   S Y S T E M   I N T E R F A C E

[CC] include CC9900\SRC.ITC\DSRLINKA.hsf
[CC] include CC9900\SRC.ITC\filesyX2.hsf

\ ======================================================================
\ D I C T I O N A R Y   C R E A T I O N
\ * UN-COMMENT HASH and you get 4-way hashed dictionary for 3..4x faster lookups.
: HEADER, ( addr len --)
      ALIGN
      CURRENT @  DUP>R   \ Fetch CURRENT wid, make a copy for later
\ === compile the header fields ===
      @ ,                  \ fetch the NFA & compile in the LFA field
      0 C,                 \ compile the precedence byte (immediate flag)
      HERE DUP LATEST !   \ HERE is now a new NFA, store NFA in LATEST
      R>  !                \ & also in the current 'WID' we saved earlier
      S, ;                 \ compile the (addr len) string as the name.

: HEADER   BL PARSE-WORD HEADER, ;


\ T A R G E T   S Y S T E M   D E F I N I N G   W O R D S
\                    text    runtime-action   parameter
\                   -------  --------------- -----------
 : CONSTANT  ( n --)  HEADER  COMPILE DOCON     COMPILE, ;
 : USER      ( n --)  HEADER  COMPILE DOUSER    COMPILE, ;
 : CREATE    ( -- )   HEADER  COMPILE DOVAR              ;
 : VARIABLE  ( -- )   CREATE                  0 COMPILE, ;

\ (:noname) came from studying gforth. It's a nice factor.
: (:NONAME) ( -- )  T['] DOCOL @ COMPILE,  HIDE  ]  ;

\ \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
\  =====[ CANNOT DEFINE ANY CONSTANT, VARIABLE OR USER AFTER THIS ]=====
\ //////////////////////////////////////////////////////////////////////
\ ======================================================================
\ D O E S   S U P P O R T
: (;CODE) ( -- )  R> LATEST @ NFA>CFA !  ;

\ 06A0 = BL   0460 = B
: DOES>    ( -- )
           COMPILE (;CODE)
           06A0 COMPILE,  PFA' DODOES COMPILE,   \ compiles: BL @DODOES
           ; XIMMEDIATE

\ ======================================================================
\ LOOPS AND BRANCH COMPILERS FOR THE TI-99 SYSTEM

[CC]  include cc9900\SRC.ITC\ISOLOOPS.HSF

\ \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
\  ===[ CANNOT COMPILE IF, ELSE, THEN, BEGIN UNTIL ETC. AFTER THIS ]===
\ //////////////////////////////////////////////////////////////////////
\ ======================================================================
\ INIT: Set Workspace, copy code to scratch pad, set stacks, run BOOT

[cc] HEX

TARGET-COMPILING
CODE INIT
              WRKSP0 LWPI,
              R0 HSprims LI,   \ source
              R1 HSstart LI,   \ destination
              BEGIN,           \ Copy hi-speed routines to fast RAM
                *R0+ *R1+ MOV,
                 R1 HSend CMPI,
              EQ UNTIL,
              SP  SP0  LI,     \ data stack
              RP  RP0  LI,     \ return stack
              R10 NEXT2 LI,    \ inner interpreter
              IP  BOOT  LI,    \ load interpreter pointer with boot word
             *R10 B,           \ run Forth (inner interpreter)
              ENDCODE

\ *G MOVED TO DSK1.SYSTEM ** loads on Forth startup
\ *G : CODE      ( -- )  HEADER  HERE 2+ , !CSP ;
\ *G : NEXT,     ( -- )  045A , ;  \ B *R10
\ *G : ENDCODE   ( -- )  ?CSP  ;
\ *G ;CODE is moved to DSK1.SYSTEM ***

\ *new* Added VER string for easy updates
: VER  TS" 2.68G" ;

[CC] HEX
\ ======================================================================
\ B O O T   U P   C O D E
TARGET-COMPILING
: WARM       ( -- )
\ *G restarts Forth but does not load DSK1.START
              80 83C2 C!                    \ disable user interrupts
              26 TPAD !                     \ HERE + 38 bytes for root task PAD
              1000 VP !                     \ reset VDP memory manager
              2000  H !                     \ reset HEAP, +16 bytes for DSRLINK
              3FFF TMR!                     \ start 9901, enable interrupts too
              VDPTOP ^PAB !                 \ reset PAB stack in VDP RAM
            t['] <INTERP> 'IV !             \ PATCH interpreter vector
            t['] <FIND>   'FIND !           \ set find action
              ORGDP @ DP !                  \ restore dictionary
              ORGLAST @ LATEST !            \ restore last word pointer
              LATEST DUP CONTEXT ! CURRENT !  \ FORTH DEFINITIONS
              FLOOR ON
              TEXT                          \ VDP start screen
              T." CAMEL99 Forth " VER TYPE
              DECIMAL                       \ default to base 10
;

: COLD        WARM
\ *G performs WARM start includes DSK1.START and runs ABORT
              RP0 RP!  SP0 SP!              \ RESET Forth stacks
              TS" DSK1.START" INCLUDED
              ABORT ;

\ =====================================================================
\ define target comment words
TARGET-COMPILING
: (         T[CHAR] ) PARSE 2DROP ; XIMMEDIATE
: \                 1 PARSE 2DROP ; XIMMEDIATE

[CC]
\ =====================================================================
\ TARGET Colon, :NONAME and Semi-colon  definitions
\ X: ;X are aliases for the cross-compiler : and ;

TARGET-COMPILING
 X: :         !CSP  HEADER (:NONAME)  ;X

 X: :NONAME   HERE  !CSP   (:NONAME)  ;X

 X: ;        [  REVEAL COMPILE EXIT ?CSP ;X  XIMMEDIATE

[CC]
\           F O R T H   S Y S T E M   C O D E   E N D S
\ /\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
cr .( Forth Kernel compiled completely")

\ ======================================================================
\  P A T C H   T H E   T A R G E T  S Y S T E M   V A R I A B L E S

[CC]   XLATEST @ DUP LATEST T!

                    ORGLAST T!
            THERE   DUP DP T!
                      ORGDP T!

\ ======================================================================
\ P A T C H   T A R G E T   I M A G E  F I L E   H E A D E R

CARTRIDGE
[IF]
     FILENAME: CAM268SC
[ELSE]
     FILENAME: CAMEL268
[THEN]
         T' INIT >BODY BOOT-ADDRESS T!

\ SET THE BOOT WORD TO RUN

         T' COLD BOOT T!

          END.   ( report compile time and stats)

\ ======================================================================
\ S A V E   B I N A R Y  I M A G E   F I L E

         FILENAME$ $SAVE-EA5.     \ FILENAME$ was set by FILENAME:

\ ======================================================================
\  C O P Y   T O   T I - 9 9   V I R T U A L   D I S K
.( copying binary file to TI-99 Emulator DSK1.)

\ build the copy command in host Forth PAD memory
S" COPY " PAD PLACE   FILENAME$ COUNT PAD +PLACE
S"  cc9900\CAMEL99.WIP\dsk1.itc\" PAD +PLACE

CR PAD COUNT 2DUP TYPE SYSTEM

CROSS-COMPILING

 CR ." === COMPILE ENDED PROPERLY ==="
QUIT

\ BYE  ( OR use this to return to DOS)
