\ ANS/ISO  T A R G E T   B R A N C H   C O M P I L E R S   Aug 18 2021 B Fox

\ These versions RUN IN THE TARGET system to compile loops and branches in the TI-99.
\ These versions do not use compile-time checking like Fig-Forth.
\ This improves compile time speed

[CC] HEX [TC]
: <BACK    ( addr --) HERE -  , ;   \ resolve branch backwards
: AHEAD    COMPILE BRANCH HERE 0 , ;  XIMMEDIATE \ compile a jump forward

\ CAMEL Forth LEAVE stack pointer is called LP. It is initialized by QUIT
: >L        ( x -- ) ( L: -- x ) 2 LP +!   LP @ ! ;     \ LP stack grows up
: L>        ( -- x ) ( L: x -- ) LP @ @  -2 LP +! ;
\ CODE >L
\  R1 STWP,
\  3A (R1) INCT,
\  3A (R1) R0 MOV,
\   TOS *R0 MOV,
\   TOS POP,
\   NEXT,
\ ENDCODE

\ CODE L>
\   TOS PUSH,
\    R1 STWP,
\    3A (R1) TOS MOV,
\    *TOS TOS MOV,
\    3A (R1) DECT,
\    NEXT,
\ ENDCODE

\ THEN resolves branches
\ computes offset: (HERE - addr)  & stores result in addr
: THEN  ( addr -- )  HERE OVER - SWAP ! ;  XIMMEDIATE

\ -----------------------------------------------------------------------
\ RAKE  resolves branching out of DO/LOOPS that use LEAVE
\       CAMEL Forth calls this ENDLOOP... but it RAKEs the LEAVEs. Get it?

\ NOTE: We MUST put RAKE here because it uses the cross-compiler's
\       WHILE/REPEAT loop. We cannot CROSS COMPILE loops in our code AFTER we
\       define the TARGET system LOOPS below.

: RAKE    ( -- ) ( L: 0 a1 a2 .. aN -- )
      BEGIN  L> ?DUP WHILE    T[COMPILE] THEN  REPEAT ;

\ ========================================================================
\ DO/LOOP  COMPILERS
\                 -compile this-   - run this now-
: DO        ( n n -- adr) ?COMP COMPILE <DO>   0 >L  HERE  ;  XIMMEDIATE
: ?DO       ( n n -- adr) ?COMP COMPILE <?DO>  0 >L  HERE  ;  XIMMEDIATE
: LEAVE     ( -- ) COMPILE UNLOOP  t[COMPILE] AHEAD >L ; XIMMEDIATE

\ complete a DO loop
: LOOP      ( -- )  COMPILE <LOOP>  <BACK   RAKE ; XIMMEDIATE
: +LOOP     ( -- )  COMPILE <+LOOP> <BACK   RAKE ; XIMMEDIATE

\ SIMPLIFIED LOOPS
\ Posted by dxforth comp.lang.forth
\ Modded for Camel99 to compute branch offsets AND no POSTPONE word
: BEGIN   HERE ;                                XIMMEDIATE
: IF      COMPILE ?BRANCH HERE 0 , ;            XIMMEDIATE
: ELSE    T[COMPILE] AHEAD SWAP T[COMPILE] THEN ; XIMMEDIATE
: UNTIL   COMPILE ?BRANCH <BACK ;               XIMMEDIATE
: AGAIN   COMPILE BRANCH  <BACK ;               XIMMEDIATE
: WHILE   T[COMPILE] IF SWAP ;                  XIMMEDIATE
: REPEAT  T[COMPILE] AGAIN T[COMPILE] THEN ;    XIMMEDIATE
