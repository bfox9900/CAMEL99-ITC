\ T I - 9 9   S C R E E N   C O N T R O L  P R I M I T I V E S
\ These assembler routines manage the screen math at machine speed.
\ They are smaller and faster in ASM while still easy to understand.
\ Using these primitives and the VDP words CAMEL99 creates the rest of
\ video screen control in Forth.
\ We took a Forth approach to naming VDP memory routines.
\ So TI name, VSBR, becomes VC@  and VSBW becomes VC!.
\ VMBW and VMBR become VWRITE AND VREAD.
\ We also added a new one V! and V@ that load and store 16 bit numbers to VDP.

\ I embraced the Forth paradigm so these routines are created as
\ Forth words with stack based parameter passing. This gives us the freedom
\ to call these fast routines directly from Forth.
\ With these fast primitives we can write most of the VDP driver
\ in Forth and still get excellent performance.

\ Aug 31 2018,
\ CHANGED to read user variables correctly, via the workspace pointer WP.
\ 9900 Indexed addressing mode makes this almost as fast as indirect addressing
\ the variables.  It's all Multi-tasking friendly now
\ April 2020  On advice of Tursi, Atariage, I disable interrupts when VDP
\             address is set then restore them at the end of the routine.
\ Feb 2021    - Changed all address setting to use index addressing for
\              odd numbered bytes loading into VDP ports.
\ Jan 2022    - use address setter sub-routines for all words. Saved 62 bytes
\             - TOS is VDP address for all routines

[CC] CR .( V D P  C H I P  I N T E R F A C E)
HEX

\ Register Usage:
\ R0  down counter
\ R1  current workspace
\ R3  VDP data port
\ R4  VDP memory address

\
\ ================ LEAF SUB-ROUTINE  ** NOT NESTABLE ** ===================
 CROSS-ASSEMBLING
\ VDP set-address sub-routines
L: WMODE  ( Vaddr -- Vaddr)
           TOS 4000 ORI,
L: RMODE   R1 STWP,               \ avoids 2 SWPB instructions
           0 LIMI,
           9 (R1) 8C02 @@ MOVB,   \ write odd byte from TOS (ie: R4)
           TOS 8C02 @@ MOV,       \ MOV writes the even byte to the port
           RT,


\ ================== FORTH WORDS ======================
CODE VC@   ( VDP-adr -- char )   \ Video CHAR fetch
            RMODE @@ BL,
            TOS CLR,
            VDPRD @@ 9 (R1) MOVB, \ READ char from VDP RAM into TOS
            2 LIMI,
            NEXT,
            ENDCODE

CODE V@   ( VDPadr -- n)        \ video fetch 16bit int
           RMODE @@ BL,
           R3 VDPRD LI,         \ VDP port address in R3 faster reads
           *R3  TOS MOVB,        \ READ char from VDP RAM into TOS
           *R3  9 (R1) MOVB,     \ READ 2nd char from VDP RAM into TOS
            2 LIMI,
            NEXT,
            ENDCODE

CODE VREAD   ( VDP-adr RAM-addr cnt  -- )
          TOS R0 MOV,           \ cnt->R0
          R2 POP,               \ pop ram addr. to R2
          TOS POP,              \ VDP address to TOS
          R0 R0 MOV,            \ test cnt<>0
          NE IF,
                RMODE @@ BL,
                R3 VDPRD LI,      \ put VDP read port address in R3. 12% faster
                BEGIN,
                  *R3 *R2+ MOVB,  \ READ from VDP RAM into CPU RAM , autoINC
                   R0 DEC,
                EQ UNTIL,
                2 LIMI,
          ENDIF,
          TOS POP,                \ refill TOS
          NEXT,
          ENDCODE

\ ===================================================================
[CC] CR ." V D P   W R I T E"  ( VMBW ) [TC]

CODE VWRITE  ( RAM-addr VDP-addr cnt -- )
           TOS R0 MOV,         \ cnt in R0
           TOS POP,            \ vaddr to TOS
           R2 POP,             \ cpu addr to R2
           R0 R0 MOV,
           NE IF,
              WMODE @@ BL,
              R3 VDPWD LI,     \ vdp addr. in a reg. makes this 12.9% faster
              BEGIN,
                *R2+ *R3 MOVB, \ write byte to vdp write port
                 R0 DEC,
              EQ UNTIL,
              2 LIMI,
           ENDIF,
           TOS POP,            \ refill top of stack cache register
           NEXT,               \ return to Forth
           ENDCODE

CODE VC! ( char vaddr --)
-1  [IF]
          WMODE @@ BL,
[ELSE]
\ ********************************************************************
\  inline address setter.  6% faster on Tursi Sprite Benchmark
          TOS 4000 ORI,    \ not worth the extra 16 bytes.
          R1 STWP,
          R3 8C02 LI,
          0 LIMI,
          9 (R1) *R3 MOVB,
          TOS *R3 MOV,
\ ********************************************************************
[THEN]
          TOS POP,
          9 (R1) VDPWD @@ MOVB,  \ Odd byte R4, write to screen
          2 LIMI,
          TOS POP,               \ refill TOS
          NEXT,
          ENDCODE

CODE V! ( n Vaddr  -- )       \ Video store 16BIT int
         WMODE @@ BL,         \ branch to setup VDP write address
         R3 VDPWD LI,
         TOS POP,
         TOS  *R3 MOVB,       \ even byte
         9 (R1) *R3 MOVB,     \ Odd byte R4, write to screen
         2 LIMI,
         TOS POP,             \ refill TOS
         NEXT,
         ENDCODE

CODE VFILL ( VDP-addr count char-- )
        TOS SWPB,             \ fix the TMS9900 byte order
        TOS W MOV,
        R0 POP,               \ R0=count
        TOS POP,              \ VDP-addr popped into TOS
        WMODE @@ BL,          \ setup VDP write address in TOS register
        R3 VDPWD LI,          \ vdp addr. in a reg. makes this 12.9% faster
        BEGIN,
              W *R3 MOVB,     \ write byte to vdp ram
              R0 DEC,         \ dec the byte counter
        EQ UNTIL,             \ jump back if not done
        2 LIMI,
        TOS POP,
        NEXT,
        ENDCODE


\ For reference, these are the offset values of the user vars.
\      2E USER: C/L
\      30 USER: OUT
\      32 USER: VROW
\      34 USER: VCOL

VARIABLE VPG

CODE >VPOS ( col row -- vaddr) \ compute a VDP screen address
         R1         STWP,
         TOS     R3  MOV,   \ this move to make best use of MPY
         2E (R1) R3  MPY,   \ multiply by chars/line. result goes to R4 ie: TOS
        *SP+     TOS ADD,   \ add col value to TOS
         VPG @@  TOS ADD,   \ add Video page offset
         NEXT,
         ENDCODE

CODE CPUT ( char --  ?) \ write to screen, test for end of screen
         TOS     R0  MOV,
                 R1  STWP,    \ workspace is USER area base address
         32 (R1) R3  MOV,     \ vrow->r3
         2E (R1) R3  MPY,     \ vrow*c/l->R4
         34 (R1) TOS ADD,     \ add vcol
         7E (R1) TOS ADD,     \ add video page# VPG
            WMODE @@ BL,    \ SEVENS 52.75

\ *NEW* inline address setter ( SEVENS 53.63 not enough improvement)
\         TOS 4000 ORI,
\         R1 STWP,           \ avoids 2 SWPB instructions
\         R3 8C02 LI,
\         0 LIMI,
\         9 (R1) *R3 MOVB,   \ write odd byte from TOS (ie: R4)
\         TOS *R3 MOV,       \ MOV writes the even byte to the port address

         R0 TOS MOV,
         9 (R1) VDPWD @@ MOVB,  \ !! Odd byte W, write to screen
         2 LIMI,
         TOS CLR,
         34 (R1)  INC,          \ bump VCOL
         34 (R1)  2E (R1) CMP,  \ compare VCOL = C/L
         EQ IF,
            TOS SETO,           \ set true flag
         ENDIF,
         NEXT,
         ENDCODE

\ : (CR) ( -- n) VCOL OFF   VROW DUP 1+! @ ;  \ 12 bytes
 CODE (CR) ( -- n)   \ inc VROW, return value. 16 bytes, 10X faster
           R1 STWP,
           34 (R1) CLR,     \ VCOL OFF
           32 (R1) INC,     \ VROW 1+!
           TOS PUSH,
           32 (R1) TOS MOV, \ VROW @
           NEXT,
           ENDCODE

\ * VDP write to register. Kept the TI name
CODE VWTR   ( c reg -- )          \ Usage: 5 7 VWTR
           TOS SWPB,              \ register goes to left side
          *SP+ TOS ADD,
           0 LIMI,
           R1 STWP,
           9 (R1) 8C02 @@ MOVB,   \ write odd byte from R4
           TOS 8000 ORI,          \ set bit for write to VDP register
           TOS 8C02 @@ MOVB,      \ write the even byte
           2 LIMI,
           TOS POP,
           NEXT,
           ENDCODE

\ CODE VDPWA  ( Vaddr -- ) \ set vdp write address
\            WMODE @@ BL,
\            TOS POP,
\            NEXT,
\            ENDCODE

\ FAST user variable for screen driver
CROSS-ASSEMBLING
CODE C/L@   ( -- n )        \ this is used 8 times in the KERNEL. Saves 24 bytes
          TOS         PUSH,  \ and is 50% faster than C/L @
          TOS         STWP,
          2E (TOS) TOS MOV,
          NEXT,
          ENDCODE

\ ===================================================================
[CC] CR .( KSCAN KEY?  and  ?TERMINAL) [TC]

\ Camel99 interface to KSCAN. *Modified 13Jun2020 to save/restore GPL R11
\ Removed R11 save. It's in the ROM code. Jan 2022
\ See: KEY  in the Camel99 Kernel
CODE KEY? ( -- ?)  \ *WARNING* it takes 1,128uS for KEY? scan to run
          TOS PUSH,
          TOS CLR,            \ TOS will be our true/false flag
          0 LIMI,
          TOS 837C @@ MOVB,   \ clear GPL flags
          83E0 LWPI,          \ switch to GPL workspace
          000E @@ BL,         \ call ROM keyboard scanning routine
          WRKSP0 LWPI,        \ return to Forth's workspace , interrupts are restored
          837C @@ R1 MOVB,    \ read GPL status byte (=2000 if key pressed)
          R1  3 SLA,          \ check the key bit
          OC IF,              \ if carry flag set
               8375 @@ TOS MOV, \ read the key
          ENDIF,
          2 LIMI,
          NEXT,               \ return
          ENDCODE

\ *---------------------------------------------
\ * Call very fast built-in Fctn-4 test in console ROM
\   http://www.unige.ch/medecine/nouspikel/ti99/keyboard.htm
\ *---------------------------------------------
CODE ?TERMINAL ( -- ?)    \ ~200uS, 16 bit ROM speed. Same name as TI-Forth
          R12     RPUSH,       \ save CRU address makes life simpler
          TOS     PUSH,
          TOS     CLR,
          0020 @@ BL,          \ Call ROM code, test FNCT 4 key press
          EQ IF,               \ if flag=0
             TOS  SETO,        \ KEY is pressed, TOS = -1
             BEGIN,
                0020 @@ BL,    \ call rom routine
             NE UNTIL,         \ until key is released
          ENDIF,
          R12     RPOP,        \ Restore CRU address used by CAMEL Forth
          NEXT,
          ENDCODE

CODE BYE   ( -- )
          83C4 @@ CLR,        \ clear interrupt vector
          0000 @@ BLWP,       \ ROM reset vector is at 0000
          ENDCODE
