\ C R O S S - C O M P I L E R  B O O T - S T R A P P I N G
\ Feb 2022: Finally figured out how to cross-compile ISO loop.

\ Final additions to the cross-compiler

\ NOTE: After all the primitives are compiled we use them to create the
\       final cross-compiler words for branching, looping and cross-
\       compiling versions of colon and semi-colon

CROSS-COMPILING
CR .( branch cross-compilers for: if then else etc...)
\         **************************************************
\         *** these words DO NOT go into the target code ***
\         *           They EXTEND the compiler             *
\         **************************************************

: AHEAD    ( -- addr) THERE     0 T, ;
: <BACK    ( addr --) THERE  -    T, ;

: THEN          THERE OVER - SWAP T! ; XIMMEDIATE
: BEGIN         THERE  ; XIMMEDIATE
: IF            TCOMPILE ?BRANCH  AHEAD ; XIMMEDIATE
: ELSE          TCOMPILE  BRANCH  AHEAD SWAP [COMPILE] THEN  ; XIMMEDIATE
: UNTIL         TCOMPILE ?BRANCH  <BACK ; XIMMEDIATE
: AGAIN         TCOMPILE  BRANCH  <BACK ; XIMMEDIATE
: WHILE         [COMPILE] IF  SWAP  ; XIMMEDIATE
: REPEAT        [COMPILE] AGAIN [COMPILE] THEN ; XIMMEDIATE

\ finite loop cross-compilers
: DO            TCOMPILE <DO>  THERE ; XIMMEDIATE
: ?DO           TCOMPILE <?DO> THERE ; XIMMEDIATE

: LOOP          TCOMPILE <LOOP>  <BACK ; XIMMEDIATE
: +LOOP         TCOMPILE <+LOOP> <BACK ; XIMMEDIATE

\ ========================================================================
\ C R O S S - C O M P I L I N G   C O L O N   &   S E M I - C O L O N
cr .( cross compiler ':' and ';')

\ In the following definition we use the HOST: ;HOST compiler words to create
\ new versions of : and ; that cross-compile FORTH words into the TARGET

host: :                             \ this is the CROSS compiler's ':'
\        [TC]   ( Target compiler search order)
                !CSP                \ record the "current stack position" (used later)
                ]T                  \ set XSTATE to true ie: turn on the compiler
                <colon:>            \ put the word name in the Target dictionary and the mirror vocabulary
                THIDE               \ set the 'smudge' bit so we can't find this word during compilation
                TINTERPRET          \ run the cross compiler/interpreter on the input stream
;host

?stk

host: ;                            \ this the CROSS-compiler's ';'
                TREVEAL            \ un-smudge the word so it can be found in the dictionary
                'EXIT cfa,
                ?CSP               \ check is stack is the same place as when we started the definition
                T[                 \ reset XSTATE (TARGET STATE) to interpreting
\          [CC]  ( back to cross-compiler search order )
;host   XIMMEDIATE

?stk

\ ========================================================================
\ F I N A L   T A R G E T -  C O M P I L I N G   C O L O N  &  S E M I - C O L O N
\ These alias names are used at the very end of the code to define the
\ FINAL ':' and ';' that will be the versions that actually run in the
\ TARGET Forth. (yes it's confusing) Renaming them allows me to remain sane.
\
SYNONYM x:   :                        \ "TARGET-compiling colon"
SYNONYM ;x   ;  XIMMEDIATE             \ "TARGET-compiling semi-colon"

.XMEM                               \ show the cross compiler memory. It should be empty.
