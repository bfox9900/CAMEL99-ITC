\ CAMEL99 Forth for the TI-99  un-optimized  version  11Apr2019
\ Copyright (c) 2018 Brian Fox
\ KILWORTH Ontario Canada
\ brian.fox@brianfox.ca

\ compiles with XFCC99.EXE cross-compiler

\ This program is free software; you can redistribute it and/or modify
\ it under the terms of the GNU General Public License as published by
\ the Free Software Foundation; either version 3 of the License, or
\ (at your option) any later version.
\ You should have received a copy of the GNU General Public License
\ along with this program.  If not, see <http://www.gnu.org/licenses/>.
\
\ The work derived from CAMEL Forth under the GNU General Public License.
\ CamelForth (c) 2009 Bradford J. Rodriguez.
\ Commercial inquiries for Camel Forth should be directed to:
\ 115 First St., #105, Collingwood, Ontario L9Y 4W3 Canada
\ or via email to bj@camelforth.com

\ History
\ Oct 21 2019, replaced critical routines with CODE.
\              15% compile time speedup on TI-99

\ DEC 29 2019  V2.58 added VPG variable for multiple display screens
\              >VPOS computes address from col,row & adds VPG
\              added TOPLN code word to calc. topln of a screen
\ JAN 28 2020  V2.59 Replaced ?NUMBER with NUMBER?
\              Minor changes to <INTERPRET> Saved 34 bytes.

\ ======================================================================
\ M E M O R Y   U S A G E   D E F I N I T I O N S
CROSS-COMPILING
HEX
       0FFFE   EQU EMEM    \ EMEM = "end of memory"
   EMEM 0080 - EQU 'TIB    \ ADDRESS OF Terminal Input Buffer
   EMEM 'TIB - EQU TIBSIZE \ 128 bytes

\ ======================================================================
\ Create FORTH stacks
HEX
      'TIB 2  - EQU SP0    \ FORTH return stack base address
     'TIB 100 - EQU RP0    \ FORTH parameter stack base address

\ ======================================================================
\ configure cross-compiler header and threading mechanism
CROSS-COMPILING

 INCLUDE CC9900\compiler\ITCTYPES.HSF   \ indirect threaded versions
\ ======================================================================
\ C O D E   P R I M I T I V E S
\ [CC] is short form for CROSS-COMPILING

[CC] cr .( Compile Forth Assembler primitives ...)

 INCLUDE CC9900\SRC.ITC\9900FAS3.HSF
 INCLUDE CC9900\SRC.ITC\TI99PRIM.HSF

\ ======================================================================
\ T A R G E T   D E - C O M P I L E R
\ debugging tool

CROSS-COMPILING
FALSE [IF]   INCLUDE CC9900\CCLIB\TSEE.HSF   [THEN]


\ ======================================================================
\ C R O S S   C O M P I L E R   B O O T - S T R A P P I N G
\ add loop and branch words to the cross-compiler (not the TARGET)

CROSS-COMPILING
INCLUDE CC9900\cclib\BOOTSTRP.HSF

\ ======================================================================
\ T A R G E T  S T A T E  C O N T R O L

TARGET-COMPILING

   VARIABLE: STATE

   STATE [CC] TO XSTATE

\ ======================================================================
\ S Y S T E M   C O N S T A N T S

[CC] HEX
cr .( Constants and Variables...)

TARGET-COMPILING
\ ASM/Equate       Forth Name
\ -----------      ------------
 'TIB     constant: TIB
 SP0      constant: SP0
 RP0      constant: RP0
 TIBSIZE  constant: TIB#

\ Utility constants
        0 constant: FALSE
       -1 constant: TRUE
        0 constant: 0
        1 constant: 1
        2 constant: 2
       20 constant: BL

\ ======================================================================
\ U S E R   V A R I A B L E S
\ CAMEL99 uses space after workspace for user vars.
\ User variables begin at >8320 for the primary Forth task
[CC] HEX [TC]

      20 USER: TFLAG
      22 USER: JOB
      24 USER: DP
      26 USER: HP
      28 USER: CSP
      2A USER: BASE
      2C USER: >IN
      2E USER: C/L
      30 USER: OUT
      32 USER: VROW
      34 USER: VCOL
      36 USER: 'KEY     \ for vectored char input
      38 USER: 'EMIT    \ for vectored char output
      3A USER: LP
      3C USER: SOURCE-ID
      3E USER: 'SOURCE
\      40 USER: -------          \ used by 'SOURCE

      46 USER: TPAD

\ TI-99 system memory locations
\  8374 constant: KUNIT#  \ byte
   837C constant: GPLSTAT \ byte

\ These system variables control cold starting the system
variable: LATEST
variable: ORGDP
variable: ORGLAST
variable: BOOT

[CC] DECIMAL [TC]
   0024 constant: L/SCR

[CC] HEX [TC]
variable: VMODE
variable: L0  [CC] 3 CELLS TALLOT  [TC]
variable: ^PAB
variable: LINES
variable: C/SCR
variable: 'IV    \ interpretor vector. Hold addess of <INTERPRET>
variable: H
variable: VP
variable: CURS    [CC] 5F CURS T! [TC]
variable: VTOP

?stk
\ ======================================================================
[CC] cr .( Hi-level FORTH Primitives...)
\ Version 2.5 uses more CODE words. Speeds up the compiler.
TARGET-COMPILING
\ : HERE      ( -- addr) DP @  ;
\ : ALLOT     ( n --)   DP +! ;

CODE: HERE     ( -- addr) TOS PUSH,  DP @@ TOS MOV,  NEXT, END-CODE
CODE: ALLOT    ( n -- )   TOS DP @@ ADD,   TOS POP,  NEXT, END-CODE
CODE: COMPILE, ( n -- ) DP @@ R1 MOV,  TOS *R1 MOV,  DP @@ INCT, TOS POP, NEXT, END-CODE

: ,         ( n -- ) COMPILE, ;
: C,        ( n -- ) HERE C! 1 ALLOT  ;
: ALIGN     ( -- )   HERE ALIGNED DP ! ;
: PAD       ( -- addr) HERE TPAD @ + ;
: COMPILE   ( -- )  R> DUP 2+ >R @ COMPILE, ;
: IMMEDIATE ( --)  01 LATEST @ 1-  C! ;
: LITERAL   ( n -- n|~) STATE @ IF  COMPILE LIT  COMPILE,  THEN ;  XIMMEDIATE
: ]         ( -- ) STATE ON  ;  XIMMEDIATE
: [         ( -- ) STATE OFF ;  XIMMEDIATE
: DEPTH     ( -- n ) SP0 SP@ 2+ - 2/ ;

\ ======================================================================
\ MALLOC Moved to library
\ : MALLOC     ( n -- addr ) H @  SWAP H +! ;
\ : MFREE      ( n -- ) NEGATE H +! ;

\ ======================================================================
\ PAB base address
: VDPTOP  ( -- n) 8370 @ 2- ;

\ ======================================================================
\ S T A C K   P R I M I T I V E S
[CC] cr .( Stack primitives ...)  [tc]

: TUCK  ( w1 w2 --  w2 w1 w2 ) SWAP OVER ;

CODE: 2>R    ( d -- ) ( r-- n n)
              RP -4 ADDI,          \ 14
              TOS 2 (RP) MOV,      \ 22
             *SP+   *RP MOV,       \ 26
              TOS POP,             \ 22
              NEXT,              \ = 84
              END-CODE

CODE: 2R>     ( -- d )
              TOS PUSH,            \ 28
              SP DECT,             \ 10
             *SP  RPOP,            \ 26
              TOS RPOP,            \ 22
              NEXT,              \ = 88
              END-CODE

\ NOT standard forth. Equivalent to *TOS INC and *TOS DEC in Assembler
\ : 1+!   ( addr -- )  1 SWAP +! ;
\ : 1-!   ( addr -- ) -1 SWAP +! ;

CODE: 1+! ( addr -- )  *TOS INC,  TOS POP,  NEXT,   END-CODE
CODE: 1-! ( addr -- )  *TOS DEC,  TOS POP,  NEXT,   END-CODE

\ ======================================================================
\ C O M P A R I S O N   O P E R A T O R S

TARGET-COMPILING
: U>  ( n n -- ?)  SWAP U< ;
: 0>  ( n -- ?)    1- 0< INVERT ;
: <>  ( n n == ?)  =  INVERT ;

: UMIN ( u1 u2 -- u )  2DUP U> IF SWAP THEN DROP ;
: UMAX ( u1 u2 -- u )  2DUP U< IF SWAP THEN DROP ;
\ : WITHIN ( u lo hi -- t ) OVER - -ROT - U> ;
CODE: WITHIN   ( n  lo  hi -- flag )
              *SP  TOS  SUB,
              *SP+ *SP  SUB,
               TOS *SP+ SUB,
               TOS CLR,
               NC IF,  TOS SETO, ENDIF,
               NEXT,
               END-CODE  \ 2 bytes bigger than Forth

\ ======================================================================
\ M I X E D  (32BIT/16BIT)   M A T H   O P E R A T I O N S

: */MOD  ( n1 n2 n3 -- n4 n5)  >R UM* R> M/MOD ;
: S>D    ( n -- d)  DUP 0< ;
: /MOD   ( n1 n2 -- n3 n4) >R S>D R> M/MOD ;
: /      ( n n -- n)   /MOD NIP  ;
: MOD    ( n n -- n)   /MOD DROP ;
: */     ( n n n -- n) */MOD NIP ;

\ ======================================================================
\ S T R I N G   T H I N G S

TARGET-COMPILING
: MOVE    ( src dst n -- )
          >R
          2DUP SWAP DUP R@ + WITHIN
          IF    R> CMOVE>
          ELSE  R> CMOVE
          THEN ;

\ CAMEL Forth calls this ">COUNTED"
: PLACE   ( src n dst -- ) 2DUP C! 1+ SWAP MOVE ;

\ : /STRING ( caddr1 u1 n - caddr2 u2 ) TUCK - >R + R> ;
CODE: /STRING ( c-addr1 u1 n -- c-addr2 u2 ) \ ~20uS!!       Clks
              TOS   *SP  SUB,                               \ 18
              TOS 2 (SP) ADD,                               \ 22
              TOS POP,                         \ refill TOS   22
              NEXT,                            \ 8 bytes      62  ~20uS
              END-CODE

: S,         ( c-addr u -- ) HERE OVER 1+ ALLOT PLACE  ALIGN ;

\ ======================================================================
\ H E A D E R   N A V I G A T I O N

TARGET-COMPILING
\ not used in kernel
\ : NFA>LFA       ( nfa -- lfa)  3 - ;
CODE: NFA>LFA    TOS -3 ADDI, NEXT, END-CODE

: NFA>CFA       ( nfa -- cfa ) COUNT  7F AND + ALIGNED ;

\ smudge bit control in the Camel Forth
: HIDE          ( -- )  LATEST @ ( nfa) DUP C@ 80 OR  SWAP C! ;
: REVEAL        ( -- )  LATEST @ ( nfa) DUP C@ 7F AND SWAP C! ;

\ ======================================================================
\ P A R S E   W O R D
[CC] cr .( Parsing...)
TARGET-COMPILING
: SOURCE  'SOURCE 2@ ;    \ Common factor, saves space

                    [CC] [PRIVATE] [TC]
: ADR>IN      ( c-addr' --  ) SOURCE  -ROT -  MIN  0 MAX >IN ! ;

                    [CC] [PUBLIC] [TC]
: PARSE       ( char -- c-addr n)
              SOURCE >IN @ /STRING
              OVER >R ROT SCAN
              OVER SWAP
              IF 1+ THEN
              ADR>IN
              R> TUCK - ;

: PARSE-WORD  ( char -- c-addr n)
              DUP SOURCE >IN @ /STRING
              ROT SKIP
              DROP ADR>IN PARSE ;

: WORD        ( char -- c-addr)
              PARSE-WORD HERE
              2DUP C! 1+ SWAP CMOVE   \ inline improves compile time 5%
              HERE BL OVER COUNT + C! ;

\ ======================================================================
\ S T R I N G  T O  N U M B E R   C O N V E R S I O N
[CC] CR .( CAMEL FORTH Number conversion)
 HEX

TARGET-COMPILING

CODE: DIGIT?   ( char -- n f )
            TOS PUSH,          \  dup char
            TOS -30 ADDI,      \  convert char to number
            TOS 9 CMPI,
            GT IF,
               TOS -7 ADDI,
               LTE IF,
                   TOS CLR,  \ bad result
                   NEXT,
               ENDIF,
            ENDIF,

            TOS BASE @@ CMP,   \ compare to radix
            GTE IF,
               TOS CLR,    \ bad result
               NEXT,
            ENDIF,
            TOS *SP MOV,   \ replace char with no.
            TOS SETO,      \ set flag to true
            NEXT,          \ 24 bytes 3 uS
            END-CODE

: UD*        ( ud1 u2 -- ud3)
             DUP >R * SWAP R> UM* ROT + ;

: >NUMBER    ( ud adr u -- ud' adr' u' )
            BEGIN DUP
            WHILE
              OVER C@ DIGIT?
              IF  >R 2SWAP BASE @ UD*
                  R> M+ 2SWAP 1 /STRING
              ELSE DROP EXIT THEN
            REPEAT ;

\ This is smaller than original ?NUMBER but ***FLAG LOGIC IS REVERSED***
: NUMBER?  ( addr len -- n ?)      \ ?=0 is good conversion
           (          -- addr len) \ bad conversion
            OVER C@ T[CHAR] - = DUP >R    \ save flag for later
            IF 1 /STRING THEN             \ remove minus sign
            0 0  2SWAP >NUMBER NIP NIP    \ convert the number
            R> IF SWAP NEGATE SWAP THEN   \ negate if needed
;

\ ======================================================================
\ S I M P L E   S O U N D  I N T E R F A C E

[CC] include cc9900\cclib\ticktock.hsf   \ hardware milli-second timer

TARGET-COMPILING

\ write a byte to address of TMS9919 chip
: SND!   ( c -- )  8400 C!  ;  \ 4 bytes, 277 uS

: BEEP     ( -- )
            80 SND! 5 SND!    \ precalulated values for OSC1 1328Hz
            91 SND!           \ turn on OSC1 at -2 dB level
            AA MS             \ Delay ~ 170 mS
            9F SND! ;         \ turn off OSC1

\ We use the HONK sound for ABORT like TI-BASIC does on errors
: HONK     ( -- )
            81 SND! 20 SND!   \ precalculated values for OSC1 218Hz
            90 SND!           \ turn on OSC1 at 0 dB level
            AA MS             \ Delay ~ 170 mS
            9F SND! ;         \ turn off OSC1

\ ======================================================================
\ V D P  S C R E E N   D R I V E R
[CC] cr .( Console output)

HEX [TC]

: C/L!     ( c/l -- )  \ pronounced "SEE-PER-ELL-STORE"
           DUP C/L !           \ set chars per line
           L/SCR *  C/SCR ! ;  \ calc.chars per screen

: VPOS    ( -- vaddr)  VROW 2@  >VPOS ;
\ : VPUT   ( char -- ) VPOS VC! ; \ moved to TI99PRIM.HSF as CODE

: AT-XY   ( col row -- ) VROW 2! ;  \ set VDP address for Fast type
: CLRLN   ( col row -- ) 2DUP AT-XY >VPOS C/L@ BL VFILL ;

TRUE [IF]

CODE: TOPLN ( -- vaddr)
       TOS PUSH,
       VPG @@  TOS MOV,
       VTOP @@ TOS ADD,
       NEXT,
       END-CODE

CODE: LASTLN ( -- vaddr)
       TOS PUSH,
       VPG   @@ TOS MOV,
       C/SCR @@ TOS ADD,
       NEXT,
       END-CODE

[ELSE]

    : TOPLN   ( -- vaddr)  VPG @ VTOP @ + ;
    : LASTLN  ( -- vaddr)  VPG @ C/SCR @ + ;

[THEN]

\ ----------------------------------------------------------------------
\ Scrolling has been implemented in Forth using VREAD & VWRITE
\ Loop is un-rolled by the programmer, not the compiler :-)
\ Uses un-allocated heap as a temporary buffer to hold lines of text

      [PRIVATE]
: MOVEUP ( vaddr -- 'vaddr)
         C/L@ 8* >R       \ compute chunk size. 8* means 8 lines
         H @ OVER C/L@ +  ( -- 1stline heap 2ndline)
         OVER R@ VREAD
         OVER R@ VWRITE
         R> + ;

     [PUBLIC]
: SCROLL ( -- ) \ 4.58 / 100 scrolls
         PAUSE
         TOPLN
         MOVEUP MOVEUP MOVEUP
\         MOVEUP MOVEUP MOVEUP
         DROP
         0 17 CLRLN
;

[THEN]

\ ======================================================================
\ V D P   T E X T   O U T P U T

[cc] HEX [tc]

: CR     ( -- ) VCOL OFF   VROW 1+@ L/SCR >= IF  SCROLL  THEN  ;
: PAGE   ( -- ) TOPLN LASTLN OVER -  BL VFILL   0 0 AT-XY ;
: BS     ( --)  VCOL DUP @ 1- 0 MAX  SWAP ! ;
: (EMIT) ( char -- ) VPUT  VCOL 1+@ C/L@ >= IF  CR  THEN  ;

: EMIT   ( char -- )  \ shows how to handle control characters
          PAUSE
          DUP 0D = IF  DROP CR   EXIT THEN
          DUP 08 = IF  DROP BS   EXIT THEN
          (EMIT) ;

: TYPE   ( addr cnt -- ) PAUSE BOUNDS ?DO  I C@ (EMIT)  LOOP ;
: SPACE  ( -- )   BL (EMIT) ;
: SPACES ( n -- ) 0 MAX  0 ?DO SPACE LOOP ;

\ ======================================================================
\ S T R I N G   L I T E R A L S
[cc] HEX [tc]
\ run-time action of S"   (For ITC Forth only)
: (S")     ( -- c-addr u) R>  COUNT  2DUP + ALIGNED  >R ;

\ ======================================================================
\ Re-solve CROSS-COMPILER Forward reference for '(S") and 'TYPE
CROSS-COMPILING

T' (S")  RESOLVES '(S")
T' TYPE  RESOLVES 'TYPE

[cc] cr .( Character input)
\ ======================================================================
\ C H A R A C T E R   I N P U T

TARGET-COMPILING
\ Cursor flash control is now done by reading the 9901 timer.
\ It counts down from >3FFF in 349mS. If the timer> 1FFF we show the cursor.
\ If < 1FFF show the screen char. Flash rate is about 2 per second.
\ VPUT does the PAUSE for multi-tasking
: KEY      ( -- char)
            BEGIN                 \ start the loop
              PAUSE               \ Essential for Multi-tasking with Console
              TMR@ 1FFF <         \ compare harware timer to 1FFF
              IF   CURS @         \ true? fetch the cursor char
              ELSE BL             \ false? get the screen char
              THEN VPUT           \ then put on screen (also does PAUSE)
              KEY?                \ check the keyboard
              ?DUP                \ DUP IF <> 0
            UNTIL                 \ loop until a key pressed
            BL VPUT ;             \ put the space char on screen

\ High level: input/output          (c) 31mar95 bjr
: ACCEPT     ( c-addr +n -- +n')
             OVER + 1- OVER
             BEGIN  KEY DUP 0D <>
             WHILE
                DUP EMIT
                DUP 8 =
                IF   DROP 1-  >R OVER R> UMAX
                ELSE OVER C!  1+ OVER UMIN
                THEN
             REPEAT
             DROP NIP SWAP -  ;

[cc] cr .( Number printing)
\ ======================================================================
\ N U M B E R   T O   S T R I N G   C O N V E R S I O N

TARGET-COMPILING
\ : UD/MOD ( ud1 u2 -- u3 ud4) >R 0 R@ UM/MOD -ROT R> UM/MOD ROT ;

CODE: >DIGIT  ( n -- c) \ ASM is 9 bytes, 4X faster
            TOS 9 CMPI,
            HI IF,              \ if n>9
               TOS 7 ADDI,      \ number is not base 10, add 7
            ENDIF,
            TOS  TCHAR 0 ADDI,  \ add ASCII 0 to TOS create char value
            NEXT,
            END-CODE

: <#     ( --)        PAD HP ! ;
: HOLD   ( char -- )  HP DUP 1-! @ C! ;
\ : #      ( ud1 -- ud2)  BASE @ UD/MOD ROT  >DIGIT  HOLD  ;
: #      ( ud1 -- ud2 ) 0 BASE @ UM/MOD >R  BASE @ UM/MOD SWAP >DIGIT HOLD  R> ;
: #S     ( ud1 -- ud2)  BEGIN  # 2DUP OR  WHILE REPEAT ;
: #>     ( ud1 -- c-addr u) 2DROP HP @ PAD OVER - ;
: SIGN   ( n -- ) 0< IF  T[CHAR] -  HOLD  THEN ;
: DU.    ( d -- ) <#  #S  #> TYPE SPACE ;
: U.     ( u -- ) 0 DU. ;
: .      ( n -- ) DUP ABS 0 <#  #S ROT SIGN  #> TYPE SPACE ;

\ ======================================================================
\ M I S C E L L A N E O U S
[cc] HEX [tc]

: RECURSE     ( -- ) LATEST @ NFA>CFA COMPILE,  ; XIMMEDIATE
: DECIMAL     ( -- ) 0A BASE ! ;
: HEX         ( -- ) 10 BASE ! ;

\ ======================================================================
\ I N T E R P R E T E R

: INTERPRET  ( addr len -- )  'IV PERFORM ;   \ @ EXECUTE  ;

\ ======================================================================
\ Q U I T :  The  O U T E R   I N T E R P R E T E R

: QUIT     ( -- )
           RP0 RP!
           SOURCE-ID OFF
           t[COMPILE] [
           BEGIN
              TIB DUP TIB# ACCEPT SPACE
            ( addr len) INTERPRET
              STATE @ 0= IF  T."  ok" CR THEN
           AGAIN ;

: EVALUATE ( c-addr u -- j*x)
           SOURCE-ID ON
           SOURCE 2>R
           >IN @ >R
           INTERPRET
           R> >IN !
           2R> 'SOURCE 2!
           SOURCE-ID OFF ;

\ ======================================================================
\ E R R O R   H A N D L I N G
\
: ABORT    ( -- )
           L0 LP !
           SP0 SP!
           VDPTOP ^PAB !   \ set base pab pointer
           CR QUIT ;

: ?ABORT   ( f caddr u --)
           ROT
           IF
             CR
             CR T." * " ( caddr u) TYPE  T."  ?" HONK
             SOURCE-ID @   ( if source is NOT console)
             IF  T."  Line " LINES @ U.
                 CR CR SOURCE TYPE
             THEN ABORT
           THEN 2DROP ;

                      \ flag     addr length
: ?ERR     ( ? -- )     ( 0= )   HERE COUNT         ?ABORT ;
: ?EXEC    ( -- ) STATE @       TS" Interpret only" ?ABORT ;
: ?COMP    ( -- ) STATE @ 0=    TS" Compile only"   ?ABORT ;
: ?CSP     ( -- ) SP@ CSP @ -   TS" Unfinished"     ?ABORT ;
: !CSP     ( -- ) SP@ CSP ! ;

\ ======================================================================
\ S T R I N G   L I T E R A L
\ Non-standard: when interpreting S" puts the string in PAD

: S"       ( cccc" -- )
           T[CHAR] " PARSE
           STATE @
           IF  COMPILE (S")  S,
           ELSE PAD PLACE PAD COUNT
           THEN ; XIMMEDIATE

: ABORT"   ( i*x 0  -- i*x)    \ R: j*x -- j*x  x1=0
           ?COMP
           t[COMPILE] S"
            COMPILE ?ABORT ; XIMMEDIATE

[cc] cr .( FIND )
\ ======================================================================
\ D I C T I O N A R Y   S E A R C H

TARGET-COMPILING
: FIND  ( caddr --  caddr  0  if not found)
\                    xt  1  if immediate,
\                    xt -1  if "normal"
           LATEST @  (FIND) ;

: '        ( -- xt) BL WORD FIND 0= ?ERR ;

: [']      ( -- <name> ) ?COMP  '  T[COMPILE] LITERAL ; XIMMEDIATE

: POSTPONE ( <name> -- )      \ replaces COMPILE and [COMPILE]
           ?COMP
           BL WORD FIND DUP 0= ?ERR
           0< IF   COMPILE COMPILE
              THEN COMPILE, ; XIMMEDIATE

\ ======================================================================
\ T E X T   O U T P U T

: ."      (  ccc" -- )
          t[COMPILE] S"                ( -- str len)
          STATE @
          IF   COMPILE TYPE
          ELSE TYPE
          THEN ; XIMMEDIATE

: .(     T[CHAR] ) PARSE TYPE ;

[CC] cr .( Interpreter/compiler loop)
\ ======================================================================
\ I N T E R P R E T E R  /  C O M P I L E R

TARGET-COMPILING
: <INTERP>  ( i*x c-addr u -- j*x )
          'SOURCE 2!  >IN OFF
          BEGIN
              BL WORD DUP C@ ( -- addr len)
          WHILE
              FIND ?DUP
              IF ( it's a word)
                   1+ STATE @ 0= OR
                   IF   EXECUTE
                   ELSE COMPILE,
                   THEN
              ELSE ( it's a number)
                   COUNT NUMBER? ?ERR
                   t[COMPILE] LITERAL
              THEN

              DEPTH ( DUP) 0< TS" Short stack" ?ABORT
                    ( 50 >  TS" Full stack" ?ABORT)
          REPEAT
          DROP ;

\ ======================================================================
\ T I - 9 9   T E X T   M O D E   C O N T R O L
TARGET-COMPILING

: TEXT    ( -- )
             F0 DUP 83D4 C!
       ( -- F0) 01 VWTR
              0  2 VWTR  \ set VDP screen page
               VTOP OFF  \ topline VDP offset
               VPG  OFF  \ VDP screen page offset
             12  7 VWTR  \ sets FG & BG color
             28 C/L!
             0 0 AT-XY
             2 VMODE !  \ 2=ID for 40 column "TEXT" mode
             PAGE ;

\ ======================================================================
\ D I C T I O N A R Y   C R E A T I O N

: HEADER, ( addr len --)
            ALIGN
            LATEST @ COMPILE,
            0 C,
            HERE LATEST !
            S, ;

: HEADER   BL PARSE-WORD HEADER, ;

\ ======================================================================
\ T A R G E T   S Y S T E M   D E F I N I N G   W O R D S

\                    text    runtime-action   parameter
\ -------------------------  --------------- -----------
: CONSTANT  ( n --)  HEADER  COMPILE DOCON     COMPILE, ;
: USER      ( n --)  HEADER  COMPILE DOUSER    COMPILE, ;
: CREATE    ( -- )   HEADER  COMPILE DOVAR              ;
: VARIABLE  ( -- )   CREATE                  0 COMPILE, ;

\ (:noname) came from studying gforth. It's a nice factor.
\ had to use the literal address of ENTR ($839E) to make this work.

: (:NONAME) ( -- )  839E COMPILE,  HIDE  ]  ;

\ ======================================================================
\ D O E S   S U P P O R T
: (;CODE) ( -- )  R> LATEST @ NFA>CFA !  ;

\ 06A0 = BL   0460 = B
: DOES>    ( -- )
           COMPILE (;CODE)
           06A0 COMPILE, T['] DODOES COMPILE,
           \ compiles machine code for: BL @DODOES
           ; XIMMEDIATE

\ ======================================================================
\ TI-99 F I L E   S Y S T E M   I N T E R F A C E

 [CC] include CC9900\cclib\dsrlinkA.hsf
 [CC] include CC9900\cclib\filesysY.hsf

\ ======================================================================
\ LOOPS AND BRANCH COMPILERS FOR THE TI-99 SYSTEM
 [CC] CR .( TARGET Forth BRANCHING and LOOPING ...)

  include cc9900\cclib\ISOLOOPS.hsf
  

\ CODE let's you make machine code words
\ for use with the assembler

: CODE      ( -- )  HEADER  HERE 2+ , !CSP ;
: NEXT,     ( -- )  045A , ;  \ B *R10
: ENDCODE   ( -- )  ?CSP  ;

   
\ ======================================================================
\ INIT: Set Workspace, copy code to scratch pad, set stacks, run BOOT

CROSS-ASSEMBLING
[cc] HEX [tc]

CODE: COLD
              WRKSP0 LWPI,
              R0 HSprims LI,   \ source
              R1 HSstart LI,   \ destination
              BEGIN,
               *R0+ *R1+ MOV,
                R1 HSend CMPI,
              EQ UNTIL,
              SP  SP0  LI,
              RP  RP0  LI,
              R10 NEXT2 LI,
              IP  BOOT  LI,    \ run BOOT vector
             *R10 B,
              END-CODE

[CC] HEX
\ ======================================================================
\ B O O T   U P   C O D E
TARGET-COMPILING
: WARM    ( -- )
              80 83C2 C!                     \ disable user interrupts
              26 TPAD !
              1000 VP !                      \ reset VDP memory manager
              2050 H !                       \ HEAP leaves room for FILESYS buffer
              3FFF TMR!                      \ 9901 timer runs continuously
              t['] <INTERP> 'IV !            \ PATCH interpreter vector
              HEX                            \ default to hex
              VDPTOP ^PAB !                  \ reset PAB stack in VDP RAM

              TEXT BEEP                      \ VDP start screen
              TS" CAMEL99 Forth 2.59A" TYPE

              ORGDP @ DP !                   \ restore dictionary
              ORGLAST @ LATEST !             \ restore last word pointer
              TS" DSK1.START" INCLUDED
              ABORT ;



\ ======================================================================
\ define target comment words
TARGET-COMPILING
: (         T[CHAR] ) PARSE 2DROP ; XIMMEDIATE
: \                 1 PARSE 2DROP ; XIMMEDIATE

[CC]
\ ======================================================================
\ TARGET Colon, :NONAME and Semi-colon  defintions
\ X: ;X are aliases for the cross-compiler : and ;

TARGET-COMPILING
 X: :         !CSP  HEADER (:NONAME)  ;X

 X: :NONAME   HERE  !CSP   (:NONAME)  ;X

 X: ;        [  REVEAL COMPILE EXIT ?CSP ;X  XIMMEDIATE

[CC]
\           F O R T H   S Y S T E M   C O D E   E N D S
\ /\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
cr .( Forth Kernel compiled completely")
            END.   ( report compile time and stats)

\ ======================================================================
\  P A T C H   T H E   T A R G E T  S Y S T E M   V A R I A B L E S

[CC]   XLATEST @ DUP LATEST T!


                    ORGLAST T!
               THERE DUP DP T!
                      ORGDP T!

\ ======================================================================
\ P A T C H   T A R G E T   I M A G E  F I L E   H E A D E R

         FILENAME: CAML259A
         T' COLD >BODY BOOT-ADDRESS T!

\ S E T   T H E   B O O T   W O R D   T O   R U N

         T' WARM BOOT T!

\ ======================================================================
\ S A V E   B I N A R Y  I M A G E   F I L E

         FILENAME$ $SAVE-EA5.     \ FILENAME$ was set by FILENAME:

\ ======================================================================
\  C O P Y   T O   T I - 9 9   V I R T U A L   D I S K
.( copying binary file to TI-99 Emulator DSK1.)

( //  shells out to the DOS shell in HSF2012)

  // copy CAML259A  cc9900\clssic99\dsk1.itc\

CROSS-COMPILING

 CR ." === COMPILE ENDED PROPERLY ==="

\ BYE  ( return to DOS)
