\ PI.FTH from DxForth.

\ *HEAVILY MODIFIED*
\ This version moves the RESULT array into TI-99 low RAM.
\ This gives us 8K for the results.

\ Thanks to Ed from Australia for finding the bug in my D+
\
\ Revised 2015-02-09  es
\
\ Compute Pi to an arbitrary precision. Uses Machin's
\ formula:  pi/4 = 4 arctan(1/5) - arctan(1/239)
\
\ Compile with 16-bit DX-Forth: FORTH - INCLUDE PI.F BYE
\ Compile with CAMEL99 Forth: INCLUDE DSK*.PI  ( where * is your drive no.)
\
\ This 16-bit implementation allows up to 45,808 digits
\ to be computed before arithmetic overflow occurs.
\
\ The code can be used on 32-bit targets with appropriate
\ changes:
\
\   16-bit             32-bit
\
\   10000 Multiply     100000000 Multiply
\   <# # # # # #>      <# # # # # # # # # #>
\   4 +loop            8 +loop
\   525 um/mod         1050 um/mod
\                      remove 'digits > 45808' warning
\
\ Acknowledgements:
\
\   Roy Williams, Feb 1994
\   J. W. Stumpel, May 1991
\   E. Ford, Aug 2009
\   R. Bishop, Aug 1978
\
\ This code is PUBLIC DOMAIN. Use at your own risk.

\ Modified for Camel99 Forth  Mar 2021 Fox
\ Sept 2025: Using 32bit timer for long duration measurements

\ Sept 6 2025 Speedups:
\ - Removed CELLS in loop and index by 2 instead
\   ( except in DIVIDE where is did not improve times)
\ - Expanded M+ with a TEXT macro
\ - changed +INDEX to DO/LOOP. Big improvement.
\ - replaced OVER with DUP and re-ordered arguments where possible

\ Sept 7, 2025  Added machine Forth Optimizers
\ make some Machine Forth Instructions

\ Sept 8, 2025 Exanded D- to a macro. 6% further improvement

NEEDS ERASEW FROM DSK1.ERASEW  \ 16 bit erase "words"
\ NEEDS DUMP   FROM DSK1.TOOLS
NEEDS VALUE  FROM DSK1.VALUES
NEEDS D=     FROM DSK1.DOUBLE
NEEDS .R     FROM DSK1.UDOTR
NEEDS ELAPSE FROM DSK1.ELAPSE32
NEEDS MARKER FROM DSK1.MARKER
NEEDS OPEN-OUTPUT FROM DSK1.OUTFILE

\ these macros improve speed by 3%
: M+ ( n n -- d) S" DUP 0< D+" EVALUATE ; IMMEDIATE
: D- ( d d -- d) S" 2INVERT 1 M+ D+" EVALUATE ; IMMEDIATE


\ for clarity
: S>UD ( u -- ud ) POSTPONE 0 ; IMMEDIATE
: ^2  S" DUP *" EVALUATE ; IMMEDIATE

\ TI-99 screen timout address
HEX
83D6 CONSTANT TIMEOUT
2000 CONSTANT LORAM

\ machine code primitives for TMS9900
HEX
: PUSH,     0646 , ;
: TOS>STK,  C584 ,  ;
: 2*,       0A14 ,  ;
: +,        A136 ,  ;
: @,        C114 ,  ;
: DROP,     C136 , ;
: R>TOS,    C117 , ;   \   *RP  TOS MOV,
: (R)-,     6127 , , ; \ 2 (RP) TOS SUB,

: 2DUP,
    0226 , -4 , \ SP -4 ADDI,
    C5A6 ,  4 , \ 4 (SP) *SP MOV,
    C984 ,  2 , \ TOS  2 (SP) MOV,
;

\ Combine them to make higher level isntructions
: DUP,      PUSH,  TOS>STK, ;
: OVER,     0646 ,  C584 , C126 , 0002 , ;
: I,        DUP, R>TOS,  2 (R)-, ;

\ syntax sugar :-)
: M:   CODE ;
: ;M   NEXT,  ENDCODE ;

\ Now we can make Machine Forth Super instructions
M: CELLS+     2*, +,      ;M
M: DUP@       DUP, @,     ;M
M: 2DUP+@     2DUP, +, @, ;M
M: I+         I, +,       ;M

\ Performance changes from original
\ 500 Digit Test
\ Original Code     2:24
\ Opt1              2:21  \ used CELLS+ primitive
\ Opt M+            2:17  \ Original with M+ as macro
\ Opt1A             2:04  \ removed CELLS, loops index by 2
\ Opt1B             1:59  \ machine Forth superinstructions
\ Opt1c D- MACRO    1:52  \ 6% improvement

\ ================ PROGRAM BEGINS ===============
DECIMAL
0 VALUE POWER  ( adr)
0 VALUE TERM   ( adr)
0 VALUE RESULT ( adr)
0 VALUE SIZE   ( n)

VARIABLE CARRY
\ CHANGED ADD and SUBTRACT to step by 2 through arrays. B FOX
\ 3% speed up on 100 digits, 9% on 500 digits
: ADD ( -- )
  CARRY OFF
  0  SIZE CELLS 2-
  DO
    RESULT I+ DUP@ S>UD  TERM I+ @ S>UD D+
    CARRY @ M+
    ( hi) CARRY !
    ( lo) SWAP ( res) !
  -2 +LOOP
;

: SUBTRACT ( -- )
  CARRY OFF
  0  SIZE CELLS 2-
  DO
    RESULT I+ DUP@ S>UD  TERM I+ @ S>UD D-
    CARRY @ M+
    ( hi) CARRY !
    ( lo) SWAP ( res) !
  -2 +LOOP
;

\ scan forward for cell containing non-zero
\ BOUNDS & DO LOOP MUCH faster in Camel99 Forth
: +INDEX
    DUP
    SIZE CELLS
    BOUNDS
    DO
       I @ IF I LEAVE THEN
    2 +LOOP
    OVER - 2/
;

0 VALUE FACTOR
\ Using cell sized looping made this part slower.
: DIVIDE ( ADR FACTOR -- )
    TO FACTOR
    CARRY OFF
    +INDEX ( adr index ) SIZE SWAP
    DO
        DUP I CELLS+ ( res)
        DUP@  CARRY @  FACTOR UM/MOD
      ( quot) ROT
      ( res) !
      ( rem) CARRY !
    LOOP
    DROP ;

\ scan backward for cell containing non-zero
: -INDEX ( adr -- adr index )
    SIZE CELLS
    BEGIN 2- DUP
    WHILE
       2DUP+@
    UNTIL
    THEN ;

: MULTIPLY ( adr factor -- )
  TO FACTOR   CARRY OFF
  -INDEX ( adr index ) 0 SWAP
  DO
    DUP I+ ( res)
    DUP@  FACTOR  UM*  CARRY @ M+
    ( hi) CARRY !
    ( lo) SWAP ( res) !
  -2 +LOOP
  DROP ;

\ : COPY ( -- ) POWER TERM SIZE  MOVE ;

\ : ZERO? ( result -- f )  +INDEX NIP SIZE = ;
: ZERO? ( result -- F ) SIZE CELLS 0 SKIP NIP 0= ;

0 VALUE PASS
VARIABLE EXP
VARIABLE SIGN

: DIVISOR ( -- N )
  PASS 1 <> IF  239  EXIT THEN \ removed ELSE
  5 ;

\ : ERASE  0 FILL ;

: INITIALIZE ( -- )
  POWER SIZE CELLS ERASEW
  TERM  SIZE CELLS ERASEW
  PASS 1 =
  IF
     RESULT SIZE CELLS ERASEW
  THEN
  16  PASS ^2 / POWER !
  POWER  DIVISOR  DIVIDE
  1 EXP !
  PASS 1- SIGN ! ;


DECIMAL
CREATE SCHARS   CHAR | C, CHAR / C, CHAR - C, CHAR \ C,
VARIABLE SPIN#
: SPINCHAR ( -- char ) SPIN# @ 1+ 3 AND DUP SPIN# ! SCHARS + C@ ;
: SPINNER    SPINCHAR VPUT ;

2VARIABLE ITERATIONS

: ITERATIONS++   ITERATIONS 2@ 1 M+ ITERATIONS 2! ;
: .ITERATIONS   VROW 2@  ITERATIONS 2@ UD.  AT-XY ;

0 VALUE NDIGIT

: CalcPi ( -- )
  NDIGIT 45800 U> IF
    ." Warning: digits > 45808 will be in error " CR
  THEN
  3 1
  DO
    I TO PASS
    INITIALIZE
    BEGIN
      TIMEOUT OFF ( prevent screen from going blank)

    \  SPINNER
      ITERATIONS++ .ITERATIONS
      POWER TERM SIZE MOVE
      TERM  EXP @ DIVIDE
      SIGN @ DUP
      IF  SUBTRACT
      ELSE  ADD
      THEN
      0= SIGN !  2 EXP +!
      POWER  DIVISOR ^2  DIVIDE
      POWER ZERO?
    UNTIL
  LOOP ;

DECIMAL
: PRINT ( -- )
  CR
  RESULT  DUP@ 0 .R  [CHAR] . EMIT CR
  NDIGIT 0
  ?DO
    0 OVER !
    DUP 10000 MULTIPLY
    DUP@  0 <#  # # # #  #> TYPE SPACE
    ?TERMINAL ABORT" Print halted"
  4 +LOOP
  DROP CR ;

: GetDigits ( -- n )
  CR ." How many digits do you want? "
  PAD DUP 20 ACCEPT NUMBER? ABORT" Bad number" CR ;

: ".."   ." .. " ;

: .SIZE   CR ." Array size = " SIZE . ." bytes" ;
: .POWER  CR ." POWER array is at  >" POWER  U. ".." POWER  SIZE + U. ;
: .TERM   CR ." TERM  array is at  >" TERM   U. ".." TERM   SIZE + U. ;
: .RESULT CR ." RESULT array is at >" RESULT U. ".." RESULT SIZE + U. ;
: .HERE   CR ." HERE is at " HERE U. ;

\ for clarity:
\ array size = ceil(ndigit / log10(2^16))
\ log10(2^16) as a fraction = 525/109 ie: 4.816...
\ Use the 32bit math to divide ndigit by 4.816...
: /log10(2^16) ( n --  rem size) 109 UM* 525 UM/MOD ;

: ARRAY_SIZE ( #Digits -- )
   /log10(2^16) SWAP ( rem) IF  1+  THEN CELL+
   ( adds 1 extra cell for accurate last digits)
;

DECIMAL
: PI ( -- )
    DECIMAL
    GetDigits DUP TO NDIGIT
    ( n) ARRAY_SIZE TO SIZE
    .SIZE
\ create arrays in un-allocated memory
    BASE @ HEX
    HERE TO POWER   SIZE 20 + CELLS ALLOT
    HERE TO TERM    SIZE 20 + CELLS ALLOT
 \   HERE TO RESULT  SIZE 20 + CELLS ALLOT
    LORAM TO RESULT
    .POWER  .TERM  .RESULT
    50 ALLOT  ( hold buffer space for number conversions)
    BASE !

  ITERATIONS OFF
  TIMER-RESET
  CR CalcPi
  CR ." Done!" SPACE  .ELAPSED
  CR ." Press a key to see result" KEY DROP
  PRINT
;

: FILE=  PARSE-NAME OPEN-OUTPUT  ;

: TITLEPAGE
PAGE ."  Compute PI in ANS Forth"
CR
CR ." DxForth Revised 2015-02-09  ES"
CR ." Revised for Camel99 2025-09-7 BFox"
CR
CR ." - Optimized with Machine Forth"
CR
CR ." Compute Pi to an arbitrary precision."
CR
CR ." Uses Machin's formula:"
CR ." pi/4 = 4 arctan(1/5) - arctan(1/239)"
CR
CR ." FILE= <PATH> to print file & screen"
CR ." Type  PI  to  run the program" ;


\ end
: START   WARM  TITLEPAGE TIMER-START ABORT ;

LOCK
\ Forth in RAM at >A000
\ INCLUDE DSK1.SAVESYS
\ ' START SAVESYS DSK3.PIDEMO

\ Forth in SuperCart at >6000
 INCLUDE DSK1.SUPERSAVE
 ' START SUPERSAVE DSK3.PIDEMOSC

How many digits do you want?

Array size = 44 bytes
POWER array is at  >B9A8 .. B9D4
TERM  array is at  >BA28 .. BA54
RESULT array is at >2000 .. 202C
100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119

120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139

140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159

160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179

180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199

200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219

220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239

240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259

260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279

280 281 282 283 284 285 286 287 288 289 290 291 292
Done!
Press a key to see result
.
1415 9265 3589 7932 3846 2643 3832 7950 2884 1971 6939 9375 1058 2097 4944 5923

0781 6406 2862 0899 8628 0348 2534 2117 0679 8214 8086 5132 8230 6647 0938 4460

9550 5822 3172 5359 4081 2848 1117 4502 8410 2701 9385 2110 5559 6446 2294 8954

9303 8196

How many digits do you want?

Array size = 106 bytes
POWER array is at  >BADA .. BB44
TERM  array is at  >BBD6 .. BC40
RESULT array is at >2000 .. 206A
293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312
313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332
333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352
353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372
373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392
393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412
413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432
433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452
453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472
473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492
493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512
513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532
533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552
553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572
573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592
593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612
613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632
633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652
653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672
673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692
693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712
713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732
733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752
753 754 755 756 757 758 759 760 761
Done!
Press a key to see result
.
1415 9265 3589 7932 3846 2643 3832 7950 2884 1971 6939 9375 1058 2097 4944 5923
0781 6406 2862 0899 8628 0348 2534 2117 0679 8214 8086 5132 8230 6647 0938 4460
9550 5822 3172 5359 4081 2848 1117 4502 8410 2701 9385 2110 5559 6446 2294 8954
9303 8196 4428 8109 7566 5933 4461 2847 5648 2337 8678 3165 2712 0190 9145 6485
6692 3460 3486 1045 4326 6482 1339 3607 2602 4914 1273 7245 8700 6606 3155 8817
4881 5209 2096 2829 2540 9171 5364 3678 9259 0360 0113 3053 0548 8204 6652 1384
1469 5194 1511 6094 3305 7270 3657 5959 1953 0921 8611 7381 9326 1179 3105 1185
4807 4462 3799 6274 9567 3518 8575 2724 8912 2793 8183 0119 4912
