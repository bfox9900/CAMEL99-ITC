\ ========================================================================
\ C R O S S - C O M P I L E R  B O O T - S T R A P P I N G

\ Final additions to the cross-compiler

\ NOTE: After all the primitives are compiled we use them to create the
\       final cross-compiler words for branching, looping and cross-
\       compiling versions of colon and semi-colon

\ these versions RUN IN THE CROSS-COMPILER to compile loops and branches
\ but... they compile the loops and branches in the TARGET memory.
\ It's not popular with ANS Forth, but I have included ?PAIRS type
\ error checking during compilation.

\ : ?ifthen   ( n n -- ) - ABORT" CC: IF ELSE THEN incomplete" ;
\ : ?begin    ( n n -- ) - ABORT" CC: BEGIN loop incomplete" ;
\ : ?doloop   ( n n -- ) - ABORT" CC: DO LOOP not matched" ;

CROSS-COMPILING
\
CR .( branch cross-compilers if then else etc...)
\
: if            cc['] ?BRANCH  >mark(t) 2  ; immediate
: then          ?xcomp 2 ?PAIRS   >resolve(t) ; immediate
: else          2 ?PAIRS cc['] BRANCH  >mark(t) swap 2 [compile] then 2 ; immediate

\ infinite loop cross-compilers
: again         1 ?PAIRS  cc['] BRANCH  <resolve(t) ; immediate
: begin         ?xcomp <mark(t)  1  ; immediate
: while         [compile] if >body(t)  ; immediate
: repeat        2>r [compile] again 2r> cell- [compile] then ; immediate
: until         1 ?PAIRS cc['] ?BRANCH  <resolve(t) ; immediate

\ finite loop cross-compilers
: do            cc['] <do>   <mark(t) 3  ; immediate
: ?do           cc['] <?do>  <mark(t) 3  ; immediate

: loop          3 ?PAIRS cc['] <loop>   <resolve(t) ; immediate
: +loop         3 ?PAIRS cc['] <+loop>  <resolve(t) ; immediate

\ : for           cc['] <FOR> <mark(t) 67 ;   immediate
\ : next          67 ?pairs  cc['] <next> <resolve(t) ; immediate

\ ========================================================================
\ C R O S S - C O M P I L I N G   C O L O N   &   S E M I - C O L O N
cr .( cross compiler ':' and ';')

\ In the following definiton we use the HOST: ;HOST compiler words to create
\ new versions of : and ; that cross-compile FORTH words into the TARGET

host: :                             \ this is the CROSS compiler's ':'
                !CSP                \ record the "current stack position" (used later)
                ]T                  \ set XSTATE to true ie: turn on the compiler
                <colon:>            \ put the word name in the Target dictionary and the mirror vocabulary
                THIDE               \ set the 'smudge' bit so we can't find this word during compilation
                TINTERPRET          \ run the cross compiler/interpreter on the input stream
;host

?stk

host: ;                            \ this the CROSS-compiler's ';'
                TREVEAL            \ un-smudge the word so it can be found in the dictionary
                'EXIT cfa,
                ?CSP               \ check is stack is the same place as when we started the definition
                T[                 \ reset XSTATE (TARGET STATE) to interpreting
;host   immediate

?stk

\ ========================================================================
\ F I N A L   T A R G E T -  C O M P I L I N G   C O L O N  &  S E M I - C O L O N
\ These alias names are used at the very end of the code to define the
\ FINAL ':' and ';' that will be the versions that actually run in the
\ TARGET Forth. (yes it's confusing) Renaming them allows me to remain sane.
\
SYNONYM x:   :                        \ "TARGET-compiling colon"
SYNONYM ;x   ;  IMMEDIATE             \ "TARGET-compiling semi-colon"

\ .XMEM                               \ show the cross compiler memory. It should be empty.

: IMMEDIATE    XIMMEDIATE ;           \ finally re-define IMMEDIATE as the cross-compiling version

\                  C R O S S    C O M P I L E R    E N D S
\ /\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
