\ xfcc99 cross-compiler tms9902 rs232/1 DIRECT cru DRIVER 9Feb2019 bjf
\ CODE words are used to save kernel space by not needing the CRU library

\ These routines protect the value in R12 on the return stack
\ then restore it when returning to Forth.
\ This should help with acessing other I/O devices while using
\ the serial port.

[CC] HEX [TC]
\               1300 CONSTANT: RS232/1    \ card address
[CC] 1300 40 + [TC] CONSTANT: /TTY1       \ 40= 9902#1,
\ [CC] 1300 80 + [TC] CONSTANT: /TTY2       \ 80= 9902#2

\ 9902 control bits
[CC] DECIMAL
       13 EQU LDIR           \ "load interval register"
\ for reference...
\      16 CONSTANT: RTSON    \ request to send
\      18 CONSTANT: RIENB    \ rcv interrupt enable
\      21 CONSTANT: RXRL     \ receive register loaded bit
\      22 CONSTANT: TXRE     \ transmit register empty bit
\      27 CONSTANT: -DSR     \ NOT data set ready
\      28 CONSTANT: -CTS     \ NOT clear to send
       31 EQU RESET          \ 9902 reset bit

[CC] HEX
       7F EQU $7F

TARGET-COMPILING
VARIABLE: BPS    0034 BPS T!   \ 9600 baud
VARIABLE: PROTO  9300 PROTO T! \ 8 bits, no parity, 1 stops
VARIABLE: PORT

CROSS-ASSEMBLING
l: LEDON
         R12 RS232/1 LI,    \ select the card
         7 SBO,             \ turn LED on
         RT,
l: LEDOFF
         R12 RS232/1 LI,    \ select the card
         7 SBZ,             \ turn LED off
         RT,

CODE: OPEN-TTY  ( port -- ) \ Usage: /TTY1 OPEN-TTY
         R12 RPUSH,
         LEDON @@ BL,
         TOS R12 MOV,       \ load 9902 port address
         RESET SBO,         \ reset card
         TOS PORT @@ MOV,   \ set the port variable to use
         PROTO @@ 8 LDCR,   \ set protocol
         LDIR SBZ,          \ disable 9902 timer
         BPS @@ 0C LDCR,    \ set baud rate
         TOS POP,           \ refill TOS
         LEDOFF @@ BL,
         R12 RPOP,          \ restore R12
         NEXT,
         END-CODE

[CC] DECIMAL
CROSS-ASSEMBLING
\ this word turns on the LED when sending
CODE: (CEMIT) ( c -- )
         R12 RPUSH,
         LEDON @@ BL,
         PORT @@ R12 MOV,
         BEGIN,
           27 TB, EQ    \ test -DSR bit =0
         UNTIL,
         16 SBO,        \ set RTS
          BEGIN,
           22 TB, EQ    \ wait XBRE empty
         UNTIL,
         TOS SWPB,      \ put byte on the other side
         TOS 8 LDCR,    \ send 8 bits
         16 SBZ,        \ reset RTS
         OUT  @@ INC,
         VCOL @@ INC,
         TOS POP,
         LEDOFF @@ BL,
         R12 RPOP,
         NEXT,
         END-CODE

CODE: CKEY? ( -- n )      \ fast tty read
         R12 RPUSH,
         PORT @@ R12 MOV,    \ select the 9902
         TOS PUSH,
         TOS CLR,
         21 TB,              \ test if char ready
         EQ IF,
            TOS 8 STCR,      \ read the char
            TOS 8 SRL,       \ shift to other byte
               18 SBZ,       \ reset char buffer
         ENDIF,
         R12 RPOP,
         NEXT,
         END-CODE
