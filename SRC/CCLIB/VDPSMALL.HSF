[CC] CR ." MINIMAL VDP  INTERFACE"

CROSS-ASSEMBLING
\ factored sub-routines. Set up VDP address for write or read modes
l: WMODE      R0 4000  ORI,       \ set control bits to write mode
l: RMODE      W  8C02  LI,        \ VDP port address into working register
              0 LIMI,             \ enter a critical section
              R0 SWPB,            \ R0= VDP-adr we are using. Set up 1st byte to send
              R0 *W MOVB,         \ send low byte of vdp ram write address
              R0 SWPB,
              R0 *W MOVB,         \ send high byte of vdp ram write address
              2 LIMI,             \ leave the critical section
              RT,

\ VSBR Forth style, on the stack
CODE: VC@     ( VDP-adr -- char )  \ Video CHAR fetch
              TOS R0 MOV,          \ VDP address into R0
              RMODE @@ BL,         \ set address in read mode
@@1:          VDPRD @@ TOS MOVB,   \ READ char from VDP RAM into TOS
              TOS 8 SRL,           \ move the damned byte to correct half of the word
              NEXT,
              END-CODE

 CODE: V@     ( VDPadr -- n)        \ video fetch 16bit int
              TOS R0 MOV,          \ VDP address into R0
              RMODE @@ BL,         \ set address in read mode
              R3 VDPRD LI,         \ put the VDP read port address in R3. 12.9% faster
             *R3  TOS MOVB,        \ READ char from VDP RAM into TOS
              TOS SWPB,            \ move byte to other side
             *R3  TOS MOVB,        \ READ 2nd char from VDP RAM into TOS
              TOS SWPB,            \ put bytes in correct order for an integer
              NEXT,
              END-CODE

\ VMBR Forth style
CODE: VREAD   ( VDP-adr RAM-addr cnt  -- )
              R1 POP,              \ pop buffer addr. to R1
              R0 POP,              \ pop VDP addr. to R0
              R3 VDPRD LI,         \ put the VDP read port address in R3. 12.9% faster
              RMODE @@ BL,         \ call the RMODE control routine
              BEGIN,
                *R3 *R1+ MOVB,     \ READ char from VDP RAM into CPU RAM and autoINC
                 TOS DEC,          \ dec the counter
              EQ UNTIL,            \ check if done
              TOS POP,             \ refill TOS
              NEXT,
              END-CODE

\ ===================================================================
CR ." V D P   W R I T E"

\ VMBW in Forth style
CODE: VWRITE  ( RAM-addr VDP-addr cnt -- )
              R0 POP,              \ vaddr to R0
              R1 POP,              \ cpu addr to R1
              TOS TOS MOV,
              NE IF,               \ protect from cnt=0 like CMOVE
                 WMODE @@ BL,      \ setup VDP write address
                 R3 VDPWD LI,      \ vdp addr. in a reg. makes this 12.9% faster
                 BEGIN,
                   *R1+ *R3 MOVB,  \ write byte to vdp write port
                    TOS DEC,       \ dec the byte counter
                 EQ UNTIL,         \ jump back if not done
              ENDIF,
              TOS POP,
              NEXT,
              END-CODE

\ VSBW in Forth style  pronounced "Vee-Cee-store"
CODE: VC!     ( char Vaddr  -- )   \ Video CHAR store
              TOS R0 MOV,          \ need address in R0
              WMODE @@ BL,         \ branch to setup VDP write address
              TOS POP,             \ get char into TOS register
              TOS SWPB,
              TOS VDPWD @@ MOVB,   \ write char to vdp data port
              TOS POP,             \ refill TOS
              NEXT,
              END-CODE

 CODE: V!     ( n Vaddr  -- )       \ Video store 16BIT int
              TOS R0 MOV,          \ need address in R0 to call WMODE
              WMODE @@ BL,         \ branch to setup VDP write address
              TOS POP,             \ get char into TOS register
              R3 VDPWD LI,         \ vdp addr. in a reg. makes this faster
              TOS *R3 MOVB,        \ write hi byte to vdp data port
              TOS SWPB,            \ swap bytes
              TOS *R3 MOVB,        \ write lo byte to vdp data port
              TOS POP,             \ refill TOS
              NEXT,
              END-CODE

TALIGN