\ ****************************************************************************
\ B Fox simple decompiler for HsF2000 Cross compiler  July 2, 2015
\
\  _____                    _    ______                               _ _
\ |_   _|                  | |   |  _  \                             (_) |
\   | | __ _ _ __ __ _  ___| |_  | | | |___  ___ ___  _ __ ___  _ __  _| | ___ _ __
\   | |/ _` | '__/ _` |/ _ \ __| | | | / _ \/ __/ _ \| '_ ` _ \| '_ \| | |/ _ \ '__|
\   | | (_| | | | (_| |  __/ |_  | |/ /  __/ (_| (_) | | | | | | |_) | | |  __/ |
\   \_/\__,_|_|  \__, |\___|\__| |___/ \___|\___\___/|_| |_| |_| .__/|_|_|\___|_|
\                 __/ |                                        | |
\                |___/                                         |_|
\

\ **This decompiler only works on words in TARGET segment.
\   Not for the HOST Forth

\ ###########################################################################

\ ### MODIFIED FOR USE WITH CAMEL FORTH LINKAGE CHANGES MADE JAN 2 2017 ####

\ ###########################################################################

[undefined] cross-compiler
[if] cr
     cr ." **ERROR** "
     cr ." This code requires the TI99XC5.hsf cross compiler" ABORT
[then]

CROSS-COMPILING

\ 'EXIT value THE-EXIT            \ This is how we find the end of a definition. It's not perfect becuz a word can call EXIT before the ';'

HEX

: CFA>NFA         ( cfa -- NFA | 0 )             \ kind of convoluted but it works.
\ algorythm:    look backwards until you see a '0' or '40'
\               This puts you at the precedence bit field
\               Then just go back 1 cell to get to the LFA
\               we have to assume there might be a 0 here it's an odd number of characters in the name
                 CELL-                          \ odd length names have 1 empty byte at the end
                 begin
                   cell- dup tc@
                   0FE AND 0=                   \ upper 7 bits are always 0 in the precedence field
                 until
                 1+  ;                          \ increment immediate field by 1 byte to get to the NFA


: validword?    ( nfa -- NFA | 0 )              \ roll through the word set to find LFA to verify it is a real word in the dictionary
                xlatest @                       \ start with the last word in the dictionary
                begin
                    NFA>LFA T@                  \ read the link address to get to the next word
                    2dup =                      \ is equal?
                    OVER 0= OR                  \ loop ends if there is a match or we find link = 0; ie: last word in the dictionary
                until
                NIP ;                           \ drop the input NFA and keep the result

\ Camel99 Executor words let us determine what kind of FORTH word we are decompiling
: 'exit?        ( CFA -- ?)  'exit = ;       \ read contents of addr to see if the addr of EXIT is in it

\ decompiler output for each word type

VARIABLE IMMFLAG      \ set if decompiled word is immediate

: XIMMED?  ( nfa -- f )  IMMFLAG OFF   1- TC@ 1 AND   IMMFLAG !  ;

: .FINDBUF      FIND-BUFFER $. ;

: .COLONWORD      ( NFA CFA -- ) CR ." : " .findbuf  CR TAB ;
: .VARIABLE       ( NFA CFA -- ) CR  DUP CELL+ T@ CR ." VARIABLE " .FINDBUF ."  = " U. ABORT ;
: .LIT            ( NFA CFA -- ) DUP T.NAME ;
: .S"WORD        ( NFA CFA -- )  DUP CELL+   [CHAR] S EMIT [CHAR] " EMIT SPACE ;   \ print 'S"'
: .CONSTANT      ( NFA CFA -- )  CR  DUP CELL+ T@ U. ." CONSTANT " .FINDBUF ABORT ;
: .USER          ( NFA CFA -- )  CR  DUP CELL+ T@ U. ." USER " .FINDBUF ABORT ;
: .EXIT          ( cfa -- )       ."  ; "  IMMFLAG @ IF ."  IMMEDIATE" THEN  CR  ;

: .DOTQUOTE      ( NFA CFA -- )
                 [CHAR] . EMIT [CHAR] " EMIT SPACE   \ print '."'
                 DUP >R                              \ copy the CFA
                 1+ [TARGET] SWAP COUNTL             \ create a FAR string on stack
                 dup r> + align >r                   \ move the CFA past end of string
                 TYPEL  [CHAR] " EMIT  ;

HEX 045A constant Tnext       \ machine code for CAMEL99 NEXT (B *R10)

: .CODEWORD  ( NFA CFA -- )
                 CR ." CODE "  .FINDBUF
                 CR TAB
                  BEGIN
                     DUP T@  ?newline .#### ."  , "   \ U. [CHAR] , EMIT SPACE

                     CELL+ DUP T@ tNEXT =
                 UNTIL
                 DROP
                 CR TAB ." NEXT,"
                 CR ." END-CODE"
                 ABORT ;

: WORD-SELECTOR ( cfa -- )
              T@    ( -- Executor_address)
              CASE
                 'DOCOL  OF  .COLONWORD    ENDOF
                 'DOVAR  OF  .VARIABLE     ENDOF
                 'DOCON  OF  .CONSTANT     ENDOF
                 'DOUSER OF  .USER         ENDOF
\                 '(S")   OF  .S"WORD       ENDOF
                 .CODEWORD     \ default: it's a code word
              ENDCASE ;

: TSEE          (  -- <string> )
                TFIND ( nfa)                             \ find the nfa of <string>
                DUP 0= ABORT" Not in TARGET dictionary"
                DUP XIMMED?                              \ set a flag if the word is immediate. Used later
                nfa>cfa dup
                CR WORD-SELECTOR
                BEGIN
                      cell+                     \ move to next cell in the thread
                      DUP T@                    \ -- cell XT
                      dup 'exit?
                      if  .exit  exit then
                      cfa>nfa                   \ -- cell nfa
                      dup validword?            \ -- cell nfa ?
                      if
                          T.NAME SPACE ?NEWLINE
                      else
                          DROP                 \ not a word so drop the nfa
                          DUP T@ 4 .R SPACE    \ fetch the contents and print it as a UN-signed number
                      then
                AGAIN ;

DECIMAL