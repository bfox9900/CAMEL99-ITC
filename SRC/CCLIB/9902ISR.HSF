\ xfcc99 cross-compiler tms9902 rs232/1 DIRECT cru DRIVER 9Feb2019 bjf
\ CODE words are used to save kernel space by not needing the CRU library

\ These routines protect the value in R12 on the return stack
\ then restore it when returning to Forth.
\ This should help with acessing other I/O devices while using
\ the serial port.

[CC] HEX [TC]
               1300 CONSTANT: RS232/1    \ card address
[CC] 1300 40 + [TC] CONSTANT: /TTY1       \ 40= 9902#1,

\ ****************************************************************
\ * EQUates exist only in the cross compiler. Saves target memory
[CC]
    83C0 EQU ISRWKSP

\ *FAST Queue pointers in scratchpad (after FAST code rotuines)
    VARIABLE: QHEAD    \ Initialized during setup
    VARIABLE: QTAIL    \     "         "      "

    83C4 EQU ISRHOOK  \ ti-99 address for user ISR routine

\ *circular Q management
    0100 EQU QSIZE    \ 256 byte buffer
QSIZE 1- EQU QMASK    \ circular mask value

0 CONSTANT: Q         \ forth constant
T' Q [CC] >BODY [TC] EQU 'Q  \ PFA of Q

\ 9902 control bits
[CC] DECIMAL
       13 EQU LDIR           \ "load interval register"
\ for reference...
\      16 CONSTANT: RTSON    \ request to send
\      18 CONSTANT: RIENB    \ rcv interrupt enable
\      21 CONSTANT: RXRL     \ receive register loaded bit
\      22 CONSTANT: TXRE     \ transmit register empty bit
\      27 CONSTANT: -DSR     \ NOT data set ready
\      28 CONSTANT: -CTS     \ NOT clear to send
       31 EQU RESET          \ 9902 reset bit

[CC] HEX
       7F EQU $7F            \ 7 bit byte mask

\ * VARIABLE names are in the TI-99 Forth dictionary
TARGET-COMPILING
VARIABLE: BPS    0034 BPS T!   \ 9600 baud
VARIABLE: PROTO  9300 PROTO T! \ 8 bits, no parity, 1 stops
VARIABLE: PORT

CROSS-ASSEMBLING
l: LEDON
         R12 RS232/1 LI,    \ select the card
         7 SBO,             \ turn LED on
         RT,
l: LEDOFF
         R12 RS232/1 LI,    \ select the card
         7 SBZ,             \ turn LED off
         RT,

[CC] HEX [TC]
CODE: OPEN-TTY ( buffer cruaddr -- )
       0 LIMI,              \ inhibit ints until setup is complete
       R12  RPUSH,          \ save R12 which might be in use
       LEDON @@ BL,
       TOS R12 MOV,         \ 9902 CRU address -> R12
       1F SBO,              \ Reset 9902

\ * Need a delay after reset so...
\ * Assign buffer to  Q, init Q head and tail indices
      *SP+  'Q @@ MOV,      \ POP buffer into Forth constant 'Q'
       QHEAD @@ CLR,        \ clear the head
       QTAIL @@ CLR,        \ clear the tail

\ * We can configure the 9902 now
       0D SBZ,              \ 9902 Bit 13, disable interval register
       PROTO @@ 8 LDCR,     \ set protocol (8n1 is normal)
       BPS   @@ C LDCR,     \ set baud (typically 9600)
       LEDOFF @@ BL,
       R12 RPOP,            \ restore R12
       TOS POP,             \ refill Forth top of stack cache
       NEXT,
       END-CODE


\ **************************************************************
\ * ISR is in workspace 83C0. ONLY R3,R4 & R12 are free to use!!!
[CC] DECIMAL [TC]
TCREATE: TTY1-ISR ( -- address) ( * this is a label, not a runnable Forth word * )
       ISRWKSP LWPI,                                           \   10
       R12 CLR,          \ select 9901 chip CRU address        \   10
       2 SBZ,            \ Disable VDP int prioritization      \   12
       R11 SETO,         \ 3.5.16 hinder screen timeout        \   10
       PORT @@ R12 MOV,  \ set CRU PORT                        \   22
       QTAIL @@ R4 MOV,  \ index->R4                           \   22
       16 TB,            \ interrupt received?                 \   12
       EQ IF,            \ Yes; enqueue char                   \    8
            Q R4 () 8 STCR,    \                                   52
            18 SBO,            \ clr rcv buffer, enable interrupts 12
            R4 INC,            \ bump the index                    10
            R4 QMASK ANDI,     \ wrap the index                    14
            R4 QTAIL @@ MOV,   \ save the index                    22
            R12 CLR,                                         \     10
            RTWP,                                            \     13
       ENDIF,                                                \    233
       R12 CLR,        \ select 9901 chip CRU address        \   ~78uS
         3 SBO,        \ reset timer latch int (essentially ignore it)
       RTWP,           \ Nothing to do here. Return.

\ **************************************************************
\ * Configure ROM ISR to pass through external interrupts as VDP interrupts
\ *   (Jeff Brown/Thierry)

[CC] HEX [TC]
CODE: INSTALL ( ISR_address -- )
       0 LIMI,
       TOS ISRHOOK @@ MOV, \ install ISR handler from Forth to R2 of ISR workspace

       83E0 LWPI,       \ >>GPL workspace<<
       R14 CLR,         \ Disable cassette interrupt; protect 8379
       R15 877B LI,     \ disable VDPST reading; protect 837B

       ISRWKSP LWPI,    \ >>ISR workspace<<
       R1 SETO,         \ [83C2] Disable all VDP interrupt processing
       R11 SETO,        \ Disable screen timeouts
       R12 CLR,         \ Set to 9901 CRU base
       BEGIN,
          2 TB,         \ check for VDP int
       NE UNTIL,        \ loop until <> 0

       1  SBO,          \ Enable external interrupt prioritization
       2  SBZ,          \ Disable VDP interrupt prioritization
       3  SBZ,          \ Disable Timer interrupt prioritization

       8300 LWPI,       \ >>FORTH WS<<
       TOS POP,         \ refill cache register
       2 LIMI,          \ 3.2  [rs232 ints now serviced!]
       NEXT,            \ and return to Forth
       END-CODE

\ *************************************************************
\ * FORTH WORD: (CEMIT) - send a char to RS232
\ * turns on the LED when sending

[CC] DECIMAL  [TC]
CROSS-ASSEMBLING
CODE: CEMIT ( c -- )
         R12 RPUSH,
         LEDON @@ BL,
         PORT @@ R12 MOV,
         BEGIN,         \ loop for data set ready
           27 TB, EQ
         UNTIL,
         16 SBO,        \ set RTS
         BEGIN,         \ wait XBRE=0
           22 TB, EQ
         UNTIL,
         TOS SWPB,      \ put byte on the other side
         TOS 8 LDCR,    \ send 8 bits
         16 SBZ,        \ reset RTS
         OUT  @@ INC,
         VCOL @@ INC,
         TOS POP,
         LEDOFF @@ BL,
         R12 RPOP,
         NEXT,
         END-CODE

\ *************************************************************
\ * FORTH WORD: QKEY? - Read character from 'Q' at index 'QHEAD'

[CC] HEX [TC]

 CODE: QKEY? ( -- c | 0 )
       TOS PUSH,                 \ make space in the TOS cache register
       TOS CLR,                  \ FLAG to say no char ready
       QHEAD @@ QTAIL @@ CMP,
       NE IF,                    \ head<>tail means char waiting
           QHEAD @@ W MOV,       \ get queue head index to W
           Q (W) TOS MOVB,       \ get char from Q -> TOS
           TOS SWPB,             \ move to other side of register
           W INC,                \ inc the index
           W QMASK ANDI,         \ wrap the index
           W QHEAD @@ MOV,       \ save the new index
       ENDIF,
       NEXT,                     \ 34 BYTES
       END-CODE

CODE: CKEY? ( -- n )        \ non-interrupt tty read
         R12 RPUSH,
         PORT @@ R12 MOV,    \ select the 9902
         TOS PUSH,
         TOS CLR,
         21 TB,              \ test if char ready
         EQ IF,
            TOS 8 STCR,      \ read the char
            TOS 8 SRL,       \ shift to other byte
               18 SBZ,       \ reset 9902 rcv buffer
         ENDIF,
         R12 RPOP,
         NEXT,
         END-CODE

[CC] DECIMAL [TC]
CODE: ISRON ( ttyport -- )  \ *INSTALL ISR IN 83C4 1ST!*
       0 LIMI,
       TOS R12 MOV,
       18 SBO,          \  Enable rs232 RCV int
       TOS POP,
       2 LIMI,
       NEXT,
       END-CODE

CODE: ISROFF ( ttyport -- )  \ * Turn off the 9902 interrupts
       0 LIMI,
       TOS R12 MOV,      \ i.e., >1340
       18 SBZ,           \ Disable 9902 rs232 rcv int
       ISRHOOK CLR,
       TOS POP,
       2 LIMI,
       NEXT,
       END-CODE

[cc] HEX [TC]
