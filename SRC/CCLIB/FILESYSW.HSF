\ FilesysT.hsf

[CC] HEX 

TARGET-COMPILING

\ VARIABLE: ^PAB            \ *moved to CAMEL2.HSF

\ To save kernel space we are reading/writing VDP directly.
\ There is NO PAB duplicate in CPU RAM.

\ fast fetch of pab base pointer. (*This is also the OPCODE field)
CODE: [PAB   ( -- adr) TOS PUSH,  ^PAB @@ TOS MOV,  NEXT, END-CODE

\ PAB field words calculate offset from PAB base
\ square bracket trailing to indicate they are used with [PAB
\ Example:  [PAB FBUFF] V@

CODE: FLG]    ( vaddr -- vaddr') TOS INC,         NEXT, END-CODE
CODE: FBUFF]  ( vaddr -- vaddr') TOS INCT,        NEXT, END-CODE
CODE: RECLEN] ( vaddr -- vaddr') *TOS+ *TOS+ MOV, NEXT, END-CODE \ inc. by 4 trick
CODE: CHARS]  ( vaddr -- vaddr') TOS  5 ADDI,     NEXT, END-CODE
CODE: REC#]   ( vaddr -- vaddr') TOS  6 ADDI,     NEXT, END-CODE
CODE: STAT]   ( vaddr -- vaddr') TOS  8 ADDI,     NEXT, END-CODE
CODE: FNAME]  ( vaddr -- vaddr') TOS  9 ADDI,     NEXT, END-CODE

\ in real hardware the location held in >8370 contains 'AA' 
\ We can't touch that byte so the pab stack base address is 1 byte below
: RSTPAB  ( -- ) 8370 @ 1- ^PAB ! ;  \ Reset base PAB address

\ control the PAB stack
12C CONSTANT: PSZ                             \ size of PAB+BUFFER
: PSHPAB  ( -- VDPadr) PSZ NEGATE ^PAB +! ;
: POPPAB  ( -- VDPadr) PSZ ^PAB +! ;

\ generic file error handler
: ?FILERR  ( ior -- )
           ?DUP
           IF CR T." * File Err "  .
              RSTPAB  ABORT
           THEN ;

: VPLACE   ( $addr len Vaddr -- )  \ like PLACE, but for VDP RAM
           2DUP VC! 1+ SWAP VWRITE ;

\ INITPAB needs ^PAB set to a VDP address. *NO ERROR CHECKING USED*
\ it inits the pab to DV80 file format
: INITPAB  ( addr len -- )
           14 [PAB FLG]    VC!       \ mode: input,display,variable
           50 [PAB RECLEN] VC!       \ 80 bytes/rec          [PAB PSZ 0 VFILL
          [PAB FNAME]                \ -- addr len vadr
           DUP BL + [PAB FBUFF] V!   \ set FBUFF 32 bytes past fname
           VPLACE ;                  \ write string to [PAB FNAME]

\ === HI LEVEL FUNCTIONS ====
[CC] HEX [TC]

 8356 CONSTANT: DSRNAM

: FILEOP  ( opcode -- err)                   \ TI99 O/S call
          [PAB VC!                           \ write opcode byte to VDP PAB
          [PAB FLG] DUP VC@ 1F AND SWAP VC!  \ clear err code bits
          0 837C C!                          \ clear GPL status register
          [PAB FNAME] DSRNAM !               \ select the PAB
          DSRLNK ( -- err)                   \ DSRLINK with parameter 8
          837C C@ 20 AND  OR                 \ get GPL status, or with err
;

\ VARIABLE: LINES                          \ moved to CAMEL2.HSF

: ?FILE    ( n -- )
           0= TS" Filename" ?ABORT ;  \ tests string length only

CODE: 1+!  ( addr -- )
          *TOS INC,
           TOS POP,
           NEXT,
           END-CODE

\ This word bootstraps the system on startup.
\ INCLUDED is nestable. Saves all state info
\ and allocates a new PAB and RAM buffer on a PAB stack in VDP RAM
\ Usage:   TS" DSK1.START" INCLUDED
: INCLUDED  ( caddr len -- )
           DUP ?FILE
           CR T." Loading: " 2DUP TYPE
           LINES OFF
           SOURCE-ID @ >R                  \ save source-ID
           SOURCE 2>R                      \ save interpreter input source
           >IN @ >R                        \ save input string pointer
           DSRNAM @ >R                     \ save current pab address

           PSHPAB INITPAB                  \ make new PAB on PAB stack
           0 FILEOP ?FILERR                \ open new file (sets new DSRNAM)
           SOURCE-ID 1+!                   \ incr. source ID (1st file is 1)

           52 DUP MALLOC >R                \ get a buffer pointer & RPUSH
           BEGIN
              2 FILEOP 0=                  \ read a record,closes file if EOF
           WHILE                           \ while err=0
             [PAB CHARS] VC@ DUP           \ get the #chars read
             [PAB FBUFF] V@  R@ ROT VREAD  \ read VDP fbuff to malloc buffer
             R@  SWAP  INTERPRET           \ interpret addr,len on stack
             LINES 1+!                     \ count the line
           REPEAT
           R> DROP                         \ drop buffer address from rstack
         ( 52) MFREE                       \ release the buffer memory

           POPPAB                          \ pop back 1 pab on the pabstack
           R> DSRNAM !                     \ pop the previous file address
           R> >IN !                        \ restore >IN
           2R> 'SOURCE 2!                  \ restore interpreter SOURCE
           R> SOURCE-ID !                  \ restore SOURCE-ID
;

