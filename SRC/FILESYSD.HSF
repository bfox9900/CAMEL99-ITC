\ filesys is a minimal single PAB file mechanism  BJF 17MAR2018
\ It is used only by INCLUDE to bootstrap the system.

\  *** NEEDS DISKDSR4.HSF

\ Apr 2, 2018  -re-factored for smaller size and small speed-up.
\              -better use of stack for LD/Interpret loop.
\ ============================
[CC] HEX  [TC]

   20 CONSTANT: PSIZE     \ size of a PAB in CAMEL99 Forth 32 bytes
 8356 CONSTANT: DSRNAM    \ OS system variable that enables a device

\ VARIABLE: ^PAB          \ *moved to CAMEL2.HSF

\ fast fetch of pab base pointer. (*This is also the OPCODE field)
CODE: [PAB   ( -- adr) TOS PUSH,  ^PAB @@ TOS MOV,  NEXT, END-CODE

\ PAB field words calculate offset from PAB base
\ square bracket trailing to indicate they are used with [PAB
\ Example:  [PAB FBUFF] V@

CODE: FLG]    ( addr -- addr') TOS INC,    NEXT, END-CODE
CODE: FBUFF]  ( addr -- addr') TOS INCT,   NEXT, END-CODE
CODE: RECLEN] ( addr -- addr') *TOS+ *TOS+ MOV,  NEXT, END-CODE \ inc. by 4 trick
CODE: CHARS]  ( addr -- addr') TOS 5 ADDI, NEXT, END-CODE
CODE: REC#]   ( addr -- addr') TOS 6 ADDI, NEXT, END-CODE
CODE: STAT]   ( addr -- addr') TOS 8 ADDI, NEXT, END-CODE
CODE: FNAME]  ( addr -- addr') TOS 9 ADDI, NEXT, END-CODE


[CC] HEX [TC]
\ TI-99 File error Code Meaninq
\ ------------------------------
\ 0  Bad device name.
\ 1  Device is write protected.
\ 2  Bad open attribute such as incorrect file type, incorrect record length,
\    incorrect I/O mode, or no records in a relative record file.
\ 3  Illegal operation; i.e., an operation not supported on the peripheral or a
\    conflict with the OPEN attributes.
\ 4  Out of table or buffer space on the device.
\ 5  Attempt to read past the end of file. When this error occurs, the file is
\    closed. Also given for non-extant records in a relative record file.
\ 6  Device error. Covers all hard device errors such as parity and bad medium errors.
\ 7  File error such as program/data file mismatch, non-existing file opened in
\    INPUT mode, etc.

: ERR@    ( -- n)
          [PAB FLG] VC@ 5 RSHIFT ;          \ read err code from PAB & shift bits

: FILEOP  ( opcode -- err)                   \ TI99 O/S call
          [PAB VC!                           \ write opcode byte to VDP PAB
          [PAB FLG] DUP VC@ 1F AND SWAP VC!  \ clear err code bits
          0 GPLSTAT C!                       \ clear GPL status register
          DSKCARD ENABLE
          DSKLNK BLWP ERR@
          DSKCARD DISABLE ;


\ Error handlers
: ?CARDID  ( -- ) 'ID C@ AA <> TS" CARD not found" ?ABORT ;

: ?DEVERR  ( link -- )
           0= IF
                DSKCARD DISABLE ( turn off the Disk card )
                CR T." * Device not found" ABORT
           THEN ;

\ generic file error handler
: ?FILERR  ( ior -- ) ?DUP IF CR T." * File Err " .  ABORT THEN ;

\ MAKEPAB fills in buffer address, filename, computes what I call the "realpab"
\ The realpab is the address in the PAB of the file name from the
\ location of the 1st '.' character. It is essentially a "file ID" for the TI-99 O/S.
\ The realpab VDP address is put into DRSNAM (>8356) to select the active file.

: VPLACE   ( $addr len Vaddr -- ) 2DUP VC! 1+ SWAP VWRITE ;

: MAKEPAB  ( addr len -- )
           [PAB PSIZE +  [PAB FBUFF] V!   \ set FBUFF 32 bytes past PAB
           2DUP [PAB FNAME] VPLACE        \ dup & write string to PAB
           /DOT NIP 1+ ( -- n)            \ compute offset upto '.' in string
           [PAB FNAME] +  DSRNAM ! ;      \ offset + PAB_FNAME -> DSRNAM

\ address navigation helpers. (REMOVED TO SAVE SPACE)
\ : REG#    ( workspace R# -- addr)  2* + ;       \ COMPUTE address of R# in workspace
\ : >ENTRY  ( DSRlink -- entry_addr) 2+ @ ;       \ convert a LINK in ROM to code entry

: NEWFILE ( $addr len -- FID )            \ returns FID. but does NOT set it!
         DSKCARD ENABLE
         ?CARDID                          \ abort if card is not 'AA'
         DSRFIND        ( -- realpab link)
         DUP ?DEVERR                              \ ABORT if link=0
         DUP 4 +        ( -- link $)              \ link+4=DSR$ ie: Name of the DSR in CARD ROM
             C@ 8355 C!                           \ len(DSR$) -> hex8355
                        ( -- link)
 ( >ENTRY) 2+ @ 83E0  9 ( REG#) 2* + !            \ DSR code entry into GPL.R9
;

\ ** HI LEVEL FUNCTIONS **
: FSTAT ( -- c) 9 FILEOP DROP [PAB STAT] VC@ ; \ see E/A Manual page 298 for meaning

\ works on the SELECTed file (no handle needed)
: EOF   ( -- ? )  FSTAT 3 AND ;   \ returns 1 for READ EOF , 2 for WRITE EOF

: REFILL ( -- flag )  \ flag=true if there is more data
            2 FileOp ?FILERR               \ file read operation to VDP buffer
            EOF 0= ;                       \ return End of file status

\ primitive file words to bootstrap the system on startup
: OPN    ( addr len -- ior )
           -120 ^PAB +!                    \ get a new PAB on PAB stack
            [PAB PSIZE 0 VFILL             \ erase the VDP PAB to be safe.
            2DUP MAKEPAB ( -- $addr len)
            14   [PAB FLG]    VC!          \ default to: DISPLAY,VARIABLE
            50   [PAB RECLEN] VC!          \ 80 bytes/record
            NEWFILE
            0 FILEOP ;                     \ perform OPEN opcode


\ VARIABLE: LINES \ moved to CAMEL2.HSF

\ Include file primitive.
: INCLD     ( addr len -- ior)
           SOURCE 2>R                      \ save interpreter input source
           >IN @ >R                        \ save input string pointer
           DSRNAM @ >R                     \ save current DSR name

           OPN  ?FILERR                    \ open new file (sets new DSRNAM)
           1 SOURCE-ID !                   \ source ID is file (1)

           50 MALLOC >R                    \ get a buffer pointer & RPUSH
           BEGIN
             REFILL
           WHILE
             [PAB CHARS] VC@  DUP           \ get the #chars read by refill & DUP
             [PAB FBUFF] V@  R@ ROT  VREAD  \ transfer VDP fbuff to malloc buffer
             R@  SWAP INTERPRET            \ interpret the new string
             1 LINES +!
           REPEAT
           50 MFREE R> DROP                \ release the buffer, drop from rstack

           1 FILEOP ?FILERR                \ close currently open file
           120 ^PAB +!                     \ pop back 1 pab on the pabstack
           R> DSRNAM !                     \ restore old file ID
           R> >IN !
           2R> 'SOURCE 2!                  \ restore input
           SOURCE-ID OFF                   \ SOURCE-ID is conole (0)
;

: ?FILE    ( c -- ) 0= TS" Filename" ?ABORT ;

\ This word bootstraps the system on startup.
: INCLUDED  ( caddr len -- )
           DUP ?FILE
           CR T." Loading: " 2DUP TYPE
           LINES OFF
           INCLD \ SPACE .LOC
           HEX ;

