[CC] CR ." V D P  C H I P  I N T E R F A C E"
\ We took a Forth approach to naming VDP memory routines.
\ So VSBR becomes VC@  and VSBW becomes VC!.
\ VMBW and VMBR become VWRITE AND VREAD.
\ We also added a new one V! and V@ that load and store 16 bit numbers to VDP.

\ And I embraced the Forth paradigm so these routines are created as
\ Forth words with stack based parameter passing. This gives us the freedom
\ to call these fast routines directly from Forth.
\ With these fast primitives we can write most of the VDP driver
\ in Forth and still get excellent performance.
TARGET-COMPILING
\ factored sub-routines. Set up VDP address for write or read modes
l: WMODE      R0 4000  ORI,       \ set control bits to write mode
l: RMODE      W  8C02  LI,        \ VDP port address into working register
              0 LIMI,             \ enter a critical section
              R0 SWPB,            \ R0= VDP-adr we are using. Set up 1st byte to send
              R0 *W MOVB,         \ send low byte of vdp ram write address
              R0 SWPB,
              R0 *W MOVB,          \ send high byte of vdp ram write address
              2 LIMI,             \ leave the critical section
              RT,
              
\ VSBR Forth style, on the stack
CODE: VC@     ( VDP-adr -- char )  \ Video CHAR fetch
              TOS R0 MOV,          \ VDP address into R0
              RMODE @@ BL,         \ set address in read mode
@@1:          VDPRD @@ TOS MOVB,   \ READ char from VDP RAM into TOS
              TOS 8 SRL,           \ move the damned byte to correct half of the word
              NEXT,
              END-CODE

CODE: V@     ( VDPadr -- n)        \ video fetch 16bit int
              TOS R0 MOV,          \ VDP address into R0
              RMODE @@ BL,         \ set address in read mode
              R3 VDPRD LI,         \ put the VDP read port address in R3. 12.9% faster
             *R3  TOS MOVB,        \ READ char from VDP RAM into TOS
              TOS SWPB,            \ move byte to other side
             *R3  TOS MOVB,        \ READ 2nd char from VDP RAM into TOS
              TOS SWPB,            \ put bytes in correct order for an integer
              NEXT,
              END-CODE

\ VMBR Forth style
CODE: VREAD   ( VDP-adr RAM-addr cnt  -- )
              R1 POP,              \ pop buffer addr. to R1
              R0 POP,              \ pop VDP addr. to R0
              R3 VDPRD LI,         \ put the VDP read port address in R3. 12.9% faster
              RMODE @@ BL,         \ call the RMODE control routine
              BEGIN,
                *R3 *R1+ MOVB,     \ READ char from VDP RAM into CPU RAM and autoINC
                 TOS DEC,          \ dec the counter
              EQ UNTIL,            \ jump back if carry flag not set
              TOS POP,             \ refill TOS
              NEXT,
              END-CODE

\ ===================================================================
CR ." V D P   W R I T E"

\ VMBW in Forth style
CODE: VWRITE  ( RAM-addr VDP-addr cnt -- )
             R0 POP,              \ vaddr to R0
             R1 POP,              \ cpu addr to R1
             TOS TOS MOV,         \ protect from cnt=0 like CMOVE
             NE IF,
                 WMODE @@ BL,
                 R3 VDPWD LI,      \ vdp addr. in a reg. makes this 12.9% faster
                 BEGIN,
                   *R1+ *R3 MOVB,  \ write byte to vdp write port
                    TOS DEC,       \ dec the byte counter
                 EQ UNTIL,         \ jump back if no carry flag set
             ENDIF,
             TOS POP,
             NEXT,
             END-CODE

\ VSBW in Forth style  pronounced "Vee-Cee-store"
\ *NOTE:  There is no SPEED-UP from putting the WMODE sub-routine inline
CODE: VC!     ( char Vaddr  -- )   \ inline VDP address setup
             TOS R0 MOV,
             WMODE @@ BL,
             TOS POP,             \ get char into TOS register   \   22
             TOS SWPB,                                           \   10
             TOS VDPWD @@ MOVB,   \ write char to vdp data port  \   28
             TOS POP,             \ refill TOS                   \   22
             NEXT,
             END-CODE

\ used to increment screen vcol and vrow and fast fetch the new value
CODE: 1+@ ( addr-- n')
            *TOS INC,
            *TOS TOS MOV,
             NEXT,
             END-CODE

CODE: V!   ( n Vaddr  -- )        \ Video store 16BIT int
             TOS R0 MOV,          \ need address in R0 to call WMODE
             WMODE @@ BL,         \ branch to setup VDP write address
             TOS POP,             \ get integer into TOS register
             R3 VDPWD LI,         \ vdp addr. in a reg. makes this faster
             TOS *R3 MOVB,        \ write hi byte to vdp data port
             TOS SWPB,            \ swap bytes
             TOS *R3 MOVB,        \ write lo byte to vdp data port
             TOS POP,             \ refill TOS
             NEXT,
             END-CODE

CODE: VFILL   ( VDP-addr count char-- )
             TOS SWPB,            \ fix the TMS9900 byte order
             R2 POP,              \ R2=count
             R0 POP,              \ VDP-addr popped into R0
             WMODE @@ BL,         \ setup VDP write address IN R0
             R3 VDPWD LI,         \ vdp addr. in a reg. makes this 12.9% faster
             BEGIN,
               TOS *R3 MOVB,      \ write byte to vdp ram
               R2 DEC,            \ dec the byte counter
             EQ UNTIL,            \ jump back if not done
             TOS POP,
             NEXT,
             END-CODE

\ * VDP write to register. Kept the TI name
CODE: VWTR   ( c reg -- )         \ Usage: 5 7 VWTR
             TOS R0 MOV,
             R0 8 SLA,            \ register goes to left side
            *SP+ TOS MOV,
             TOS 00FF ANDI,
             TOS R0 SOC,          \ 'OR' this bytes together
             R0 8000 ORI,         \ set "write to register" mode bit
             RMODE @@ BL,
             TOS POP,
             NEXT,
             END-CODE

\ ===================================================================
\ T I - 9 9   S C R E E N   C O N T R O L  P R I M I T I V E S

CROSS-ASSEMBLING
\ These assembler routines manage the screen math at machine speed.
\ They are smaller and faster in ASM while still easy to understand.
\ Using these primitives and the VDP words CAMEL99 creates the rest of
\ video screen control in Forth.

\ Aug 31 2018,
\ CHANGED to read user variables correctly, via the workspace pointer WP.
\ 9900 Indexed addressing mode makes this almost as fast as indirect addressing
\ the variables.  It's all Multi-tasking friendly now

\ For reference, these are the offset values of the user vars.
\      30 USER: OUT
\      32 USER: VROW  32
\      34 USER: VCOL  34
\      2E USER: C/L

CODE: >VPOS ( col row -- vaddr) \ compute video address
             R1         STWP,
             TOS     R3  MOV,   \ this move to make best use of MPY
             2E (R1) R3  MPY,   \ multiply by chars/line. result goes to R4 ie: TOS
            *SP+     TOS ADD,   \ add col value to TOS
             NEXT,
             END-CODE

\ FAST user variable for screen driver
CROSS-ASSEMBLING
CODE: C/L@   ( -- n )            \ this is used 8 times in the KERNEL. Saves 24 bytes
             TOS        PUSH,    \ and is 50% faster than C/L @
             R1         STWP,
             2E (R1) TOS MOV,
             NEXT,
             END-CODE

\ make VCHAR go faster. clip vertical address value in VCHAR
CODE: VCLIP  ( lim char addr -- lim char addr)
             2 (SP) TOS CMP,
             LO IF,
                2 (SP) TOS SUB,
             ENDIF,
             NEXT,
             END-CODE

\ ===================================================================
CR .( KEY?  and  ?TERMINAL)
\ Camel99 interface to KSCAN. **CHANGED APR 29 2019**
\ It makes more sense to return false or the KEY value
\ See: KEY
CODE: KEY? ( -- ?)  \ *WARNING* it takes 1,128uS for KEY? scan to run
            TOS PUSH,
            TOS CLR,            \ TOS will be our true/false flag
            0 LIMI,
            83E0 LWPI,          \ switch to GPL workspace
            000E @@ BL,         \ call ROM keyboard scanning routine
            WRKSP0 LWPI,        \ return to Forth's workspace , interrupts are restored
            2 LIMI,
            837C @@ R0 MOVB,    \ read GPL status byte (=2000 if key pressed)
            NE IF,
                8374 @@ TOS MOV, \ read the key
            ENDIF,
            NEXT,               \ return
            END-CODE

\ *---------------------------------------------
\ * Call very fast built-in Fctn-4 test in console ROM
\   http://www.unige.ch/medecine/nouspikel/ti99/keyboard.htm
\ *---------------------------------------------
CODE: ?TERMINAL ( -- ?)    \ ~200uS, 16 bit ROM speed. Same name as TI-Forth
            R12     RPUSH,       \ save CRU address makes life simpler
            TOS     PUSH,
            TOS     CLR,
            0020 @@ BL,          \ Call ROM code, test FNCT 4 key press
            EQ IF,               \ if flag=0
               TOS  SETO,        \ KEY is pressed, TOS = -1
               BEGIN,
                  0020 @@ BL,    \ call rom routine
               NE UNTIL,         \ until key is released
            ENDIF,
            R12     RPOP,        \ Restore CRU address used by CAMEL Forth
            NEXT,
            END-CODE

\ l: _CURSR   DATA 005F            \ holds the cursor character default= '_'
\ CODE: CURS@   ( -- char)         \ return cursor or space for flashing cursor
\            TOS PUSH,
\           _CURSR @@ TOS MOV,    \ load the cursor char to TOS from memory
\           8378 @@ W MOV,       \ read interrupt timer to control flash speed
\           W 0018 ANDI,         \ AND it with HEX18. This mask made a pleasant looking flash
\           NE IF,               \ if <> 0
\                TOS BL LI,       \ change cursor character to blank
\           ENDIF,
\            NEXT,
\            END-CODE

CODE: BYE    ( -- )             \ From TI-Forth 1984 :-)
            83C4 @@ CLR,        \ clear interrupt vector
            0000 @@ BLWP,       \ ROM reset vector is at 0000
            END-CODE
