\ xfcc99 cross-compiler tms9902 rs232/1 DIRECT cru DRIVER 9Feb2019 bjf
\ CODE words are used to save kernel space by not needing the CRU library

\ These routines push the value in R12 onto the return stack
\ then restore it when returning to Forth.
\ This supports accessing other I/O devices while using the serial port.

\ Jul 30/2019  added CTS control in CKEY? for hardware handshaking
\ - CKEY

[CC] HEX [TC]
                   1300 CONSTANT: RS232/1     \ card address
[CC] RS232/1 40 +  [TC] CONSTANT: /TTY1       \ 40= uart#1,
\ [CC] RS232/1 80 + [TC] CONSTANT: /TTY2      \ 80= uart#2

\ 9902 control bits
[CC] DECIMAL
       13 EQU LDIR           \ "load interval register"
\ for reference...
\      16 CONSTANT: RTSON    \ request to send
\      18 CONSTANT: RIENB    \ rcv interrupt enable
\      21 CONSTANT: RXRL     \ receive register loaded bit
\      22 CONSTANT: TXRE     \ transmit register empty bit
\      27 CONSTANT: -DSR     \ NOT data set ready
\      28 CONSTANT: -CTS     \ NOT clear to send
       31 EQU RESET          \ 9902 reset bit

[CC] HEX

TARGET-COMPILING

VARIABLE: BPS    \ 0034 BPS T!   \ 9600 baud
VARIABLE: PROTO  \ 9300 PROTO T! \ 8 bits, no parity, 1 stops
VARIABLE: PORT
\ VARIABLE: CARD

\ 9900 sub-routines. *NOT* Forth words.
l: LEDON
         R12 RS232/1 LI,    \ select the card
         7 SBO,             \ turn LED on
         RT,
l: LEDOFF
         R12 RS232/1 LI,    \ select the card
         7 SBZ,             \ turn LED off
         RT,

\ * variables BPS and PROTO MUST BE SET CORRECTLY BEFORE USING OPEN-TTY *
CODE: OPEN-TTY  ( port -- ) \ Usage: /TTY1 OPEN-TTY
         R12 RPUSH,
         LEDON @@ BL,
         TOS R12 MOV,       \ load 9902 port address
         RESET SBO,         \ reset card
         TOS PORT @@ MOV,   \ set the port variable to use
         PROTO @@ 8 LDCR,   \ set protocol
         LDIR SBZ,          \ disable 9902 timer
         BPS @@ 0C LDCR,    \ set baud rate
         TOS POP,           \ refill TOS
         LEDOFF @@ BL,
         R12 RPOP,          \ restore R12
         NEXT,
         END-CODE

[CC] DECIMAL [TC]
\ this word turns on the LED when sending
CODE: CEMIT ( c -- )  \ 'com-emit"
         R12 RPUSH,
         LEDON @@ BL,
         PORT @@ R12 MOV,
         BEGIN,
           27 TB, EQ    \ test -DSR bit =0
         UNTIL,

         16 SBO,        \ set RTS
         BEGIN,
           22 TB, EQ    \ wait XBRE empty
         UNTIL,

         TOS SWPB,      \ put byte on the other side
         TOS 8 LDCR,    \ send 8 bits
         16 SBZ,        \ reset RTS
\ housekeeping on USER VARIABLES...
         R1      STWP,  \ get current user area address
         48 (R1) INC,   \ inc  OUT *bug* **DECIMAL OFFSET VALUES**
         52 (R1) INC,   \ inc  VCOL      **DECIMAL OFFSET VALUES**
         LEDOFF @@ BL,
         R12 RPOP,
         TOS POP,
         NEXT,
         END-CODE
\ ======================================================
\ 9902new uses an input Queue and will steal the machine
\ and enqueu chars, if characters are coming in faster than normal
\
HEX


VARIABLE: QHEAD            \ holds the last char rcv'd
VARIABLE: QTAIL 

 [CC] DECIMAL [TC]
CODE:  QKEY? ( -- C | 0 )     \  queued key handles overruns
         0 LIMI,
         R12 RPUSH,
         PORT @@ R12 MOV,      \ select active rs232 PORT. (>1340 CRU)
         TOS PUSH,
         QTAIL @@ TOS MOV,     \ tail pointer to
         BEGIN,
            21 TB,             \ test if char ready
         EQ WHILE,
            Q (TOS) 8 STCR,    \                                   52
            18 SBO,            \ clr rcv buffer, enable interrupts 12
            TOS INC,            \ bump the index                    10
            TOS QMASK ANDI,     \ wrap the index                    14
            TOS QTAIL @@ MOV,   \ save the index                    22
         REPEAT
         R12 RPOP,
         2 LIMI,
\ CODE QKEY? ( -- c | 0 )         \ 0 means queue empty
       TOS PUSH,                 \ make space in the TOS cache register
       TOS CLR,                  \ FLAG to say no char ready
       QHEAD @@ QTAIL @@ CMP,
       NE IF,                    \ head<>tail means char waiting
           QHEAD @@ W MOV,       \ get queue head index to W
           Q (W) TOS MOVB,       \ get char from Q -> TOS
           TOS SWPB,             \ move to other side of register
           W INC,                \ inc the index
           W QMASK ANDI,         \ wrap the index
           W QHEAD @@ MOV,       \ save the new index
       ENDIF,
       NEXT,                     \ 34 bytes
       ENDCODE

[CC] HEX [TC]
