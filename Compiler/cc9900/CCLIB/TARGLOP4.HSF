\ ========================================================================
\ ANS/ISO  T A R G E T   B R A N C H   C O M P I L E R S

\ These versions RUN IN THE TARGET system to compile loops and branches in the TI-99.
\ These versions do not use compile time checking like Fig-Forth to improve compile time speed

TARGET-COMPILING
: ?PAIRS   ( n1 n2 --) -  TS" Not finished"  ?ABORT ;  ( used by assembler only)

: AHEAD    ( -- addr)  HERE   0 , ;           \ leave adr for forward branch, compile empty cell

\ CAMEL Forth LEAVE stack pointer is called LP. It is initialized by QUIT
: >L        ( x -- ) ( L: -- x )  \ push x from Data stack to leave stack
            2 LP +!  LP @ ! ;     \ LP stack grows up

: L>        ( -- x )  ( L: x -- ) \ pop x from leave stack to Data stack
            LP @ @   -2 LP +! ;

\ ========================================================================
\ F I N I T E   L O O P   C O M P I L E R S
\                 -compile this-   - run this now-
: DO        ( -- ) ?COMP COMPILE <DO>     HERE 0 >L ;  XIMMEDIATE
: ?DO       ( -- ) ?COMP COMPILE <?DO>    HERE 0 >L ;  XIMMEDIATE

: LEAVE     ( -- ) ( L: -- addr )
            COMPILE UNLOOP   COMPILE BRANCH AHEAD >L ; XIMMEDIATE

\ -----------------------------------------------------------------------
\ RAKE  resolves branching out of DO/LOOPS that use LEAVE
\       CAMEL Forth calls this ENDLOOP... but it RAKEs the LEAVEs. Get it?

\ NOTE: We MUST put RAKE here because it uses the cross-compiler's
\       WHILE/REPEAT loop. We cannot CROSS COMPILE loops in our code AFTER we
\       define the TARGET system LOOPS below.

: RAKE      ( -- ) ( L: 0 a1 a2 .. aN -- )
            BEGIN  L> ?DUP WHILE  HERE OVER - SWAP !  REPEAT ; XIMMEDIATE

\ complete a DO loop
: LOOP      ( -- )  COMPILE <LOOP>   HERE - ,  RAKE ; XIMMEDIATE
: +LOOP     ( -- )  COMPILE <+LOOP>  HERE - ,  RAKE ; XIMMEDIATE

\ ========================================================================
\ C O N D I T I O N A L   B R A N C H E S
: IF        ( ? -- ) COMPILE ?BRANCH AHEAD ;          XIMMEDIATE
: THEN      ( -- )  ?COMP  HERE OVER - SWAP ! ;       XIMMEDIATE
: ELSE      ( -- )  COMPILE BRANCH AHEAD  SWAP HERE OVER - SWAP ! ; XIMMEDIATE

\ ========================================================================
\ I N F I N I T E   L O O P   C O M P I L E R S
: BEGIN     ( -- addr n) ?COMP HERE  ;            XIMMEDIATE
: AGAIN     ( -- )   COMPILE BRANCH  HERE - ,  ;  XIMMEDIATE
: UNTIL     ( ? -- ) COMPILE ?BRANCH HERE - ,  ;  XIMMEDIATE
: WHILE     ( ? -- ) T[COMPILE] IF    ;  XIMMEDIATE
: REPEAT    ( -- ) >R  T[COMPILE] AGAIN  R> T[COMPILE] THEN ; XIMMEDIATE
