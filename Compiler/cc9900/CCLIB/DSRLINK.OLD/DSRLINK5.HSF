\ DSRLNK in XFC99 cross-compiler, 9900 Assembler

\ version 5 tried to remove extra code. Not sure it's reliable

\ Source:
\ http://atariage.com/forums/topic/283914-specialized-file-access-from-xb/page-2
\ by InsaneMultitasker via Thierry Nouspikel

\ 130 bytes of code space use

[cc] HEX

TARGET-COMPILING
8C02 EQU VDPWA
8C00 EQU VDWWD
8800 EQU VDPRD
837C EQU STATUS

CROSS-COMPILING  XASSEMBLER DEFINITIONS
\ MACRO to simplify the VDP code
: VDPWA, ( reg -- )
       DUP           SWPB,   \ setup VDP address
       DUP VDPWA @@  MOVB,
       DUP           SWPB,
           VDPWA @@  MOVB,
                     NOP,  ;

CROSS-ASSEMBLING  XASSEMBLER DEFINITIONS
 A DUP refer: @@A    binder: @@A:  \ we need 1 more pre-defined label

\ ==== code begins here ====
TARGET-COMPILING

l: HEX20    20 BYTE,
l: HEXAA    AA BYTE,
l: PERIOD   2E BYTE,  \ '.'
              .EVEN
l: H2000  2000 DATA,
l: NAMBUF   6 TALLOT   \ allot 6 bytes in target memory

\ take some space in Forth DATA stack for a workspace
[CC] SP0 100 -    [TC] EQU DREGS

[CC] 5 2* DREGS + [TC] EQU DREG(5) \ compute address of register

CLR-JMPTABLE

l: DSR1
      *R14+     R5   MOV,    \ adjust RTWP address by 2 to skip '8'
       HEX20 @@ R15  SZCB,   \ RTWP status: EQ flag set to false
       8356 @@  R0   MOV,    \ [PAB FNAME] -> R0 (FNAME is counted string)
       R0       R9   MOV,
       R9       -8   ADDI,   \ R9 = [PAB FLG]

\ copy VDP FNAME ->namebuf upto '.' character
       R0           VDPWA,   \ set [PAB FNAME] as VDP address
       VDPRD @@ R1   MOVB,   \ read FNAME length into R1
       R1       R3   MOVB,   \ DUP length byte to R3
       R3       08   SRL,    \ shift byte to other side
       R4            SETO,   \ R4 = -1
       R2   NAMBUF   LI,     \ R2 is ^namebuf
  BEGIN,
       R0            INC,    \ point to next fname VDP address
       R4            INC,    \ counter starts at 0
       R4       R3   CMP,    \ is counter = fnamelength
       @@1           JEQ,    \ if true goto @@1:
       R0          VDPWA,    \ set VDP address
       VDPRD @@ R1  MOVB,    \ read next VDP char from fname
       R1      *R2+ MOVB,    \ copy to namebuf & inc pointer
       R1 PERIOD @@ CMPB,    \ is it a '.'
  EQ UNTIL,                  \ until '.' found  (34 bytes)

@@1:   R4        R4  MOV,    \ test R4=0
       @@6           JEQ,    \ no device, goto ERROR6
       R4        07  CMPI,   \ is dev name length>7
       @@8           JGT,    \ name to big goto @@8 (same as @@6)
       83D0 @@       CLR,    \ erase magic CRU addr. holder
       R4   8354 @@  MOV,    \ put length in magic address
       R4            INC,    \ +1 points to '.' character
       R4   8356 @@  ADD,    \ add offset to PAB address (makes "real PAB")

\ ==== GPL WORKSPACE ====
       83E0         LWPI,    \ SROM (search ROM device list)
       R1           CLR,     \ MAGIC GPL REGISTER=0
       R12   0F00   LI,      \ set 1st address 1 below 1st CARD
@@A:  \ scan for I/O cards
    BEGIN,
       R12   R12   MOV,
       NE IF,              \ if card address<>0
           00 SBZ,         \ turn off card
       ENDIF,
       R12    0100  ADDI,  \ advance CRU to next card
       83D0 @@      CLR,   \ erase magic address
       R12    2000  CMPI,  \
       @@5          JEQ,   \ no more cards. goto ERROR5

\ card activation...
       R12  83D0 @@ MOV,   \ save card CRU in magic address
       00           SBO,   \ turn on the card
       R2   4000    LI,    \ ROM start addr -> R2
      *R2  HEXAA @@ CMPB,  \ test for card present
    EQ UNTIL,              \ loop until card is found
       DREG(5) @@ R2 ADD,
       @@9          JMP,


@@3: \ scan ROM linked list for code address
    BEGIN,
       83D2 @@   R2 MOV,   \ start of ROM device list -> R2
       00           SBO,   \ turn card on
@@9:  *R2       R2  MOV,   \ Fetch next link
       @@A          JEQ,   \ if link=0 goto @@A (NEXT CARD)
       R2  83D2 @@  MOV,   \ save link address in magic address
       R2           INCT,  \ R2 = code pointer
      *R2+      R9  MOV,   \ fetch code address ->R9
       8355 @@  R5  MOVB,  \ dev length->R5
       @@4          JEQ,   \ if 0 we have a string match
       R5      *R2+ CMPB,  \
    EQ UNTIL,              \ JNE DLOOP3

\ find dev string match
       R5       08  SRL,   \ shift length byte
       R6  NAMBUF   LI,    \ R6 hold ^nambuf
    BEGIN,                
       *R6+   *R2+  CMPB,  \ compare namebuf to ROM string
        @@3         JNE,   \ if mismatch goto @@3
        R5          DEC,   \ dec the counter register
    EQ UNTIL,

@@4: \ run DSR ROM code
       R1            INC, \ ?? WHY ??
      *R9            BL,   \ call the DSR code
       @@3           JMP,  \ error! try next card
\   -- DSR returns here if no errors --
       00            SBZ,  \ Turn off the card
\ ==== DSR Workspace ====       
       DREGS         LWPI,
       R9           VDPWA, \ [PAB FLG] set as vdp address
       VDPRD @@  R1  MOVB, \ read error value to DREGS R1
       R1 0D         SRL,  \ shift to get error bits only
       @@7           JNE,  \ if error<>0 goto @@7
                    RTWP,  \ else return to Forth workspace

\ error condition handlers
@@5:    DREGS        LWPI, \ card not found
@@6: @@8:  R1      CLR, \ error code = -1
@@7:    R1   8 (R13) MOV,  \ put error code in Forth TOS (r4)
        HEX20 @@ R15 SOCB, \ RTWP status: EQ flag set to true
                     RTWP,
\    ====== DSR LINK ENDS======

\ the vector for BLWP
l: DLNK   DREGS T, DSR1 T,

CODE: DSRLNK  ( -- ior)
        TOS PUSH,          \ space for error code on Forth stack
        TOS CLR,           \ clear error code
        0 LIMI,
        DLNK @@      BLWP,
        8            DATA,
        2 LIMI,
        NEXT,
        END-CODE


[TC]