\ CRU support from TI-Forth, for CAMEL99   BJFOX 6FEB2018

\ Since CAMEL99 reserves R12 for CRU use I could factor out
\ setting R12 as separate word. This saves 24 bytes versus
\ the TI-Forth implementation.

\  HEX 1E00 2+ CRU! TB ( -- flag)

CROSS-ASSEMBLING

\ 4 words are the minimal CRU words I need to run the DISK system
CODE: CRU! ( addr -- )  \ set the CRU base address for CRU words
         TOS R12 MOV,   \ load CRU adr to R12
         TOS POP,       \ refill TOS register
         NEXT,
         END-CODE

CODE: CRU@  ( -- addr ) \ read R12
        TOS PUSH,
        R12 TOS MOV,
        NEXT,
        END-CODE

CODE: 0SBO   ( -- )  0 SBO, NEXT,   END-CODE     \ faster but less versatile
CODE: 0SBZ   ( -- )  0 SBZ, NEXT,   END-CODE

0 [IF]
CODE: SBO ( c -- )     \ you must set the CRU address first
         TOS 1D00 ORI,  \ create the instruction in TOS
         TOS X,         \ execute the instruction in TOS
         TOS POP,
         NEXT,
         END-CODE

CODE: SBZ ( c -- )
         TOS 1E00 ORI,  \ create the instruction in TOS
         TOS X,         \ execute the instruction in TOS
         TOS POP,
         NEXT,
         END-CODE

CODE: TB ( c -- ? )    \ slower but full function
         TOS R0 MOV,
         TOS CLR,
         R0 1F00 ORI,  \ create the  instruction in R0
         R0 X,         \ execute the instruction in R0
         EQ IF,
            TOS SETO,
         ENDIF,
         NEXT,
         END-CODE

\ CODE: TB0  ( -- ?)   \ little faster.
\           TOS PUSH,
\           TOS CLR,
\           0 TB,
\           EQ IF
\              TOS SETO,
\           ENDIF
\           NEXT,
\           END-CODE

\ CODE:  WAIT-TB0  ( n -- ?)  \ fastest test is ASM loop.

\ CAMEL99 simplifies CRU access by reading and writing 8 bits
\ at a time.

\ write 8 bits to IO address set by CRU!
CODE: PC!    (  c  -- )
              TOS 8 LDCR,    \ send 8 bits to CRUaddr
              TOS POP,       \ refill TOS
              NEXT,
              END-CODE

\ read 8 bits from IO address set by CRU!
CODE: PC@    ( CRUadr -- c)
              TOS PUSH,
              TOS 8 STCR,    \ READ 8 bits from CRU into TOS register
              TOS 8 SRL,
              NEXT,
              END-CODE

CODE: LDCR ( n1 n2 -- )
\ TI-FORTH versions with CRU! removed
\ Performs a TMS9900 LDCR instruction. The value n1 is transferred
\ to the CRU with a field width of n2 bits.
        *SP+   R0 MOV,     \ n1 in R0
         TOS 000F ANDI,    \ n2 in TOS
         NE IF,
            TOS 8 CMPI,
            LTE IF,
                R0 SWPB,
            ENDIF,
         ENDIF,
         TOS 06 SLA,
         TOS 3000 ORI,    \ create R0 xx LDCR, instuction in TOS
         TOS X,           \ execute instruction in TOS
         TOS POP,
         NEXT,
         END-CODE

-1 [IF]
CODE: STCR ( n1 --- n2 )
\ Performs the TMS9900 STCR instruction. The bit count is n1.
\ The CRU base is set first with CRU! The returned value is n2.
         TOS R1 MOV,   \ bit count->R1
         TOS CLR,      \ TOS will hold output bits
         R1 000F ANDI,
         R1 R2 MOV,
         R1 06 SLA,
         R1 3400 ORI,  \ create STCR instuction in R1
         R1 X,         \ execute instruction in R1
         R2 R2 MOV,
         NE IF,
            R2 08 CMPI,
            LTE IF,
                TOS SWPB,
            ENDIF,
         ENDIF,
         NEXT,
         END-CODE
[THEN]

[CC] .( CRU words loaded...)

\    : TEST   CRU!  BEGIN  TB .  ?TERMINAL UNTIL ;
\    : CRU@   CRU!  BEGIN  8 STCR .   ?TERMINAL UNTIL ;
