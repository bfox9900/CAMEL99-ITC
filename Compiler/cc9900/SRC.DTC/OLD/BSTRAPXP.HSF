\ Final additions to the cross-compiler

\ NOTE: After all the primitives are compiled we use them to create the
\       final cross-compiler words for branching, looping and cross-
\       compiling versions of colon and semi-colon

\ ========================================================================
\ F A S T  C R O S S - C O M P I L E R  B R A N C H I N G  A N D  L O O P I N G

\ these versions RUN IN THE CROSS-COMPILER to compile loops and branches
\ but... they compile the loops and branches in the TARGET memory.
\ It's not popular with ANS Forth, but I have included ?PAIRS type
\ error checking during compilation.

\ *** FOR DTC IMPLEMENTATION ***
\ DTC changes these words because DTC interprets a machine code address directly
\ This means we can compile the address in hsram directly into a Forth word.

\ These 2 words compile the high speed RAM address of ?branch and branch into a
\ a word that uses IF/ELSE/THEN or BEGIN/UNTIL etc.  loops


CROSS-COMPILING
: ?BRANCH,    [ _?BRANCH >HSRAM ] LITERAL T, ;
: BRANCH,     [ _BRANCH  >HSRAM ] LITERAL T, ;

\ branch compilers: these make the code look clearer by naming the direction
: TAHEAD    ( -- addr)  THERE   0 T, ; \ leave adr for forward branch, compile empty cell
: TBACK     ( addr -- ) THERE   - T, ; \ compile a branch offset (ADDR-HERE = OFFSET we jump to)
: TRESOLVE   THERE OVER - SWAP T! ;

CR .( branch cross-compilers if then else etc...)

\ SIMPLIFIED ANS FORTH LOOPS
: THEN  ( addr -- ) TRESOLVE ;  IMMEDIATE ( 14 bytes)
: BEGIN   THERE ;                          IMMEDIATE
: IF       ?BRANCH, TAHEAD ;         IMMEDIATE
: ELSE     ?BRANCH, TAHEAD   SWAP   TRESOLVE ; IMMEDIATE
: UNTIL    ?BRANCH, TBACK ;               IMMEDIATE
: AGAIN    BRANCH,  TBACK ;               IMMEDIATE
: WHILE    ?BRANCH, TAHEAD  SWAP ; IMMEDIATE
: REPEAT   BRANCH,  TBACK   TRESOLVE ; IMMEDIATE

\ finite loop cross-compilers
: do            cc['] <do>   <mark(t)  3  ; immediate
: ?do           cc['] <?do>  <mark(t)  3  ; immediate

: loop          3 ?PAIRS  cc['] <loop>   <resolve(t) ; immediate
: +loop         3 ?PAIRS  cc['] <+loop>  <resolve(t) ; immediate

\ ========================================================================
\ C R O S S - C O M P I L I N G   C O L O N   &   S E M I - C O L O N
cr .( cross compiler ':' and ';')

\ In the following definiton we use the HOST: ;HOST compiler words to create
\ new versions of : and ; that cross-compile FORTH words into the TARGET

host: :                             \ this is the CROSS compiler's ':'
                !CSP                \ record the "current stack position" (used later)
                ]T                  \ set XSTATE to true ie: turn on the compiler
                <colon:>            \ put the word name in the Target dictionary and the mirror vocabulary
                THIDE               \ set the 'smudge' bit so we can't find this word during compilation
                TINTERPRET          \ run the cross compiler/interpreter on the input stream
;host

?stk

host: ;                            \ this the CROSS-compiler's ';'
                TREVEAL            \ un-smudge the word so it can be found in the dictionary
                'EXIT cfa,
                ?CSP               \ check is stack is the same place as when we started the definition
                T[                 \ reset XSTATE (TARGET STATE) to interpreting
;host   immediate

?stk

\ ========================================================================
\ F I N A L   T A R G E T -  C O M P I L I N G   C O L O N  &  S E M I - C O L O N
\ These alias names are used at the very end of the code to define the
\ FINAL ':' and ';' that will be the versions that actually run in the
\ TARGET Forth. (yes it's confusing) Renaming them allows me to remain sane.
\
SYNONYM x:   :                        \ "TARGET-compiling colon"
SYNONYM ;x   ;  IMMEDIATE             \ "TARGET-compiling semi-colon"

\ .XMEM                                 \ show the cross compiler memory. It should be empty.


\ : XIMMEDIATE    ( -- )
\                immbit XLATEST @ nfa>imm tc! ;  \ set the immediate bit in a target word ...
                                                 \ in the TARGET MEMORY SEGMENT!!

\                  C R O S S    C O M P I L E R    E N D S
\ /\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
