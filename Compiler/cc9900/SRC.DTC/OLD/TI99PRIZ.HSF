\ ===================================================================
\ T I - 9 9   S C R E E N   C O N T R O L  P R I M I T I V E S
\ These assembler routines manage the screen math at machine speed.
\ They are smaller and faster in ASM while still easy to understand.
\ Using these primitives and the VDP words CAMEL99 creates the rest of
\ video screen control in Forth.
\ We took a Forth approach to naming VDP memory routines.
\ So TI name, VSBR, becomes VC@  and VSBW becomes VC!.
\ VMBW and VMBR become VWRITE AND VREAD.
\ We also added a new one V! and V@ that load and store 16 bit numbers to VDP.

\ I embraced the Forth paradigm so these routines are created as
\ Forth words with stack based parameter passing. This gives us the freedom
\ to call these fast routines directly from Forth.
\ With these fast primitives we can write most of the VDP driver
\ in Forth and still get excellent performance.

\ Aug 31 2018,
\ CHANGED to read user variables correctly, via the workspace pointer WP.
\ 9900 Indexed addressing mode makes this almost as fast as indirect addressing
\ the variables.  It's all Multi-tasking friendly now
\ April 2020  On advice of Tursi, Atariage, I disable interrupts when VDP
\             address is set then restore them at the end of the routine.
\ Feb 2021    - Changed all address setting to use index addressing for
\              odd numbered bytes loading into VDP ports.

[CC] CR ." V D P  C H I P  I N T E R F A C E"
TARGET-COMPILING
\ VSBR Forth style, on the stack
CODE VC@   ( VDP-adr -- char )  \ Video CHAR fetch
            0 LIMI,
            R1 STWP,
            9 (R1) 8C02 @@ MOVB, \ write odd byte from TOS ie R4
            TOS 8C02 @@ MOVB,    \ write even bytes from TOS
            TOS CLR,
            VDPRD @@ 9 (R1) MOVB, \  READ char from VDP RAM into TOS
            2 LIMI,
            NEXT,
            ENDCODE

CODE V@   ( VDPadr -- n)        \ video fetch 16bit int
            0 LIMI,
            R1 STWP,
            9 (R1) 8C02 @@ MOVB, \ write odd byte from R3
            TOS 8C02 @@ MOVB,
            R3 VDPRD LI,         \ put the VDP read port address in R3. 12.9% faster
           *R3  TOS MOVB,        \ READ char from VDP RAM into TOS
           *R3  9 (R1) MOVB,     \ READ 2nd char from VDP RAM into TOS
            2 LIMI,
            NEXT,
            ENDCODE

\ R0  VDP address
\ R1  CPU RAM address
\ R4  byte count
CODE VREAD   ( VDP-adr RAM-addr cnt  -- )
          R1 POP,              \ pop buffer addr. to R1
          R0 POP,              \ pop VDP addr. to R0
          TOS TOS MOV,
          NE IF,
                0 LIMI,
                R2 STWP,
                1 (R2) 8C02 @@ MOVB,   \ write odd byte from R3
                R0 8C02 @@ MOVB,
L: VMBR         TOS INC,
                TOS -2 ANDI,
                R3 VDPRD LI,      \ put VDP read port address in R3. 12.9% faster
                BEGIN,
                  *R3 *R1+ MOVB,  \ READ char from VDP RAM into CPU RAM , autoINC
                  *R3 *R1+ MOVB,  \ READ char from VDP RAM into CPU RAM , autoINC
                  TOS DECT,
               EQ UNTIL,
               2 LIMI,
          ENDIF,
          TOS POP,                \ refill TOS
          NEXT,
          ENDCODE

\ ===================================================================
CR ." V D P   W R I T E"  ( VMBW )
L: WMODE  ( Vaddr -- Vaddr)
           0 LIMI,
           R1 STWP,
           9 (R1) 8C02 @@ MOVB,   \ write odd byte from TOS (ie: R4)
           TOS 4000 ORI,
           TOS 8C02 @@ MOVB,
           RT,

\ R0  VDP address
\ R8  CPU RAM address
\ R0  byte count
CODE VWRITE  ( RAM-addr VDP-addr cnt -- )
           TOS R0 MOV,         \ cnt in R0
           TOS POP,            \ vaddr to TOS
           R8 POP,             \ cpu addr to R8
           R0 R0 MOV,
           NE IF,
              WMODE @@ BL,
l: VMBW       R3 VDPWD LI,     \ vdp addr. in a reg. makes this 12.9% faster
              BEGIN,
                *R8+ *R3 MOVB, \ write byte to vdp write port
                 R0 DEC,
              EQ UNTIL,
              2 LIMI,
           ENDIF,
           TOS POP,            \ refill top of stack cache register
           NEXT,               \ return to Forth
           ENDCODE

CODE VC! ( char vaddr --)
          WMODE @@ BL,
          TOS POP,
          9 (R1) VDPWD @@ MOVB,  \ Odd byte R4, write to screen
          TOS POP,               \ refill TOS
          2 LIMI,
          NEXT,
          ENDCODE

CODE V! ( n Vaddr  -- )      \ Video store 16BIT int
         WMODE @@ BL,         \ branch to setup VDP write address
         R3 VDPWD LI,
         TOS POP,
         TOS  *R3 MOVB,       \ even byte
         9 (R1) *R3 MOVB,     \ Odd byte R4, write to screen
         TOS POP,             \ refill TOS
         2 LIMI,
         NEXT,
        ENDCODE

\ For reference, these are the offset values of the user vars.
\      2E USER: C/L
\      30 USER: OUT
\      32 USER: VROW
\      34 USER: VCOL

7E USER: VPG  \ Free space in scratchpad RAM used for VDP page# USER VARIABLE

CODE CPUT ( char -- ?)  \ put a char at cursor position, return eol flag
            TOS  W MOV,
            R1         STWP,    \ workspace is USER area base address
            32 (R1) R3 MOV,     \ vrow->r3
            2E (R1) R3 MPY,     \ vrow*c/l->R4
            34 (R1) R4 ADD,     \ add vcol
            7E (R1) R4 ADD,
            WMODE @@ BL,
            W TOS MOV,
            9 (R1) VDPWD @@ MOVB,  \ Odd byte R4, write to screen
            2 LIMI,
            TOS CLR,
            34 (R1)  INC,          \ bump VCOL
            34 (R1)  2E (R1) CMP,  \ compare VCOL = C/L
            EQ IF,
                TOS SETO,          \ set true flag
            ENDIF,
            NEXT,
            ENDCODE

CODE (CR) ( -- n)   \ inc VROW , return value
           TOS PUSH,
           R1 STWP,
           34 (R1) CLR,     \ VCOL OFF
           32 (R1) INC,     \ VROW 1+!
           32 (R1) TOS MOV,
           NEXT,
           ENDCODE

\ VDP FILL
\ TOS VDP address
\ R0  byte count
\  W  ascii char
CODE VFILL ( VDP-addr count char-- )
           TOS SWPB,             \ fix the TMS9900 byte order
           TOS W MOV,
           R0 POP,               \ R0=count
           TOS POP,              \ VDP-addr popped into TOS
           WMODE @@ BL,          \ setup VDP write address IN R0
           R3 VDPWD LI,          \ vdp addr. in a reg. makes this 12.9% faster
           BEGIN,
              W *R3 MOVB,        \ write byte to vdp ram
              R0 DEC,            \ dec the byte counter
           EQ UNTIL,             \ jump back if not done
           2 LIMI,
           TOS POP,
           NEXT,
           ENDCODE

\ * VDP write to register. Kept the TI name
CODE VWTR   ( c reg -- )         \ Usage: 5 7 VWTR
           TOS SWPB,              \ register goes to left side
          *SP+ TOS ADD,
           0 LIMI,
           R1 STWP,
           9 (R1) 8C02 @@ MOVB,   \ write odd byte from R4
           TOS 8000 ORI,          \ set bit for write to VDP register
           TOS 8C02 @@ MOVB,      \ write the even byte
           2 LIMI,
           TOS POP,
           NEXT,
           ENDCODE

CROSS-ASSEMBLING
CODE >VPOS ( col row -- vaddr) \ compute a VDP screen address
           R1         STWP,
           TOS     R3  MOV,   \ this move to make best use of MPY
           2E (R1) R3  MPY,   \ multiply by chars/line. result goes to R4 ie: TOS
          *SP+     TOS ADD,   \ add col value to TOS
           VPG @@  TOS ADD,   \ add Video page offset
           NEXT,
           ENDCODE

\ FAST user variable for screen driver
CROSS-ASSEMBLING
CODE C/L@   ( -- n )        \ this is used 8 times in the KERNEL. Saves 24 bytes
          TOS         PUSH,  \ and is 50% faster than C/L @
          TOS         STWP,
          2E (TOS) TOS MOV,
          NEXT,
          ENDCODE

\ ===================================================================
CR .( KSCAN KEY?  and  ?TERMINAL)
\ Camel99 interface to KSCAN. *Modified 13Jun2020 to save/restore GPL R11
\ See: KEY  in the Camel99 Kernel
CODE KEY? ( -- ?)  \ *WARNING* it takes 1,128uS for KEY? scan to run
          TOS PUSH,
          TOS CLR,            \ TOS will be our true/false flag
          0 LIMI,
          TOS 837C @@ MOVB,   \ clear GPL flags
          83E0 LWPI,          \ switch to GPL workspace
          R11 83BE @@ MOV,    \ save in empty scratch PAD location
          000E @@ BL,         \ call ROM keyboard scanning routine
          83BE @@ R11 MOV,
          WRKSP0 LWPI,        \ return to Forth's workspace , interrupts are restored
          837C @@ R1 MOVB,    \ read GPL status byte (=2000 if key pressed)
          R1  3 SLA,          \ check the key bit
          OC IF,              \ if carry flag set
             8374 @@ TOS MOV, \ read the key
          ENDIF,
          2 LIMI,
          NEXT,               \ return
          ENDCODE

\ *---------------------------------------------
\ * Call very fast built-in Fctn-4 test in console ROM
\   http://www.unige.ch/medecine/nouspikel/ti99/keyboard.htm
\ *---------------------------------------------
CODE ?TERMINAL ( -- ?)    \ ~200uS, 16 bit ROM speed. Same name as TI-Forth
          R12     RPUSH,       \ save CRU address makes life simpler
          TOS     PUSH,
          TOS     CLR,
          0020 @@ BL,          \ Call ROM code, test FNCT 4 key press
          EQ IF,               \ if flag=0
             TOS  SETO,        \ KEY is pressed, TOS = -1
             BEGIN,
                0020 @@ BL,    \ call rom routine
             NE UNTIL,         \ until key is released
          ENDIF,
          R12     RPOP,        \ Restore CRU address used by CAMEL Forth
          NEXT,
          ENDCODE

CODE BYE   ( -- )              \ From TI-Forth 1984 :-)
          83C4 @@ CLR,        \ clear interrupt vector
          0000 @@ BLWP,       \ ROM reset vector is at 0000
          ENDCODE
