\   _____          __  __ ______ _     ___   ___
\  / ____|   /\   |  \/  |  ____| |   / _ \ / _ \
\ | |       /  \  | \  / | |__  | |  | (_) | (_) |
\ | |      / /\ \ | |\/| |  __| | |   \__, |\__, |
\ | |____ / ____ \| |  | | |____| |____ / /   / /
\  \_____/_/    \_\_|  |_|______|______/_/   /_/
\
\  _____ _______ _____   ______ ____  _____ _______ _    _
\ |  __ \__   __/ ____| |  ____/ __ \|  __ \__   __| |  | |
\ | |  | | | | | |      | |__ | |  | | |__) | | |  | |__| |
\ | |  | | | | | |      |  __|| |  | |  _  /  | |  |  __  |
\ | |__| | | | | |____  | |   | |__| | | \ \  | |  | |  | |
\ |_____/  |_|  \_____| |_|    \____/|_|  \_\ |_|  |_|  |_|
\
\

\ Copyright (c) 2018 Brian Fox
\ KILWORTH Ontario Canada
\ brian.fox@foxaudioresearch.ca
\ This program is free software; you can redistribute it and/or modify
\ it under the terms of the GNU General Public License as published by
\ the Free Software Foundation; either version 3 of the License, or
\ (at your option) any later version.
\ You should have received a copy of the GNU General Public License
\ along with this program.  If not, see <http://www.gnu.org/licenses/>.
\
\ The work derived from CAMEL Forth under the GNU General Public License.
\ CamelForth (c) 2009 Bradford J. Rodriguez.
\ Commercial inquiries for Camel Forth should be directed to:
\ 115 First St., #105, Collingwood, Ontario L9Y 4W3 Canada
\ or via email to bj@camelforth.com

\ APR 2020  V2.59B  changes move to DTC code

HEX
[undefined] XASSEMBLER
[if] cr ." TI-99 Cross Assembler not loaded" ABORT
[then]


\ ======================================================================
\ M E M O R Y   U S A G E   D E F I N I T I O N S
CROSS-COMPILING
HEX
       0FFFE   EQU EMEM    \ EMEM = "end of memory"
   EMEM 0080 - EQU 'TIB    \ ADDRESS OF Terminal Input Buffer
   EMEM 'TIB - EQU TIBSIZE \ 128 bytes

\ ======================================================================
\ Create FORTH stacks
HEX
     'TIB 2 -   EQU SP0    \ FORTH DATA stack base address
     'TIB 100 - EQU RP0    \ FORTH RETURN stack base address

\ ========================================================================
\       CAMEL99 memory map
\     +--------------------+ $FFFF end of memory
\     |          TIB       | $FF02
\     +--------------------+ $FF00    -------------
\     |                    |                .
\     |                    |                .
\     |                    |                .
\     |                    |                .
\     |                    |                .
\     |                    |                .
\     |                    |                .
\     |                    |                .
\     |    USER PROGRAM    |        24K program space
\     |        ~16K        |                .
\     +--------------------+                .
\     |                    |                .
\     |       CAMEL99      |                .
\     |       KERNEL 8K    |                .
\     +--------------------+  $A000 (hi-RAM) Forth Dictionary begins here
\     |  MEM mapped device |
\     +--------------------+ $83FF
\     |  CPU hi-speed RAM  |
\     +--------------------+ $8300  Camel99 workspace registers and user variables
\     |      Cartridge     |
\     |      GROM/ROM      |
\     +--------------------+ $6000
\     |     Peripheral     |
\     |        ROMS        |
\     +--------------------+ $4000             --------
\     +vvvvvvvvvvvvvvvvvvvv+ $3FFE RP0            .
\     | return stack       |                      .
\     +vvvvvvvvvvvvvvvvvvvv+ $3F80 SP0            .
\     | parameter stack    |                      .
\     |    DSR WORKSPACE   |                      .
\     |                    |                      .
\     |                    |               8K low mem block
\     |    HEAP MEMORY     |                      .
\     |   ^^^^^^^^^^^^^    |                      .
\     |--------------------| $2100            ---------
\     |   TI O/S USAGE     |
\     +--------------------+ $2000
\     |                    |
\     |   CONSOLE ROMS     |
\     +--------------------+ $0000

\ ========================================================================
\ load cross-compiling versions of code: variable: constant: user:  :

 INCLUDE CC9900\compiler\dtcTYPES.HSF

\ ========================================================================
\ C O D E   P R I M I T I V E S
\ [CC] is short form for CROSS-COMPILING. (disables TARGET-COMPILING [TC] )

[CC] cr .( Compile Forth Assembler primitives ...)  \ This is a talking comment.
                                                    \ It reports what's happening
                                                    \ during compilation
 INCLUDE CC9900\SRC.DTC\9900DTBL.HSF   \ direct threaded primitives using BL instruction
 INCLUDE CC9900\SRC.DTC\TI99PRIZ.HSF  \ faster VDP primitives

\ ========================================================================
\ RESOLVE CODE WORD FORWARD REFERENCES FOR CROSS-COMPILER

\ The words beginning with ' are place holders used by the cross-compiler.
\ At compile time these words compile their value into the TARGET code.
\ Below we give them the execution token (XT) of their respective ASM WORDS.
[CC]
   EXIT2  RESOLVES 'EXIT
   ENTR   RESOLVES 'DOCOL
T' LIT   RESOLVES 'LIT
 _DOVAR   RESOLVES 'DOVAR
  _DOCON   RESOLVES 'DOCON
  _DOUSER  RESOLVES 'DOUSER
  _DODOES  RESOLVES 'DODOES

\ ========================================================================
\ T A R G E T  S T A T E

TARGET-COMPILING

   VARIABLE: STATE       \ Create the variable in target space. We will use it as the Cross-compiler's state variable
                         \ TARGET variables function in the HOST Forth!

   STATE [CC] TO XSTATE  \ Now we take that address from the stack and store it in CROSS-COMPILER value called XSTATE
                         \ Now when we use XSTATE we will be toggling the value of STATE in the target memory
                         \ Why? When I did this I didn't know how best to make a cross-compiler

\ ========================================================================
\ C R O S S   C O M P I L E R   B O O T - S T R A P P I N G

\ The words in this file "bootstrap" the compiler.
\ They allow the compiler to do things before they are defined in the
\ Target system.  IF,ELSE,THEN, BEGIN,WHILE,REPEAT,UNTIL ':'  ';'
\ are all defined in the BOOTSTRP,HSF file.

CROSS-COMPILING

INCLUDE CC9900\CCLIB\BOOTSDTC.HSF  \ it was simpler to keep this in a separate file


\                  ***  P R E - A M B L E   E N D S   ***
\ /\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\

\ ***********************************************************************
\           T A R G E T   F O R T H   S Y S T E M   B E G I N S
\ ***********************************************************************

\ ========================================================================
\ S Y S T E M   C O N S T A N T S

CROSS-COMPILING HEX
cr .( Constants and Variables...)

TARGET-COMPILING
\ ASM/Equate       Forth Name
\ -----------      ------------
 'TIB     constant: TIB
 SP0      constant: SP0
 RP0      constant: RP0
 TIBSIZE  constant: TIB#

\ Utility constants
        0 constant: FALSE
       -1 constant: TRUE
        0 constant: 0
        1 constant: 1
        2 constant: 2
       20 constant: BL

\ ======================================================================
\ U S E R   V A R I A B L E S
\ CAMEL99 uses space after workspace for user vars.
\ User variables begin at >8320 for the primary Forth task
[CC] HEX [TC]

      20 USER: TFLAG
      22 USER: JOB
      24 USER: DP
      26 USER: HP
      28 USER: CSP
      2A USER: BASE
      2C USER: >IN
      2E USER: C/L
      30 USER: OUT
      32 USER: VROW
      34 USER: VCOL
      36 USER: 'KEY     \ for vectored char input
      38 USER: 'EMIT    \ for vectored char output
      3A USER: LP
      3C USER: SOURCE-ID
      3E USER: 'SOURCE
\      40 USER: -------          \ used by 'SOURCE

      46 USER: TPAD

\ TI-99 system memory locations
\  8374 constant: KUNIT#  \ byte
   837C constant: GPLSTAT \ byte

\ These system variables control cold starting the system
variable: LATEST
variable: ORGDP
variable: ORGLAST
variable: BOOT

[CC] DECIMAL [TC]
   0024 constant: L/SCR

[CC] HEX [TC]
variable: VMODE
variable: L0  [CC] 3 CELLS TALLOT  [TC]
variable: ^PAB
variable: LINES
variable: C/SCR
variable: 'IV    \ interpretor vector. Hold addess of <INTERPRET>
variable: H
variable: VP
variable: CURS    [CC] 205F CURS T! [TC]
variable: VTOP


?stk
\ ==============================================
[CC] cr .( Hi-level FORTH Primitives...)
\ For DTC Forth we code as much as possible in Assembler.
\ This save 4 bytes per definition in the header AND it's faster too.

TARGET-COMPILING

\ Code words save 4 bytes vs Forth in DTC and are FASTER!
CODE: HERE ( -- addr) TOS PUSH,   DP @@ TOS MOV,  NEXT, END-CODE
CODE: ALLOT ( n -- )  TOS  DP @@ ADD,  TOS POP,  NEXT, END-CODE
: ,         ( n -- )  HERE ! 2 ALLOT ;
: COMPILE,  ( n -- )  , ;
: C,        ( n -- ) HERE C! 1 ALLOT  ;
: ALIGN     ( -- )   HERE ALIGNED DP ! ;
: PAD       ( -- addr) HERE TPAD @ + ;

: COMPILE   ( -- )  R> DUP 2+ >R @ COMPILE, ;
: IMMEDIATE ( --)  01 LATEST @ 1-  C! ;
\ : LITERAL   ( n -- n|~) STATE @ IF  'LIT ,  ,  THEN ; XIMMEDIATE
: LITERAL   ( n -- n|~) STATE @ IF  COMPILE LIT  ,  THEN ; XIMMEDIATE

CODE ]     ( -- ) STATE @@ SETO,  NEXT, END-CODE
CODE [     ( -- ) STATE @@ CLR,   NEXT, END-CODE  XIMMEDIATE

: DEPTH ( -- n )  SP0 SP@ 2+ - 2/ ;

\ ******  SPECIAL FOR DTC ****************
CODE: >BODY ( cfa -- pfa) *TOS+ *TOS+ MOV, NEXT, END-CODE   \ 4+ CODE trick

\ ========================================================================
\ PAB base address

\ >8370 contains highest useable VDP address for the TI-99 O/S
\ To identify end of VDP RAM that address has 'AA' in it.
\ We can't touch that byte so the pab stack base address starts 2 bytes below
\ : VDPTOP  ( -- n) 8370 @ 2- ;
CODE: VDPTOP   TOS PUSH,  8370 @@ TOS MOV,  TOS DECT, NEXT, END-CODE


[CC] cr .( Stack primitives ...)  [tc]
\ ========================================================================
\ S T A C K   P R I M I T I V E S
\ most stack primitives have been implemented in ASSEMBLER for speed

\  : TUCK  SWAP OVER ;
 CODE: TUCK  ( w1 w2 --  w2 w1 w2 ) \ same size as Forth
        *SP   R1 MOV,
         TOS *SP MOV,
              R1 PUSH,
         NEXT,
         END-CODE

 \ these make compiling 1% faster but are 14 bytes bigger
 CODE: 2>R    ( d -- ) ( r-- n n)
              RP -4 ADDI,          \ 14
              TOS 2 (RP) MOV,      \ 22
             *SP+   *RP MOV,       \ 26
              TOS POP,             \ 22
              NEXT,              \ = 84
              END-CODE

 CODE: 2R>     ( -- d )
              TOS PUSH,            \ 28
              SP DECT,             \ 10
             *SP  RPOP,            \ 26
              TOS RPOP,            \ 22
              NEXT,              \ = 88
              END-CODE

\ NOT standard forth. Equivalent to *TOS INC and *TOS DEC in Assembler
\ : 1+!   ( addr -- )  1 SWAP +! ;
\ : 1-!   ( addr -- ) -1 SWAP +! ;

CODE: 1+! ( addr -- )  *TOS INC,  TOS POP,  NEXT,   END-CODE
CODE: 1-! ( addr -- )  *TOS DEC,  TOS POP,  NEXT,   END-CODE

\ ========================================================================
\ C O M P A R I S O N   O P E R A T O R S
[cc] cr .( Comparison)

( All are smaller as CODE words in DTC.  See: 9900DTBL.hsf

TARGET-COMPILING
\ : U>  ( n n -- ?)  SWAP U< ;
\ : 0>  ( n -- ?)    1- 0< INVERT ;
 : <>  ( n n == ?)  =  INVERT ;
\ : UMIN ( u1 u2 -- u )  2DUP U> IF SWAP THEN DROP ;
\ : UMAX ( u1 u2 -- u )  2DUP U< IF SWAP THEN DROP ;
\ : WITHIN ( u lo hi -- t ) OVER - -ROT - U> ;
CODE: WITHIN   ( n  lo  hi -- flag )
              *SP  TOS  SUB,
              *SP+ *SP  SUB,
               TOS *SP+ SUB,
               TOS CLR,
               NC IF,  TOS SETO, ENDIF,
               NEXT,
               END-CODE  \ 2 bytes bigger than Forth

\ ========================================================================
\ M I X E D  (32BIT/16BIT)   M A T H   O P E R A T I O N S
\ === SMALLER FASTER ANS COMPLIANT ===
\ We included a signed M/MOD primitive as a code word.
\ The code is used with permission from FBForth by Lee Stewart.
\ M/MOD can switch com FLOORED or symetrical DIVISION with:
\     FLOOR ON  ( floored)
\     FLOOR OFF ( symetrical)

: */MOD       ( n1 n2 n3 -- n4 n5)  >R UM* R> M/MOD ;
: S>D         ( n -- d)  DUP 0< ;
: /MOD        ( n1 n2 -- n3 n4) >R S>D R> M/MOD ;
: /           ( n n -- n)   /MOD NIP  ; \ smaller than CODE words (4 bytes each)
: MOD         ( n n -- n)   /MOD DROP ;
: */          ( n n n -- n) */MOD NIP ;

\ ========================================================================
\ S T R I N G   T H I N G S

TARGET-COMPILING
\ : MOVE    ( src dst n -- )
\          >R
\          2DUP SWAP DUP R@ + WITHIN
\          IF    R> CMOVE>
\          ELSE  R> CMOVE
\          THEN ;

\ CAMEL Forth calls this ">COUNTED"
: PLACE       ( src n dst -- ) 2DUP C! 1+ SWAP CMOVE ;

\ : /STRING   ( c-addr1 u1 n -- c-addr2 u2 ) ROT OVER + -ROT - ; \ ~ 290uS
CODE: /STRING ( c-addr1 u1 n -- c-addr2 u2 ) \ ~20uS!!       Clks
              TOS *SP SUB,                                  \ 18
              TOS 2 (SP) ADD,                               \ 22
              TOS POP,                         \ refill TOS   22
              NEXT,                            \ 8 bytes      62
              END-CODE

\ compile a stack string into memory with the count (Gforth)
: S,         ( c-addr u -- ) HERE OVER 1+ ALLOT PLACE  ALIGN ;

\ ========================================================================
\ H E A D E R   N A V I G A T I O N

TARGET-COMPILING
\ not used in kernel
\ : NFA>LFA       ( nfa -- lfa)  3 - ;
CODE: NFA>LFA    TOS -3 ADDI, NEXT, END-CODE
: NFA>CFA       ( nfa -- cfa ) COUNT  7F AND + ALIGNED ;

\ smudge bit control in the Camel Forth
: HIDE          ( -- )  LATEST @ ( nfa) DUP C@ 80 OR  SWAP C! ;
: REVEAL        ( -- )  LATEST @ ( nfa) DUP C@ 7F AND SWAP C! ;

[CC] cr .( Parsing...)

\ =====================================================================
\ P A R S E   W O R D
[CC] cr .( Parsing...)
TARGET-COMPILING

\ : SOURCE      ( -- adr n) 'SOURCE 2@ ;    \ Common factor, saves space
 CODE: SOURCE  ( -- adr n)
              TOS PUSH,        \ save old stack  28
              TOS 'SOURCE LI,  \                 12
              2 (TOS) PUSH,    \ fetch 2nd cell  38
             *TOS TOS MOV,     \ fetch 1st cell  18
              NEXT,            \ 14 BYTES        96
              END-CODE

                [CC] [PRIVATE] [TC]   \ only needed by the parser
: ADR>IN      ( c-addr' --  )             \ set >IN to offset to given adr
              SOURCE                      \ -- Cadr' adr n
              -ROT -                      \ -- n adr'-adr
              MIN  0 MAX                  \ -- n'
              >IN ! ;

                [CC] [PUBLIC] [TC]
: PARSE       ( char -- c-addr n)         \ word delim'd by char
              SOURCE >IN @ /STRING        \ -- c adr n
              OVER >R ROT SCAN
              OVER SWAP
              IF 1+ THEN                  \ skip trailing delim. if any
              ADR>IN                      \ advance >IN   -- adr"
              R> TUCK - ;

: PARSE-WORD  ( char -- c-addr n)         \ Non-standard. gForth word. Nice factor
              DUP SOURCE >IN @ /STRING    \ -- c c adr n
              ROT SKIP                    \ -- c adr' n'
              DROP ADR>IN PARSE ;         \ -- adr" n"

: WORD        ( char -- c-addr)           \ word delim'd by char
              PARSE-WORD HERE PLACE
              HERE BL OVER COUNT + C! ;  \ append trailing blank

[CC] cr .( CAMEL FORTH Number conversion)
\ ========================================================================
\ S T R I N G  T O  N U M B E R   C O N V E R S I O N

[CC] HEX

TARGET-COMPILING
CODE: DIGIT?   ( char -- n f )
               TOS PUSH,          \  dup char
               TOS -30 ADDI,      \  convert char to number
               TOS 9 CMPI, GT
               IF,
                  TOS -7 ADDI, LTE
                  IF,
                      TOS CLR,  \ bad result
                      NEXT,
                  ENDIF,
               ENDIF,
               TOS BASE @@ CMP, GTE  \ compare to radix
               IF,
                  TOS CLR,    \ bad result
                  NEXT,
               ENDIF,
               TOS *SP MOV,   \ replace char with no.
               TOS SETO,      \ set flag to true
               NEXT,          \ 24 bytes 3 uS
               END-CODE


              \              [PUBLIC]
: UD*        ( ud1 u2 -- ud3)              \ 32*16->32 multiply
              DUP >R * SWAP R> UM* ROT + ; \ simplified with * BF.



: >NUMBER  ( ud adr u -- ud' adr' u' )
            BEGIN
            DUP WHILE
                OVER C@ DIGIT?
                0= IF DROP EXIT THEN
                >R 2SWAP BASE @ UD*
                R> M+ 2SWAP
                1 /STRING
            REPEAT ;


\ This is smaller than original ?NUMBER but ***FLAG LOGIC IS REVERSED***
: NUMBER?  ( addr len -- n ?)      \ ?=0 is good conversion
           (          -- addr len) \ bad conversion
            OVER C@ T[CHAR] - = DUP >R    \ save flag for later
            IF 1 /STRING THEN             \ remove minus sign
            0 0  2SWAP >NUMBER NIP NIP    \ convert the number
            R> IF SWAP NEGATE SWAP THEN   \ negate if needed
;
\ ======================================================================
\ S I M P L E   S O U N D  I N T E R F A C E

[CC] include cc9900\cclib\ticktock.hsf   \ hardware milli-second timer

TARGET-COMPILING

\ write a byte to address of TMS9919 chip
: SND!   ( c -- )  8400 C!  ;  \ 4 bytes, 277 uS

: BEEP     ( -- )
            80 SND! 5 SND!    \ precalulated values for OSC1 1328Hz
            91 SND!           \ turn on OSC1 at -2 dB level
            AA MS             \ Delay ~ 170 mS
            9F SND! ;         \ turn off OSC1

\ We use the HONK sound for ABORT like TI-BASIC does on errors
: HONK     ( -- )
            81 SND! 20 SND!   \ precalculated values for OSC1 218Hz
            90 SND!           \ turn on OSC1 at 0 dB level
            AA MS             \ Delay ~ 170 mS
            9F SND! ;         \ turn off OSC1
\ ======================================================================
\ V D P  S C R E E N   D R I V E R
[CC] cr .( Console output)

HEX [TC]

: C/L!     ( c/l -- )  \ pronounced "SEE-PER-ELL-STORE"
           DUP C/L !           \ set chars per line
           L/SCR *  C/SCR ! ;  \ calc. chars per screen

: VPOS   ( -- vaddr) VROW 2@ >VPOS ;
: VPUT   ( char -- ) VPOS VC! ;    \ moved to TI99PRIM.HSF as CODE
: AT-XY  ( col row -- ) VROW 2! ;  \ set VDP address for Fast type

TRUE [IF]

CODE: TOPLN ( -- vaddr)
       TOS PUSH,
       VPG @@  TOS MOV,
       VTOP @@ TOS ADD,
       NEXT,
       END-CODE

CODE: LASTLN ( -- vaddr)
       TOS PUSH,
       VPG   @@ TOS MOV,
       C/SCR @@ TOS ADD,
       NEXT,
       END-CODE

[ELSE]

    : TOPLN   ( -- vaddr)  VPG @ VTOP @ + ;
    : LASTLN  ( -- vaddr)  VPG @ C/SCR @ + ;

[THEN]

\ =====================================================================
\ Scrolling has been implemented in Forth using VREAD & VWRITE
\ Uses un-allocated Dictionary as a temporary buffer to hold lines of text

\ Notes: Using SEVENs program as a benchmark
\ Buffer Lines	Sevens Speed
\     1          	01:08.71
\     2           01:02.13  10% faster
: SCROLL ( buffer vaddr -- )
       PAUSE
       HERE 100 +
       TOPLN C/SCR @  ( -- buffer Vstart len)
       BOUNDS  ( -- buffer SCRend SCRstart)
       DO
         I  C/L@ +  OVER  C/L@ 2* VREAD
         DUP  I           C/L@ 2* VWRITE
       C/L@ 2* +LOOP
       DROP
       0 17 AT-XY  VPOS C/L@ BL VFILL
;

\ ======================================================================
\ V D P   T E X T   O U T P U T

[cc] HEX [tc]
: CR     ( -- )     (CR) L/SCR = IF  SCROLL  THEN  ;
: (EMIT) ( char -- ) CPUT IF  CR  THEN ;
: PAGE   ( -- ) TOPLN LASTLN OVER -  BL VFILL   0 0 AT-XY ;
: BS     ( --)  VCOL DUP @ 1- 0 MAX  SWAP ! ;

: EMIT   ( char -- )  \ shows how to handle control characters
          PAUSE
          DUP 0D = IF  DROP CR   EXIT THEN
          DUP 08 = IF  DROP BS   EXIT THEN
         (EMIT) ;

\ : TYPE   ( addr cnt -- ) PAUSE  BOUNDS ?DO  I C@ (EMIT)  LOOP ;
: TYPE     ( addr cnt -- ) PAUSE 0 ?DO COUNT (EMIT) LOOP DROP ; \ 8% faster

: SPACE  ( -- )   BL (EMIT) ;
: SPACES ( n -- ) 0 MAX  0 ?DO  SPACE  LOOP ;

\ ======================================================================
\ S T R I N G   L I T E R A L S
[cc] HEX [tc]
\ run-time action of S"   (For ITC Forth only)
: (S")     ( -- c-addr u) R>  COUNT  2DUP + ALIGNED  >R ;

\ ========================================================================
\ Re-solve CROSS-COMPILER Forward reference for '(S") and 'TYPE
CROSS-COMPILING

T' (S")  RESOLVES '(S")
T' TYPE  RESOLVES 'TYPE

[cc] cr .( Character input)
\ ======================================================================
\ C H A R A C T E R   I N P U T

TARGET-COMPILING
\ Cursor flash control is now done by reading the 9901 timer.
\ It counts down from >3FFF in 349mS. If the timer> 1FFF we show the cursor.
\ If < 1FFF show the screen char. Flash rate is about 2 per second.
\ VPUT does the PAUSE for multi-tasking
: KEY      ( -- char)
            BEGIN                 \ start the loop
              PAUSE               \ Essential for Multi-tasking with Console
              CURS @              \ fetch the cursor char
              TMR@ 1FFF <         \ compare harware timer to 1FFF
              IF                  \ true?
                 ><               \ SWAP the bytes to blink
              THEN VPUT           \ then put on screen (also does PAUSE)
              KEY?                \ check the keyboard
              ?DUP                \ DUP IF <> 0
            UNTIL                 \ loop until a key pressed
            BL VPUT ;             \ put the space char on screen

\ High level: input/output       (c) 31mar95 bjr
: ACCEPT   ( c-addr +n -- +n')
            OVER + OVER         \ removed 1-  to accept all chars
            BEGIN
              KEY DUP 0D <>
            WHILE
              DUP EMIT
              DUP 8 =
              IF   DROP 1-  3 PICK  UMAX  \ changed to use: 3 PICK   B.F.
              ELSE OVER C!  1+ OVER UMIN
              THEN
            REPEAT
           DROP NIP SWAP - 1+ ; \ added 1+ to make it work with DTC ??

[cc] cr .( Number printing)
\ ======================================================================
\ N U M B E R   T O   S T R I N G   C O N V E R S I O N

TARGET-COMPILING
\ : UD/MOD ( ud1 u2 -- u3 ud4)
\         >R 0 R@ UM/MOD -ROT R> UM/MOD ROT ;   \ 32/16->32 divide

\ ====================================================
\ HOLD and >DIGIT are in the inner loop so ASM speed-ups
\ makes a real difference in number printing speed
\ AND we save 12 bytes using ASM >DIGIT IN DTC Forth

\ : >DIGIT ( n -- c) DUP 9 > 7 AND + 30 + ; \ convert n to ascii digit c
 CODE: >DIGIT  ( n -- c)        \ ASM is 9 bytes smaller 4X faster
            TOS 9 CMPI,
            HI IF,              \ if n>9
               TOS 7 ADDI,      \ number is not base 10, add 7
            ENDIF,
            TOS  TCHAR 0 ADDI,  \ add ASCII 0 to TOS create char value
            NEXT,
            END-CODE

: <#     ( --)        PAD HP ! ;
\ Build 25 Sept 21 2018, added 1-! for faster HOLD
\ : HOLD   ( char -- )  HP DUP 1-! @ C! ;

 CODE: HOLD  ( char -- )
           HP @@ DEC,
           HP @@ R1 MOV,
           TOS SWPB,
           TOS *R1 MOVB,
           TOS POP,
           NEXT,
           END-CODE  \ same size as Forth version in DTC

\ : #      ( ud1 -- ud2)  BASE @ UD/MOD ROT  >DIGIT  HOLD  ;
: #      ( ud1 -- ud2 ) 0 BASE @ UM/MOD >R  BASE @ UM/MOD SWAP >DIGIT HOLD  R> ;
: #S     ( ud1 -- ud2)  BEGIN  # 2DUP OR  WHILE REPEAT ;
: #>     ( ud1 -- c-addr u) 2DROP HP @ PAD OVER - ;
: SIGN   ( n -- ) 0< IF  T[CHAR] -  HOLD  THEN ;
: DU.    ( d -- ) <#  #S  #> TYPE SPACE ;
: U.     ( u -- ) 0 DU. ;
: .      ( n -- ) DUP ABS 0 <#  #S ROT SIGN  #> TYPE SPACE ;

\ ========================================================================
\ M I S C E L L A N E O U S
\
TARGET-COMPILING
: RECURSE     ( -- ) LATEST @ NFA>CFA ,  ; XIMMEDIATE

CODE: DECIMAL ( -- ) R1 0A LI,  R1 BASE @@ MOV, NEXT,  END-CODE
CODE: HEX     ( -- ) R1 10 LI,  R1 BASE @@ MOV, NEXT,  END-CODE

\ ======================================================================
\ I N T E R P R E T E R

: INTERPRET  ( addr len -- ) 'IV PERFORM ;

\ ======================================================================
\ Q U I T :  The  O U T E R   I N T E R P R E T E R

: QUIT     ( -- )
           L0 LP !   RP0 RP!
           SOURCE-ID OFF
           t[COMPILE] [
           BEGIN
              TIB DUP 80 ACCEPT SPACE    \ TIB is $80 (128) bytes long
            ( addr len) INTERPRET
             STATE @ 0= IF  T."  ok"  THEN CR
           AGAIN ;

\ : EVALUATE ( c-addr u -- j*x)
\           SOURCE-ID ON
\           SOURCE 2>R
\           >IN @ >R
\           INTERPRET
\           R> >IN !
\           2R> 'SOURCE 2!
\           SOURCE-ID OFF ;

\ ======================================================================
\ E R R O R   H A N D L I N G
\
: ABORT    ( -- )
           SP0 SP!
           VDPTOP ^PAB !   \ set base pab pointer
           CR QUIT ;

: ?ABORT   ( f caddr u --)
           ROT
           IF
             CR
             CR T." * " TYPE  T."  ?" HONK
             SOURCE-ID @   ( if source is NOT console)
             IF  T."  Line " LINES @ DECIMAL U.
                 CR CR SOURCE TYPE
             THEN ABORT
           THEN 2DROP ;

                      \ flag     addr length
: ?ERR     ( ? -- )             HERE COUNT ?ABORT ;
: ?EXEC    ( -- ) STATE @       TS" Interpret only" ?ABORT ;
: ?COMP    ( -- ) STATE @ 0=    TS" Compile only"   ?ABORT ;
: ?CSP     ( -- ) SP@ CSP @ -   TS" Unfinished"     ?ABORT ;
: !CSP     ( -- ) SP@ CSP ! ;

\ ======================================================================
\ S T R I N G   L I T E R A L
\ Non-standard: when interpreting S" puts the string in PAD

: S"       ( cccc" -- )
           T[CHAR] " PARSE
           STATE @
           IF  COMPILE (S")  S,
           ELSE PAD PLACE PAD COUNT
           THEN ; XIMMEDIATE

: ABORT"   ( i*x 0  -- i*x)    \ R: j*x -- j*x  x1=0
           ?COMP
           t[COMPILE] S"
            COMPILE ?ABORT ; XIMMEDIATE

[cc] cr .( FIND )
\ ======================================================================
\ D I C T I O N A R Y   S E A R C H

TARGET-COMPILING
: FIND  ( caddr --  caddr  0  if not found)
\                    xt  1  if immediate,
\                    xt -1  if "normal"
           LATEST @  (FIND) ;

: '        ( -- xt) BL WORD FIND 0= ?ERR ;

: [']      ( -- <name> ) ?COMP  '  T[COMPILE] LITERAL ; XIMMEDIATE

: POSTPONE ( <name> -- )      \ replaces COMPILE and [COMPILE]
           ?COMP
           BL WORD FIND DUP 0= ?ERR
           0< IF   COMPILE COMPILE
              THEN COMPILE, ; XIMMEDIATE

\ ========================================================================
\ T E X T   O U T P U T

: ."    ( "ccc<single-quote>" -- )  \ Thanks Niel Baud R.I.P.
        t[COMPILE] S"                ( -- str len)
        STATE @ IF   COMPILE TYPE
                ELSE TYPE
                THEN ; XIMMEDIATE

: .(     T[CHAR] ) PARSE TYPE ;     \ "talking" comment


[CC] cr .( Interpreter/compiler loop)
\ ========================================================================
\ I N T E R P R E T E R  /  C O M P I L E R

TARGET-COMPILING
: <INTERP>  ( i*x c-addr u -- j*x )
          'SOURCE 2!  >IN OFF
          BEGIN
              BL WORD DUP C@ ( -- addr len)
          WHILE
              FIND ?DUP
              IF ( it's a word)
                   1+ STATE @ 0= OR
                   IF   EXECUTE
                   ELSE COMPILE,
                   THEN
              ELSE ( it's a number)
                   COUNT NUMBER? ?ERR
                   t[COMPILE] LITERAL
              THEN

              DEPTH ( DUP) 0< TS" Short stack" ?ABORT
                    ( 50 >  TS" Full stack" ?ABORT)
          REPEAT
          DROP ;


\ ======================================================================
\ T I - 9 9   T E X T   M O D E   C O N T R O L
TARGET-COMPILING

: TEXT    ( -- )
             F0 DUP 83D4 C!
       ( -- F0) 01 VWTR
              0  2 VWTR  \ set VDP screen page
               VTOP OFF  \ topline VDP offset
               VPG  OFF  \ VDP screen page offset
             12  7 VWTR  \ sets FG & BG color
             28 C/L!
             0 0 AT-XY
             2 VMODE !  \ 2=ID for 40 column "TEXT" mode
             PAGE ;

\ ======================================================================
\ D I C T I O N A R Y   C R E A T I O N

: HEADER, ( addr len --)
            ALIGN
            LATEST @ COMPILE,
            0 C,
            HERE LATEST !
            S, ;

: HEADER   BL PARSE-WORD HEADER, ;

\ ========================================================================
\ T A R G E T   S Y S T E M   D E F I N I N G   W O R D S
\ dtc requires that each word starts with a branch to its executor routine.
\ DTC BRANCH and LINK COMPILER: Handy for making new Direct threaded words
TARGET-COMPILING
: B&L,   ( addr --- )  06A0 ,    ,  ;

\ Executor Assembler labels, converted to FORTH constants
  _DOCON  CONSTANT: 'DOCON  ( A02C)
  _DOUSER CONSTANT: 'DOUSER ( A040)
  _DOVAR  CONSTANT: 'DOVAR  ( A036)
 _DODOES  CONSTANT: 'DODOES ( A042)

\                   name-creator  runtime-action  parameter(s)
\                   ------------  --------------  -----------
: CONSTANT  ( n --)  HEADER       'DOCON  B&L,        , ;  \ the comma is a number compiler, remember?
: USER      ( n --)  HEADER       'DOUSER B&L,        , ;  \ USER compiles the offset in bytes from top of WKSP
: CREATE    ( -- )   HEADER       'DOVAR  B&L,          ;  \ create does not compile a parameter
: VARIABLE  ( -- )   CREATE                         0 , ;  \ variables are set to zero when created

\ from studying gforth. It's a nice factor.
\ compiles:  BL @>839C ( docolon)
: (:NONAME) ( -- )   839C B&L,  HIDE  ]  ;   \ common to ':' and ':NONAME'

\ =======================================================================
\ D O E S   S U P P O R T
: (;CODE)
         R>                        \ pops the address of the machine code fragment
         LATEST @ NFA>CFA 2+       \ gets the CFA of the latest word & skip past BL instruction
         !  ;                      \ store the machine code address in the BL instruction data field

: DOES>  ( -- )                    \ change action of latest def'n
        COMPILE (;CODE)
        0460 , A042 ,              \ *BRANCH* to  _DODOES (cannot BL this or we lose R11 value)
       ; XIMMEDIATE

\ =======================================================================
\ ADD-ONS
\ ** comment out everything to build the smallest kernel  **


[CC] include CC9900\SRC.ITC\dsrlinkA.hsf
[CC] include CC9900\SRC.ITC\filesyX2.hsf


\ =======================================================================
\ LOOPS AND BRANCH COMPILERS FOR THE TI-99 SYSTEM
\ [CC] CR .( TARGET forth BRANCHING and LOOPING ...)

 [CC]  include cc9900\cclib\loop2DTC.hsf  \ these compile code on the TARGET system

\ CODE let's you make machine code words
\ for use with the assembler
\ : CODE      ( -- )  HEADER  HERE 2+ , !CSP ;
\ : NEXT,     ( -- )  045A , ;  \ B *R10
\ : ENDCODE   ( -- )  ?CSP  ;


\ ======================================================================
\ INIT : creates the Forth virtual machine environment

FORTH HEX

[tc]

CODE: INIT
              WRKSP0 LWPI,
              R0 HSprims LI,   \ source
              R1 HSstart LI,   \ destination
              BEGIN,           \ load hi-speed routines to fast RAM
               *R0+ *R1+ MOV,
                R1 HSend CMPI,
              EQ UNTIL,
              SP  SP0  LI,     \ data stack
              RP  RP0  LI,     \ return stack
              R10 NEXT2 LI,    \ inner interpreter
              IP  BOOT  LI,    \ interpreter pointer
             *R10 B,           \ run Forth (inner interpreter)
              END-CODE

\ ======================================================================
\ B O O T   U P   C O D E
TARGET-COMPILING
- 1 [IF]
: COLD    ( -- )
              60 83C2 C!                     \ enable quit key on console
              26 TPAD !
              1000 VP !                      \ reset VDP memory manager
              2000 H !                       \ reset HEAP memory manager
              3FFF TMR!                      \ 9901 timer runs continuously
              50 C/L!                        \ set line length 80 chars
             t['] <INTERP> 'IV !             \ PATCH interpreter vector
             t['] <FIND>   'FIND !           \ set find action
              HEX                            \ default to hex
              VDPTOP ^PAB !                  \ reset PAB stack in VDP RAM
            \ setup TTY1 for I/O
              RS232 /TTY1 BA=19200 8,N,1 OPEN-TTY

              TS" CAMEL99 V2.67d TTY" 2DUP 80 VTYPE
              CR CR TYPE                    \ send same message to TTY port
              TS" BA=19200 8,N,1" 2DUP A0 VTYPE
              CR TYPE

              ORGDP @ DP !                  \ restore dictionary
              ORGLAST @ LATEST !            \ restore last word pointer
              LATEST DUP CONTEXT !  CURRENT !
              RP0 RP! SP0 SP!
              TS" DSK1.START" INCLUDED
              QUIT  ;
[ELSE]
: WARM       ( -- )
              80 83C2 C!                    \ disable user interrupts
              26 TPAD !                     \ HERE+80bytes for root task
              1000 VP !                     \ reset VDP memory manager
              2000  H !                     \ reset HEAP, +16 bytes for DSRLINK
              3FFF TMR!                     \ start 9901, enable interrupts too
              VDPTOP ^PAB !                 \ reset PAB stack in VDP RAM
            t['] <INTERP> 'IV !             \ PATCH interpreter vector
\            t['] <FIND>   'FIND !           \ set find action
              ORGDP @ DP !                  \ restore dictionary
              ORGLAST @ LATEST !            \ restore last word pointer
\              LATEST DUP CONTEXT ! CURRENT !  \ FORTH DEFINITIONS
\              FLOOR ON
              TEXT                          \ VDP start screen
              T." CAMEL99 DTC Forth V2.67"
              DECIMAL                       \ default to base 10
;

: COLD        WARM
 \             TS" DSK1.START" INCLUDED

              ABORT ;
[THEN]

\ ======================================================================
\ define target comment words
TARGET-COMPILING
: (         T[CHAR] ) PARSE 2DROP ; XIMMEDIATE
: \                 1 PARSE 2DROP ; XIMMEDIATE

[CC]
\ ======================================================================
\ TARGET Colon, :NONAME and Semi-colon  defintions
\ X: ;X are aliases for the cross-compiler : and ;

TARGET-COMPILING
 X: :         !CSP  HEADER (:NONAME)  ;X

 X: :NONAME   HERE  !CSP   (:NONAME)  ;X

 X: ;        [  REVEAL   8388 COMPILE,  ?CSP ;X  XIMMEDIATE

[CC]
\           F O R T H   S Y S T E M   C O D E   E N D S
\ /\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
cr .( Forth Kernel compiled completely)

\ ======================================================================
\  P A T C H   T H E   T A R G E T  S Y S T E M   V A R I A B L E S

[CC]   XLATEST @ DUP LATEST T!


                    ORGLAST T!
               THERE DUP DP T!
                      ORGDP T!

\ ======================================================================
\ P A T C H   T A R G E T   I M A G E  F I L E   H E A D E R

         FILENAME: CAM99DTt

         T' INIT BOOT-ADDRESS T!

\ S E T   T H E   B O O T   W O R D   T O   R U N

         T' COLD BOOT T!
        END.   ( report compile time and stats)


\ ======================================================================
\ S A V E   B I N A R Y  I M A G E   F I L E

         FILENAME$ $SAVE-EA5.            \ FILENAME$ was set by FILENAME:

\ ======================================================================
\  C O P Y   T O   T I - 9 9   V I R T U A L   D I S K
.( copying binary file to TI-99 Emulator DSK1.DTC)

( //  shells out to the DOS shell in HSF2012)

      // copy CAM99DTC cc9900\camel99.wip\dsk1.dtc\
      // copy CAM99DTC cc9900\bin\

CROSS-COMPILING

 CR ." === COMPILE ENDED PROPERLY ==="
 .XMEM

 \ BYE          \ exit the cross compiler or stay in to debug
