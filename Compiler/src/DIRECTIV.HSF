\ DIRECTIV.HSF   commands to managed saving program image

\ T I - 9 9   E A 5   F I L E   F O R M A T   S E C R E T S

\ Menu option 5 of the Editor/Assembler cartridge loads and runs a binary
\ file. Hence the name "EA5".

\ Docs say "There is a 3-word header that contains instructions for the loader."

\ BUT!!!
\ There is an extra header used for files on a PC called V9T9 format.
\ So.. you have to create the V9T9 header in your memory image too !!!

\ Sept 27, 2018: I now know more abit the V9T9 FORMAT.
\ Here is the back story from Arcadeshopper on Atariage.com
\ History:
\ "When we started uploading files to BBS's they had to come up with a way to
\ store TI specific file header information.. SO the TIFILES header was
\ created which prepends the file with the information needed to store it correctly.
\ V9T9 came out (perhaps the first TI emulator (for DOS!)) and it needed a way
\ to store files on the PC drive with the TI directory information as well,
\ so instead of using the standard, they made up their own.."

\ Actual Header of DEMO file from Classic99 Emulator
\ ----------------------------------------------------------------------------
\ 2D9B:0000  44 45 4D 4F 20 20 20 20  20 20 00 00 01 00 00 20  DEMO      .....  <----first 10 bytes contain the file name)
\ 2D9B:0010  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ................
\ 2D9B:0020  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ................
\ 2D9B:0030  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ................
\ 2D9B:0040  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ................
\ 2D9B:0050  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ................
\ 2D9B:0060  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ................
\ 2D9B:0070  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ................ <--- V9T9 header ends here
\ 2D9B:0080  FF FF 20 00 A0 00 04 60  CC 00 C8 0B A1 0E 02 02  .. ....`........
\            ^     ^     ^     ^
\ more flag--|     |     |     |______CODE STARTS HERE.
\ file size--------      |            This compiler puts a Branch instruction here by default.
\          load address -
\

\ The standard EA5 header structure is the following:
\       Address         Content
\      ----------       ------------------------------------------------------
\       >0080           FILE LOAD Flag. >0000 = last file. >FFFF = load one more file
\       >0082           Number of bytes to load (not counting these 6).
\       >0084           Absolute Load Address in TI-99 memory
\ B Fox extended header
\       >0086           BRANCH symbolic intruction @>0008
\       >0088           contains start address of program. (Filled in by PROGRAM: or SET-BOOT DIRECTIVES)

\ The loader loads the specified number of bytes, taken directly after to the
\ header, to the specified address in memory. If the flag word is >FFFF, the
\ loader then loads another file whose name is coined by incrementing by 1 the
\ last character of the current file name. This process goes on until a file
\ with a >0000 flag is loaded. At this point, the loader executes the program
\ by performing a BL to the address where the first program was loaded.

\ The workspace upon entry will be >20BA with the Editor/Assembler cartridge,
\ but the program should not take this for granted since other loaders may use
\ a different workspace. Similarly, it may be wise for a program to properly
\ setup the VDP memory, rather than to assume that the Editor/Assembler
\ cartridge has already done it.

\ A program can return to the caller with B *R11 IF you are in the same
\ workspace that was used when the program was loaded. (not likely)
\ Better to reset the TI-99/4A with BLWP @>0000.
\ ===================================================================



\ ========================================================================
\ A D D R E S S E S

CROSS-COMPILING

VARIABLE org-addr         \ holds the TI-99 address that the code is loaded to

: org-addr! ( Taddr -- ) org-addr ! ;
: org-addr@ ( -- Taddr ) org-addr @ ;

64K org-addr!              \ init to 64k ( -1) to detect if it has not been set

HEX 86 constant header-size     \ TI-99 E/A5 file header size

: header@   ( -- Taddr ) org-addr@ header-size - ; \ addr of start of program header

\ ========================================================================
\ TI EA5 file image header addresses

HEX 2000 80 + CONSTANT MAX-PROG           \ 8K bytes is a big as we can go with each E/A5 files

\ TI-99 E/A5 file format header is 6 cells.
\ these are the offsets from the header base
0000 CONSTANT ->file-name
0080 CONSTANT ->more-field
0082 CONSTANT ->PROG-SIZE
0084 CONSTANT ->load-field

\ B.Fox addtition to the header....
0086 CONSTANT ->entry-field            \ JUST contains a branch instruction
0088 CONSTANT ->BOOT-address           \ TARGET address offset that contains the address that we branch to at startup


\ ========================================================================
\ create relocatable target variables in the header
: file-name    ( -- Taddr) header@ ->file-name + ;
: DOS-SIZE     ( -- Taddr) header@ 15 + ;
: PROG-SIZE    ( -- Taddr) header@ ->prog-size + ;
: more-field   ( -- Taddr) header@ ->more-field + ;
: LOAD-FIELD   ( -- Taddr) header@ ->load-field +  ;
: ENTRY-FIELD  ( -- Taddr) header@ ->entry-field +  ;
: BOOT-ADDRESS ( -- Taddr) header@ ->boot-address + ;

\ ========================================================================
\ test the header fields to know the program is correct
: ?file-name    ( -- ) file-name tc@ FF = ABORT" Missing FILENAME: directive" ;
: ?prog-size    ( -- ) prog-size    t@ BEEF = ABORT" Program size is not set" ;
: ?more-field   ( -- ) more-field   t@ 0=  prog-size t@ MAX-prog > AND abort" MORE-FIELD err. Image>8K" ;
: ?load-field   ( -- ) load-field   t@ DEAD = ABORT" IMAGE has no LOAD address at offset HEX 84" ;
: ?entry-field  ( -- ) entry-field  t@ 0<     ABORT" TI-99.EA5 directive is missing in the code" ;
: ?boot-address ( -- ) boot-address t@ DEAD = ABORT" IMAGE requires a boot address" ;

\ test them all!
: ?header       ( -- )
  ?file-name   ?prog-size    ?more-field
  ?load-field  ?entry-field  ?boot-address ;

\ ========================================================================
\ C R E A T E  A  L A B E L
\ usage:  l: endop      R0+ R1 mov,
\                       endop  b,    ( endless loop created)

\ creates a label in HOST Forth that returns a TARGET address when executed
: l: ( -- <label> )
      CREATE  THERE ,
      DOES> @                        \ interpreting ( -- Taddr)
            XSTATE @               \ cross-compiler is on, compile as literal
            IF  'LIT T,  T,  THEN  \ 'lit needs to be resolved before use :-(
 ;

\ ========================================================================
\ B L O C K   S T A R T I N G   S E G M E N T

\ I have made BSS work like TI, but it evaluates Forth so math is RPN

\ Usage:
\              ASM9900                  TI ASSEMBLER
\ DECIMAL
\ l: scrbuf    BSS 24 32 *           SCRBUF   BSS 24*32
\ l: buffer    BSS HEX 100           BUFFER   BSS >100

: BSS         ( n -- <text-name> )
              1 parse evaluate ( n) bytes, ; \ Parse up to Carriage return,
                                             \ allocate the space and fill with zeros

\ ========================================================================
\ D A T A  D I R E C T I V E S
\ works like TI ASSEMBLER ie: multiple numbers per line
\ DATA[ ... ]DATA only accepts numbers

: <FRAME>    ( -- )   !CSP ;           \ mark beginning of a stack frame
: </FRAME>  ( n..n' -- ) CSP @ SP!  ;  \ collapse stack frame

: DATA[    ( -- <text string>)  <FRAME> .EVEN ;  \ always starts on even address

: ]DATA    ( n..n[x] -- )
            0 DEPTH 1-
            DO
              I PICK data,
            -1 +LOOP
            </FRAME> .EVEN ;                \ always ends on even address

: DATA      ( -- <TEXT> )  1 PARSE EVALUATE  data, ;

\ ========================================================================
\ B Y T E   D I R E C T I V E
\ works like TI ASSEMBLER ie: multiple bytes per line
\ BYTES[ ... ]BYTES only accepts numbers

: BYTES[    ( -- <text string>) <FRAME> ;

: ]BYTES    ( n..n[x] -- ) 0 DEPTH 1- DO  I PICK  byte,  -1 +LOOP </FRAME> ;

HEX
: BYTE      ( -- <text>)
            1 PARSE EVALUATE
            DUP 00FF > ABORT" BYTE too big"
            byte, ;



\ ========================================================================
\ T E X T   D I R E C T I V E
\ works like TI ASSEMBLER but uses double quotes.

\ Usage:      TEXT "Puts this string into memory"   \

: TEXT      ( -- "text")
            "WORD DROP                       \ parse upto 1st quote and drop it
            [CHAR] " PARSE TALIGN TEXT, ;    \ parse remaining text and compile to memory

: TEXT'     CHAR ' PARSE TALIGN TEXT, ;      \ usage:  (mind the first space) text' text

: STRG"     TALIGN [CHAR] " PARSE THERE TPLACE TALIGN ;  \ places a counted string in memory (even addresses)


DECIMAL
: SAVE-BIN.  ( FILENAME$ -- )   \ save binary image of cross assembled program
        PUSH$ LEN 0= ABORT" SAVE-BIN: need file name"
        cr ." Saving " TOP$ COUNT TYPE ."  ... "
        [target] TOP$ put-file
        cr ." File saved, "  [target-img seg-ptr] ? ." bytes"
        cr
        collapse ;

\ ========================================================================
\ S U B - R O U T I N E  C R E A T I O N

\ sub: routines create a name in the compiler but not in the TARGET Forth

: SUB:  ( <text>) ( -- )
        !csp                    \ record the stack position
        clr-jmptable            \ empties the jumptable so you can use all the labels
        TALIGN l:   ;           \ sub: creates the label ALWAYS on an even address boundary


: END-SUB  ?csp  ;              \ checks for "leftovers" on the stack


\ ========================================================================
\ C R O S S - A S S E M B L E R   D I R E C T I V E S

\ moved these to the cross-compiler vocabulary because it made more sense

CROSS-COMPILING

: START.                        \ reset the timer to time the assembly operation
        timer-reset ;

variable ORGFLAG

: SET-ORG  ( n -- )
            DUP header-size - tdp !  \ set dictionary pointer 86 bytes back for the header
           ( DUP) org-addr!          \ this will also be the actual load address in TI-99
              0 XLATEST !  ;         \ LASTEST var must begin at the same place for dictionary links to work

: ORIGIN.  ( n -- )

        DUP TDP @ U<
        if
          CR ." *WARNING* ORIGIN. has been moved backwards"
        then cr
        dup SET-ORG
        ORGFLAG ON
        CR ." ORIGIN. has been set to " hex 4 U.R ;

HEX
: NEW.
        0 64k FF TFILL          \ fill the cross compiler 64k mem space with $FF
        0 TDP !                 \ set ORG to 0
        NEW-jmptable
        Tcodewords off
        tforthwords off
        64k org-addr ! ;        \ mark the load address to end of segment ie: not set correctly


\ =========================================================================
\ CROSS-COMPILING  ;C O D E
0 [if]
CROSS-COMPILING

\
\ adapted from Moving Forth by Dr. Brad Rogridguez  Many thanks!
\

host: t(;CODE)
                R>                  \ pops the adr of the machine code
                LATEST @ nfa>cfa    \ gets the CFA of the latest word
                T!                  \ stores the code address in the TARGET Code Field
;host


host: ;CODE
                TCOMPILE t(;CODE)       \ compiles t(;CODE) into definition
                ?CSP COMPILE T[     \ turns off the Forth compiler (just like ";" does)
                TREVEAL
                CROSS-ASSEMBLING    \ turns on the CROSS-assembler
;host IMMEDIATE
[then]

cr .( TI-99 file control directives)
\ ===========================================================================*
\ T I   F I L E   H E A D E R   F O R   E A 5   F O R M A T

\ EA5 means "EDITOR ASSEMBLER, MENU OPTION 5

\ I have extended the header by 2 words.
\ The very first instruction that runs is a branch to the entry address.


HEX
\ DIRECTIVES TO create the "Editor Assembler 5" binary program header in the memory image
\ This code adds a 2 byte branch instruction as the first code that runs
\ so you can jump to a startup routine anywhere in memory

-1 [IF]
: TI-99.EA5  ( -- )
        orgflag @ 0= ABORT" missing ORIGIN. directive"   \ ORIGIN. directive MUST precede this directive to set the load address
        header@ DUP  header-size 0 tfill                 \ init header memory with zero
        ( -- addr ) 0A BL TFILL  0A TALLOT               \ FILL space for the file name with blanks (for debugging)

        0000 T,                                          \ lay in some data after the FILENAME
        0100 T,    ( byte 12,13)                         \ >100 bytes per record ?
        0020 T,    ( byte 14,15)                         \ DOS file size? hex2000
        70 TALLOT                                        \ move pointer to end of header

        FALSE DATA,                                      \ the "MORE-FIELD"= true (-1) if there are more files to load
        BEEF DATA,                                       \ place holder for the PROG-SIZE  (in bytes)
        ORG-ADDR@ DATA,                                  \ record the load address in the file
        DEAD @@ B,                                       \ 2 BYTES:  branch to address where the program starts
;

[ELSE]
: TI-99.EA5  ( -- )
        orgflag @ 0= ABORT" missing ORIGIN. directive"   \ ORIGIN. MUST precede this directive to set the load address
        THERE >R
        ORG-ADDR@ 80 - TDP !

        S" TIFILES" TS,                           \
        0021 t, 0100 T, 0000 t, 0000 t,         \ lay in some data after the text
        60 0 DO  CA53 T,  2 +LOOP               \ fill the rest of the header

        ORG-ADDR@ TDP !
        FALSE DATA,                             \ the "MORE-FIELD"= true (-1) if there are more files to load
        BEEF DATA,                              \ place holder for the PROG-SIZE  (in bytes)
        ORG-ADDR@ DATA,                         \ record the load address in the file
        DEAD @@ B,                              \ 2 BYTES:  branch to address where the program starts
;
[THEN]

: FILE!  ( caddr -- )                                             \ c" MYFILE" FILE!
         dup len 0A > ABORT" File name too long. >10 chars"
\ move the string into the TI-99 header as UPPER CASE text
         LISTS @ swap UPPER$ COUNT >R  [TARGET] file-name  R> CMOVEL
         COLLAPSE ;


[cc] 12 $VARIABLE FILENAME$

: FILENAME:  BL WORD DUP file!                                     \ added to version 5 Jan2 2017
             FILENAME$ $! ;                                        \ make a copy of the string

: PROGRAM:            \ *new*  program: can declare the file name. DOES NOTHING IF NO NAME PROVIDED
          BL WORD DUP LEN 0>
          IF DUP FILE!  FILENAME$ $! THEN
         .EVEN
          CLR-JMPTABLE
          THERE BOOT-ADDRESS T! ;

: ?8K         ( n -- ) MAX-PROG > IF 9 ]asmerr THEN ;   \ check if too big

: IMAGE-SIZE ( -- n) THERE header@ - ;     \ calculate the file image size starting at header

HEX
: >EVEN-SECTOR ( bytes -- sectors) 100 / 1+ 100 * ;  \ convert bytes to even number of ti-99 disk sectors

: SECTOR-SIZE  ( -- byte )  IMAGE-SIZE >EVEN-SECTOR ; \ needed by JS99ER loader

: TIFILES-SIZE ( -- remainder sectors) 100 /MOD ;

: TCODE-SIZE ( -- n) THERE ORG-ADDR@ - ;   \ calculate the TI-99 code size.

: .XMEM   \ Display cross-assembler memory and dictionary usage report
        BASE @ >R
        DECIMAL
        CR
        CR ." TI-99 filename: "  FILENAME$ $.
        CR
        CR ." Fields         HEX  DECIMAL"
        CR ." -------------  ---  -------"
        CR ." Load address " ORG-ADDR@ .HEX/DEC
        CR ." Code size    " TCODE-SIZE DUP ?8K  .HEX/DEC
        CR ." Boot address " boot-address T@  .hex/dec
        CR ." Image size   " IMAGE-SIZE  .HEX/DEC
        CR ." Size adjusted" IMAGE-SIZE >EVEN-SECTOR .HEX/DEC
        CR ." Code words   " TCODEWORDS @ .hex/dec
        CR ." Forth words  " TFORTHWORDS @ .HEX/DEC

        R> BASE ! ;

HEX
: END.  \ finish off and create a report of what happened
         FILENAME$ LEN 0= ABORT" Missing FILENAME:"
         TCODE-SIZE  2000 MIN PROG-SIZE T!
         IMAGE-SIZE >EVEN-SECTOR CSWAP HEADER@ 0E + T!    \ intel number in header
      \   0  data,                                        \ put a 0 after the last memory word of the program
         ?header                                          \ check that the header is correct
         DECIMAL
         CR ." >>>> CROSS-ASSEMBLY COMPLETED <<<<<"
         .elapsed
         CR
         .XMEM
         CR
 ;

: SET-BOOT.  ( T'-addr -- ) BOOT-ADDRESS T!  ;

\ ===================================================================
\ S A V E  B I N A R Y  F I L E

\ TI-99 EDITOR ASSEMBLER BINARY FORMAT SAVE (Menu option 5 format)

: WRITE-IMG  ( segment $addr -- )
         >R DUP 4I@ 0 R> FIT? MKFILE >R   \ push the file handle to rstack
         DUP@ header@ ROT DROP            \ we write the file from the start of the header.
         IMAGE-SIZE >EVEN-SECTOR R@ WRITEH DROP       \ write to the handle, drop the error flag
         R> CLOSEH ;                      \ close the file handle


: $SAVE-EA5. ( $filename -- )       \ save image as TI-99 EA5 file format
         cr ." Saved as file " DUP $. ." , "
         [TARGET-IMG SEGMENT] SWAP WRITE-IMG
         SECTOR-SIZE U. ." bytes" CR  ;


: WRITE-BIN  ( segment $addr -- )
       >R
       DUP 4I@ 0 R> FIT? MKFILE >R   \ push the file handle to rstack
       DUP@ org-addr @ ROT DROP      \ we write the file from origin
       TDP @ ORG-ADDR @ -            \ compute size of binary image
       R@ WRITEH DROP                \ write to the handle, drop the error flag
       R> CLOSEH ;                   \ close the file handle

: $SAVE.BIN ( $filename -- ) [TARGET-IMG SEGMENT] SWAP WRITE-BIN ;


HOST-COMPILING

: XASM ;                \ xassembler present label

CR .( === XASSEMBLER IS LOADED ===)
cr
