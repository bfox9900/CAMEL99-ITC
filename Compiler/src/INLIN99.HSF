\ inline.hsf  a simple speedup for ITC FORTH July 2017  B Fox

\ Premis:
\ An indirect threaded code (ITC) system can spend up to 50% of its time
\ running the Forth thread interperpreter, typically called NEXT.
\ The ITC NEXT routine is three instructions on the TMS9900.
\ The Forth Kernel contains many words called primitives, that are coded in Assembler.
\ Many of these primitives are only 1 or 2 instructions.


\ ASM[  ]ASM
\ Inline assembler can be added to your code with ASM[  ]ASM
\ This allows Assembler to be used without taking name space.

\ CODE[  ]
\ CODE[ is used in a CODE: word definition to take code primitives
\ and write them inline.  Using CODE[ ] is the fastest but takes space
\ for the name of the word and the Forth header.

\ INLINE[  ]
\ INLINE[  ] copies the code from a primitive and compiles it in a new definition
\ but removes the call to NEXT at the end of each primitive.
\ This effectively doubles the speed of definitons using INLINE[


\ EXAMPLES

\ : DUP@   ASM[ TOS PUSH,  *TOS TOS MOV,  ]ASM  ;
\ CODE:  DUPC@  CODE[ DUP C@ ]  NEXT,  END-CODE

\ These two example produce the exact same code
\ : DUP@2  INLINE[ DUP @ ] ;

\ Change History:
\ Feb 26 2018  made INLINE,(t) SMARTER. It now recognizes code words, constants and variables
\              It converts variable and constants into TOS PUSH, TOS <xxx> LI, macros.

\ MODIFIED for XFC99 cross-compiler usage.

CROSS-COMPILING

HEX 045A CONSTANT B*R10   \ code for CAMEL99 NEXT (B *R10)

\ ==============
\ TEST for CODE word
\ CFA of a code word contains the address of the next cell

: ?TCODE ( cfa -- ? ) DUP T@ CELL-  - 0= ;  \ works only for ITC
                                                              \ needed CSWAP for TI endian
\ scan MACHINE code looking for the NEXT, routine.
\ abort if NEXT is not found after 256 bytes. This is an arbitrary size
\ but most Forth code words are much smaller than 256 bytes.
: TONEXT ( adr --  adr2 )
           0                 \ this is a flag that falls thru if we don't succeed
           SWAP
          ( ADR) 80         \ max length of the allowed code word is $80 CELLS
           BOUNDS
           DO
             I T@ B*R10 =   \ test each CELL for presence of "B *R10"
             IF   DROP I LEAVE
             THEN
           2 +LOOP
           DUP 0= ABORT" INLINE Err: can't find NEXT" ;

: RANGE  ( cfa -- addr cnt ) >BODY DUP TONEXT OVER  -  ;  \ calc.  start and length of code fragment

: TRANSCRIBE ( srcadr cnt -- ) THERE OVER TALLOT SWAP TTCMOVE  ;   \ write code block to THERE

\ compile assembler code to push arguments into TOS register
: PUSH_VAR ( cfa -- )  R6 DECT,   R4 *R6 MOV,   R4 SWAP >BODY LI, ;
: PUSH_CON ( cfa -- )  R6 DECT,   R4 *R6 MOV,   R4 SWAP >BODY T@ LI, ;

: INLINE,(t)  ( $addr -- )    \ compile code for $addr word
           <TFIND> DUP 0= ABORT" INLINE, can't find"
           NFA>CFA
           DUP ?TCODE      IF RANGE TRANSCRIBE ELSE
           DUP T@ 'DOVAR = IF PUSH_VAR         ELSE
           DUP T@ 'DOCON = IF PUSH_CON         ELSE
                           TRUE ABORT" unknown word type"
           THEN THEN THEN ;


FORWARD: '>CODE    \ we will need to resolve in the high level code


\ Move from Forth to machine code
 : >CODE
           THERE 2+ T,       \ compile a pointer to the next cell
           THERE 2+ T, ;     \ which is the CFA of the inline code pointing to the next cell...

\ return from in-line machine to back to FORTH
: >FORTH   0209 T, THERE 2 CELLS + T,   \ asm macro: LI IP,THERE+4
           045A T,  ;                   \ B *R10   (Forth next)

: ASM[     >CODE
           CROSS-ASSEMBLING
           T[ ; IMMEDIATE \ switch OFF cross-compiler and go to interpreter mode

: ]ASM     >FORTH
           TARGET-COMPILING
           ]T ; IMMEDIATE    \ switch ON cross-compiler

CREATE WORDBUF2   33 ALLOT

: CODE[    ( <codeword> -- ) \ compile code words inline
           BEGIN
             BL PARSE WORDBUF2 PLACE
             WORDBUF2 CHAR+ C@ [CHAR] ] <>
           WHILE
             WORDBUF2 INLINE,(t)
           REPEAT ;

\ inline a string of code words all at once
\ usage: : TEST   INLINE[ OVER + SWAP DUP = or ]  ;
: INLINE[  ( <codeword> -- ) >CODE  CODE[   >FORTH ;  IMMEDIATE
