\ TI99xc.hsf cross compiler FRAMEWORK for the TMS9900 16 bit processor
\ Requires HSF2012  ANS version of HsForth by Brian Fox

\  _______ _____         ___   ___
\ |__   __|_   _|       / _ \ / _ \
\    | |    | |  _____ | (_) | (_) |
\    | |    | | |_____| \__, |\__, |
\    | |   _| |_          / /   / /
\    |_|  |_____|        /_/   /_/
\  ______         _   _       _____                          _____                       _ _
\  |  ___|       | | | |     /  __ \                        /  __ \                     (_) |
\  | |_ ___  _ __| |_| |__   | /  \/_ __ ___  ___ ___ ______| /  \/ ___  _ __ ___  _ __  _| | ___ _ __
\  |  _/ _ \| '__| __| '_ \  | |   | '__/ _ \/ __/ __|______| |    / _ \| '_ ` _ \| '_ \| | |/ _ \ '__|
\  | || (_) | |  | |_| | | | | \__/\ | | (_) \__ \__ \      | \__/\ (_) | | | | | | |_) | | |  __/ |
\  |_| \___/|_|   \__|_| |_|  \____/_|  \___/|___/___/       \____/\___/|_| |_| |_| .__/|_|_|\___|_|
\                                                                                 | |
\                                                                                 |_|

\ History:  Jun 8, 2016 - Ported Intel cross compiler to use ASM9900.HSF
\           Jan 1, 2017 - Version 5: converted header linkage to work with LFA to NFA not LFA to LFA
\           Feb 3, 2017 - Added prelim code for headless code in the TARGET
\           May 3, 2015 - Changed t['] to cc['] cross-compiling [']
\                         re-wrote t['] to do a target ' and compile a target literal
\           Jan 29,2017 - Changed T." to be more like ANS Forths. Compiles (S") and TYPE
\           Mar 20,2018 - Added VALUE:  to the cross compiler
\           Mar 22,2018 - Changed HEADLESS, HEADS to [PRIVATE], [PUBLIC]


\ ============================================================================
\ ==                 F O R T H   H E A D E R   D E S I G N                  ==
\ ============================================================================
\  header architecture from Camel Forth by Dr. Brad Rodriguez Phd, Canada
\
\                        CAMELFORTH
\                     D7             D0
\                     +---------------+
\                     |               |   byte 1   \ contains NFA of previous word
\                     |-    link     -|
\                     |               |   byte 2
\                     +-------------+-+
\                     |      0      |P|   byte 3   \ P - Precedence bit, equals 1 for an IMMEDIATE word
\                     +-+-----------+-+
\                     |S|   length    |   byte 4   \ S - Smudge bit, used to prevent FIND from finding this word.
\                     +-+-------------+
\                     |               |   byte 5
\                     |-    name     -|
\                     |       .       |
\                             .
\                             .
\                     |               |   byte 'n' is always ALIGNED for TMS9900
\                     ~~~~~~~~~~~~~~~~~
\                     |               |   byte 3 + byte 4
\                     |-  code field -|
\                     |               |
\                     +---------------+
\
\ CamelForth header is 1 byte more than FigForth but gives clean access to fields

\ Link - in CamelForth and Fig-Forth, points to the previous word's Length byte
\        link byte begins the name field address. ie: NFA }

[UNDEFINED] $!L  [IF] INCLUDE FARSTRNG.HSF   [THEN]

cr .( *TI99 cross compiler with Camel Forth dictionary linkage*)

\ ============================================================================
\ N A M E   S P A C E   C O N T R O L
\
\ We are using VOCABULARY to create names spaces for the different parts
\ of the system. See comments beside each VOCABULARY declaration
\
\                             *WARNING*
\  The code & memory below is very HSForth specific due to the use
\  of the intel 8086 segmented architecture.
\ ==============================================================================


CR .( Creating VOCABULARIES)

HEX 1000 TO SEG-SIZE             \ sets Intel segment size. Vocabularies have a separate seg. in HSF2000
VOCABULARY CROSS-COMPILER        \ contains words used to cross-compile Forth into the target

HEX 1000 TO SEG-SIZE
VOCABULARY MIRROR                \ contains duplicate labels of the target Forth words with limited functionality.
                                 \ VARIABLEs & CONSTANTs work correctly, Code words and Forth words abort with message

HEX 2000 TO SEG-SIZE
VOCABULARY XASSEMBLER            \ holds the cross-assembler words

\ ============================================================================
\ T A R G E T   M E M O R Y   A L L O C A T I O N   A N D   C O N T R O L

HEX 0FFFF CONSTANT 64K

\ NOTE:
\      The HsForth word SEGMENT creates a data structure to help manage Intel
\      segments. For other forth systems this could be easily emulated

\      struc SEGMENT
\         cell: 1st-paragraph
\         cell: last-paragrah
\         cell: mem-used
\         cell: user-defined
\      end-struc
\
\   How to emulate SEGMENT in Gforth MAYBE?
\
\   : SEGMENT ( n -- )   CREATE    HERE ,  DUP HERE + , 0  ,  0  ,  ;


cr .( Create TARGET memory...)

64K SEGMENT [TARGET-IMG   \ 64k because we are making a Tiny memory model Forth


\ ===================================================================
\                   TARGET MEMORY SEGMENT CONTROL
\ ===================================================================
\ hsf segment structure control:  create named offsets into the structure

\ HSF non-standard words if needed
[UNDEFINED] 2I@ [IF]  : 2I@       CELL+ @ ; [THEN]          \ these words are CODE in HsForth
[UNDEFINED] 4I@ [IF]  : 4I@   2 CELLS + @ ; [THEN]


\ Usage:
\ [TARGET-IMG SEG-END] ( -- adr )  returns the ADDRESS that contains last byte in the segment

: segment]      ( seg-struc -- adr)  ;           \ syntax candy
: seg-end]      ( seg=struc -- adr)  CELL+ ;
: seg-ptr]      ( seg-struc -- adr)  4+ ;        \ used as a "memory used" pointer inside a segment

: seg-end]@     ( seg-struc -- n )  2I@ ;
: seg-ptr]@     ( seg-struc -- n )  4I@ ;

: [target]      ( -- target-paragraph-address ) [target-img segment] @ ;  \ more syntax candy


\ behead' t,     \ HsForth has this word already to compile 4 bytes into memory. It made trouble.. Off with his head!


\ ========================================================================
\ N A M E   S P A C E   &   S E A R C H   O R D E R   C O N T R O L

cr .( Define search orders)

\ build words for the NATIVE Forth that is running.  ie: vanilla Forth environment
: HOST-COMPILING
                ONLY FORTH ALSO ASSEMBLER ALSO FORTH DEFINITIONS  ;


\ Access to host & cross-compiler & cross-assembler and Create cross-compiler words
\ CODE words DO NOT go to the TARGET memory
: CROSS-COMPILING
                 ONLY MIRROR  ALSO FORTH ALSO XASSEMBLER
                 ALSO CROSS-COMPILER DEFINITIONS ;

\ Use Cross-compiler vocabulary & Assembler & Host Forth is last search.
\ Used to create new cross assembler words
\ CODE words assemble IN THE TARGET SPACE
: CROSS-ASSEMBLING
                ONLY FORTH ALSO XASSEMBLER ALSO CROSS-COMPILER
                ALSO MIRROR DEFINITIONS ;

\ cross compiler command to create target words using the cross compiler
\ *warning*  there is no access to HOST Forth words from here
: TARGET-COMPILING
                ONLY XASSEMBLER ALSO CROSS-COMPILER ALSO MIRROR
                ALSO MIRROR DEFINITIONS  ;

\ ========================================================================
host-compiling


cr .( cross compiler memory operations)
\ ========================================================================
\ T A R G E T   M E M O R Y   O P E R A T I O N S

CROSS-COMPILING

\ control for the byte order of the processor

TRUE  CONSTANT TI9900                        \ processor selector constants
FALSE CONSTANT INTEL

TI9900 VALUE BIGENDIAN                       \ set the ENDIAN format here

\ ============================================================================
\ C R O S S   C O M P I L E R   C O N S T A N T S
CROSS-COMPILING

 2 CONSTANT TCELL                       \ set the TARGET integer size for TMS9900

\ : TCELLS      TCELL * ;
\ : TCELLS+     TCELLS +  ;


\ ========================================================================
\ TI-99 needs to translate the cross compiler addresses to the loaded addr

  DEFER RELOCATE                             \ this must be resolved when the assembler is loaded

: >endian       ( n -- n )
                bigendian
                if
                   cswap                     \ swap bytes in a 16 bit word. Called >< in Camel FORTH
                then ;

\ create a "dictionary pointer" (DP) for the compiler in the TARGET segment
: TDP           ( -- adr)                   \ return the address of the TARGET segment's internal pointer (HsForth specific)
                [TARGET-IMG seg-ptr] ;      \ we borrow the SEGMENT data structure's internal pointer for the job

: TALLOT        ( n -- )                    \ allocate n bytes in Target memory
                TDP +! ;                    \ incr. the seg-ptr by n. so simple

: THERE         ( -- taddr)                 \ equiv. to HERE in Forth
                 TDP @ ;                    \ ie: address of next free memory in target dictionary

: TALIGN        ( -- )                      \ align tdp to even address
                THERE ALIGNED TDP ! ;

\ ========================================================================
\ target space STORE, FETCH , COMMA-COMPILER and MEMORY operations
: T!            ( n tadr -- )               \ store a number in the xassembler memory space
                swap  ( xadr n )
                >endian
                swap  ( n xadr )
                [target] swap !l ;          \ store N in the segment

: TC!           ( c tadr -- )
                [target] swap c!l ;         \ store BYTE in TARGET segment at tadr

: T,            ( n -- )                    \ like Forth comma but compiles numbers into TARGET image ram
                there t!                    \ store n at THERE
                tcell tallot ;              \ move the pointer forward one target cell

: TC,           ( c -- )                    \ compile an 8bit byte into TARGET image ram
                there tc!                   \ Store c at THERE
                1 tallot ;                  \ move the pointer forward 1 byte

: T@            ( tadr -- n )
                [target] swap @l >endian ;  \ use @l to get n from a FAR intel Segment

: TC@           ( tadr -- c )
                [target] swap c@l ;         \ use c@l to get c from a FAR intel Segment

: TFILL         ( addr cnt char -- )        \ works like FILL but in the TARGET segment
                >r  [target] -rot  r> filll ;

: TCMOVE        ( adr tadr cnt -- )         \ easily move data from host FORTH (lists segment)
                                            \ to target segment, hiding segment names
                >r >r  lists @  swap [target] r> r> cmovel ;

: TTCMOVE       ( tadr tadr cnt -- )       \ "TARGET TO TARGET" CMOVE
                 >r >r [target] swap [target] r> r> cmovel ;

\ ========================================================================
\ C A M E L   F O R T H   T A R G E T   H E A D E R   N A V I G A T I O N

: nfa>lfa       ( nfa -- lfa)          3 - ;
: nfa>imm       ( nfa -- precedence-field) nfa>lfa  TCELL + ;
: nfa>cfa       ( nfa -- cfa )         dup tc@ + 1+ ALIGNED ;  \ ** you must ALWAYS align this field **
: cfa>pfa       ( cfa -- pfa )         tcell + ;
: nfa>pfa       ( nfa -- pfa )         nfa>cfa cfa>pfa ;
: lfa>nfa       ( lfa -- nfa)          3+  ;             \ convert LFA to NFA
\ : lfa>cfa       ( lfa -- cfa )     lfa>nfa  nfa>cfa ;

HEX
01 constant IMMBIT                                      \ IMMEDIATE bit in the camel forth header

\ ========================================================================
\ C A M E L   F O R T H   H E A D E R   C O M P I L E R S

HEX

VARIABLE XLATEST   0 XLATEST !              \ holds the address of latest WORD created in the TARGET system

: immed,        ( byte -- ) tc, ;           \ compile a byte field that contains the immediate bit

: link,         ( nfa -- ) t, ;             \ alias to compile a header link

: name,         ( $ -- )                    \ compile name into target space
                dup len >r                  \ get the string length & push to Rstack
                [target] THERE $!l          \ store the string in target segment
                r> 1+ tallot                \ allot Length+1. extra byte for the count byte
                TALIGN ;                    \ TMS9900 must be 16bit aligned

: T$,           ( $ -- ) name, ;            \ alias to compile a HOST string into the TARGET

: cfa,          ( XT -- ) t, ;              \ alias compile the XT into the definition


\ ========================================================================
\ H s F O R T H   D I C T I O N A R Y   C O N T R O L

\ ** VERY Hs/FORTH SPECIFIC **
\ HsForth keeps the names of words in a separate intel segment so it is
\ a little convoluted to get the names. Just assume this works.

  35 $VARIABLE TEMP$                        \ yes, I was lazy

\ this code is used to get the LAST word created in the HsForth HOST Forth as a string so
\ we can duplicate it in the TARGET Forth. ;-)

: LASTWORD      ( -- seg adr len )          \ return the last name defined in the dictionary as a FAR stack string
                DEFSEG LATEST >TXT ;        \ >TXT performs gyrations to get to the FAR string address in HsForth

: LASTWORD$     ( -- $ )                    \ return the last word in the HSForth dictionary as a counted string
                LASTWORD TEMP$ PLACEL       \ place the FAR string into host Forth TEMP$
                TEMP$ ;                     \ put temp$ on the HsForth stack


\ ========================================================================
\ T A R G E T   F O R T H    D I C T I O N A R Y   C R E A T I O N
\ Methodology:
\ This cross compiler creates TARGET words in two places.
\ One copy is in the TARGET memory segment, the actual program image.
\ The other copy is in the Mirror vocabulary in the HOST Forth
\ The mirror versions of VARIABLEs and CONSTANTs can be interpreted to see
\ contents from the HOST Forth console for debugging
\ The colon definitions will not run in this model, but ABORT with an error.
\
\ DICTIONARY STRUCTURE REMINDER
\ link field           links back to the previous word in the dictionary
\ count                count byte for the name string
\ name[31]
\ code field           contains branch to Forth "enter" routine
\ parameter field      list of addresses to interpret


: $HEADER       ( c-addr -- )              \ create a Camel Forth word structure in TARGET memory
                TAlign                     \ move target dictionary pointer (TDP) to an even cell address
                xlatest @ link,            \ populate this link field with the NFA of the last defined word.
                0 immed,                   \ create the immediate byte field. Initialize to zero
                THERE XLATEST !            \ THERE now points to the NFA. Update XLATEST variable
                dup upper name,  ;         \ dup c-addr and convert to uppercase and compile into TARGET mem.

\ ========================================================================
\ W O R D   C O U N T I N G   V A R I A B L E S

[UNDEFINED] TCODEWORDS  [IF]  VARIABLE TCODEWORDS   [THEN]

VARIABLE TFORTHWORDS          \ COUNT of High level Forth words


VARIABLE HIDDEN
\ cross-compiler directives to control headers in Target
:  [PRIVATE]      HIDDEN ON ;
:  [PUBLIC]       HIDDEN OFF ;

: HASH ( string wid-pfa -- thread-addr )  \ 4-way dictionary hash from F83, Laxen & Perry
          SWAP 1+ C@    \ fetch first character
          3 AND         \ Use only the two LSB bits.
          2*            \ convert to a CELL offset
          + ;           \ add to the wid-PFA
                        \ 16 bytes

\
\ **HsForth Carnal Knowledge here**
\ Cross-compiler "CREATE" primitive creates a word in CURRENT HOST vocabulary AND...
\ then duplicates the same label in the TARGET system memory image
: TCREATE:  ( -- )
               HIDDEN @ 0=
               IF   ( [PUBLIC] word creation)
                  CREATE                     \ create a new word in the Host MIRROR vocabulary
                  LASTWORD$ $HEADER          \ make the header in the TARGET Forth space
                  xlatest @  ,               \ compile the TARGET Forth words NFA in the MIRROR version (in the HOST Forth)
                  tforthwords 1+!            \ count this new word for COMPILER reporting

               ELSE  ( [PRIVATE] word creation)
                  CREATE                     \ create a new word in the Host MIRROR vocabulary
                  TAlign
                  xlatest @ link,            \ populate this link field with the NFA of the last defined word.
                  0 immed,                   \ create the immediate byte field. Initialize to zero
                  THERE                      \ THERE now points to the NFA.
                  0 tc,                      \ compile and empty name field
                  DUP ,         \ compile xlatest NFA into MIRROR word definition
                  XLATEST !     \ Update XLATEST variable
               THEN
;

?STK

\ ========================================================================
\ T A R G E T   ' W O R D S '   U T I L I T Y

HEX

07F constant nmask      \ mask off the smudge bit in the count byte

: Tcount        ( nfa -- seg adr len)            \ returns a FAR stack string to Host Forth
                [target] swap countl nmask and  ;

: TWORD!        ( nfa $addr -- )
                >R Tcount R>  ( -- Tseg adr cnt $addr ) PLACEL   ;

: T.NAME        ( nfa -- )              \ print a TARGET Forth word (from the target segment)
                Tcount typel ;

variable tword-cnt

: TWORDS        ( --)
\ a TOOL to view the target forth dictionary while in the HOST Forth
                BASE @ >R
                DECIMAL
                tword-cnt off
                xlatest @  ( nfa )
                cr
                begin
                     dup t.name  TAB
                     tword-cnt 1+!
                     out @ c/l @ 7 - >
                     if  CR  then PAUSESCREEN       \ pausescreen is part of hsh2012 tools.hsf
                     nfa>lfa T@ dup ( -- nfa' nfa') \ read the word's link field to get next word in list
                0= until
                drop
                cr tword-cnt ? 1- ." words in TARGET dictionary"
                R> BASE ! ;

\ ========================================================================
\ C R O S S - A S S E M B L E R   D I R E C T I V E S

HEX
CROSS-COMPILING

: ?JMPTAB   CR ." *DEFER ERROR*: NEW-JMPTABLE is not assigned"  ;

DEFER NEW-JMPTABLE     ' ?JMPTAB IS NEW-JMPTABLE  \ this will be resolved when assembler is loaded

: ORG           ( addr -- )
 \ set where the code will be written in the Target memory segment
                dup  64k u< not ABORT" ORG address outside TARGET memory"
                TDP ! ( OKC) ;                      \ OKC is required by HsForth to lock the pointers (magic).

: EQU           CONSTANT ;


: XCNEW.                                          \ ERASE the TARGET mem space
                Tcodewords off
                tforthwords off
                NEW-JMPTABLE
                0 ORG  ;                          \ reset the dictionary pointer to 0

\ ========================================================================
\ T A R G E T   M E M O R Y   D U M P   U T I L I T Y
\ allows a dump from the target segment without specifiying the Segment address

HOST-COMPILING

: TDUMP         ( target-addr n -- )
                [TARGET] -ROT DUMPL ;           \ DUMPL ( seg adr len -- )  is from tools.hsf

\ ========================================================================
\ T A R G E T   C O D E - W O R D   C R E A T I O N

\ create SMART "code" words in the Target segment
\ They CANNOT run on the HOST system but abort with an error

CROSS-COMPILING
\ variable tcodewords

: TCODE-ERR     TRUE ABORT" Cannot run Target CODE words" ;

: ?code-ERR   sp@ csp @ - ABORT" XASM99: code word has left something on the stack" ;

: (CODE:)       TCREATE:             \ make the word header(TCREATE: Taligns when done)
             \ **UNDERSTAND** Indirect threaded Forth,
                THERE tCELL + CFA,   \ the CFA of a code word, points to the next CELL address,
                                     \ (which is where the machine code starts)

                tcodewords 1+!       \ count the new code word for COMPILER report
                TALIGN ;

 \ you MUST use CROSS-ASSEMBLING directive before using CODE:
: CODE:         !CSP                  \ record the stack pointer for error checking
                (CODE:)               \ create the code word header
                NEW-JMPTABLE          \ init the jump table
                DOES> TCODE-ERR ;     \ if you try to run these words they error out

: +CODE:        (CODE:)               \ keep same jump-table but add this label inside a definition
                                      \ so we can jump from word to word
                                      \ *** DOES NOT NEED END-CODE ***
                 DOES> TCODE-ERR ;

\ : ,end          END-CODE ;          \ used with ,CODE (headless CODE word)

: END-CODE      ?CODE-ERR ;

\ ============================================================================
\ I M M E D I A T E   &   S M U D G E   B I T   C O N T R O L
HEX

CROSS-COMPILING
: XIMMEDIATE    ( -- )  \ set the immediate bit in a target word ... in the TARGET MEMORY SEGMENT!!
              immbit XLATEST @ nfa>imm tc! ;

: XIMMEDIATE?   ( nfa -- ?) \ test if a TARGET word is immediate
              nfa>imm tc@ immbit and 0> ;

\ manipulate the smudge bit in the target Camel Forth header
: tHIDE          ( -- )  xlatest @ DUP TC@ 80 or  swap TC! ;
: tREVEAL        ( -- )  xlatest @ DUP TC@ 7F and swap TC! ;

\ a word to find a word in the target forth dictionary  (used by the xcompiler only)
: lenmatch?      ( caddr lfa -- ?)  nfa c@E nmask and ( cadr cnt) swap c@ = ;



\ ============================================================================
\ T A R G E T   D I C T I O N A R Y   S E A R C H

32 $variable find-buffer

: <tfind>       ( caddr -- nfa)                  \ returns 0 if nothing found
                find-buffer $!                   \ store in buffer for debugging purposes
                find-buffer UPPER                \ convert to upper case for case-insensitivity
                xlatest @  ( nfa )
                begin
                   dup PAD tword!                \ Pull the word name from TARGET space into HOST space at PAD.
                   find-buffer Pad $=
                   if
                        0
                   else
                        nfa>lfa t@ DUP           \ next LFA -or- 0
                   then
                0= until ;

: char+         1+ ;

: TFIND         ( -- nfa )   BL word <tfind> ;

: -TFIND        ( <word> -- cfa immbit ?)        \ used by the CROSS-Compiler
                TFIND
                dup
                if
                    ( nfa) dup nfa>cfa
                    SWAP nfa>imm tC@             \ put the immediate bits on the stack
                    TRUE                         \ put the true flag on the stack CUZ WE FOUND IT!
                then ;


: T'            ( -- TARGET-XT)                 \ "T-TICK" finds a word in TARGET dictionay & returns the XT(ie: CFA)
                TFIND DUP 0= abort" Not in Target Dictionary"
                nfa>cfa ;

\ ========================================================================
\ C R O S S - C O M P I L E R   S T A T E   V A R I A B L E

CROSS-COMPILING
\ we create a pointer (using VALUE) in the HOST Forth System that points to the STATE variable in the target system

\ NOTE:  We will set the value of XSTATE after we declare the VARIABLE: STATE in the TARGET system

 0 VALUE XSTATE      \ xstat returns the address of the TARGET variable: STATE
                    \ you must use T@ and T! operators on it

\ these words change the TARGET's actual STATE variable. Note the use of T!

: ]T            ( -- )  TRUE  XSTATE T! ;
: T[            ( -- )  FALSE XSTATE T! ;

\ ============================================================================
\ F O R W A R D :    A N D    R E S O L V E S

\ cross compiler needs to use some forward references. This is my solution
\ which works very much like VALUE and TO.

\ FORWARD: creates a smart CONSTANT that inits to 0 on creation
\ but will abort if you use it in the initialized state.

\ Usage:
\       FORWARD: 'test
\
\ later in the program say...
\
\       CROSS-COMPILING  T' MYWORD RESOLVES 'TEST

: FORWARD:
        CREATE  0 ,                                         \ intitialize to 0 when created
        DOES> @ DUP
              0= abort" Un-resolved forward reference!"
        ; IMMEDIATE




: RESOLVES ( XT -- )
           state @ 0 <> ABORT" Interpreting only"
           '  ( xt) >BODY ! ;

\ create place holders for the address of the following EXECUTOR words

FORWARD: 'EXIT
FORWARD: 'DOCOL
FORWARD: 'DOVAR
FORWARD: 'LIT
FORWARD: 'DLIT
FORWARD: 'DOCON
FORWARD: 'DODOES
FORWARD: 'DOUSER
\ FORWARD: '(.")   \ removed Jan 29,2018
FORWARD: '(S")
FORWARD: 'TYPE

\ ===================================================================
\ T M S 9 9 0 0   N E X T   R O U T I N E

\ By defining NEXT as a deferred word you can change it easily

DEFER NEXT,   \ next, MUST be defined as a FORTH word (macro) in your CODE

\ EXAMPLE:
\ : 9900next,
\        *R10 B, ;  ( assumes address of NEXT is in R10)

\  ' 9900next, is NEXT,


\ ============================================================================
\ C R O S S   C O M P I L E R   W O R D   " C R E A T O R S "

\ I add  the ':' to the cross-compiler creating words just so I can remember what's what.

CROSS-COMPILING

: CREATE:
                TCREATE:                       \ compile time: create a dual header and record the Target LFA in Host Forth
                'DOVAR  cfa,                   \ compile the XT of 'dovar' into the TARGET CFA
                                               \ (PFA is empty)
                DOES> @ nfa>PFA ;              \ Run-time: fetch the nfa we stored and convert to PFA (pointer to the data)

: VARIABLE:
                TCREATE:                       \ compile time: create a dual header and record the Target LFA in Host Forth
                'DOVAR  cfa,                   \ compile the XT of 'dovar' into the TARGET CFA
                0 T,                           \ compile a zero into the PFA

                DOES> @ nfa>PFA ;              \ Run-time: fetch the nfa we stored and convert to PFA (pointer to the data)

: 2VARIABLE:
                TCREATE:                       \ compile time: create a dual header and record the Target LFA in Host Forth
                'DOVAR  cfa,                   \ compile the XT of 'dovar' into the TARGET CFA
                0 T, 0 T,                      \ make space for 2 cells and init them to 0

                DOES> @ nfa>PFA ;              \ Run-time: fetch the LFA we stored and convert to PFA (pointer to the data)

: CONSTANT:                                    \ CONSTANT: words are used like a normal constant for debugging and compiling on the HOST
                TCREATE:                       \ compile time: create a dual header and record the Target LFA in Host Forth
                'DOCON  cfa,                   \ compile the 'docon' XT into this CFA
                ( n) T,                        \ compile the actual number into the next CELL which is the TARGET word's PFA

                DOES> @ nfa>PFA T@ ;           \ Run-time: fetch the nfa we stored and convert to PFA & fetch the data

SYNONYM VALUE:  CONSTANT:                      \ same thing in ITC Forths.

\ =======================================================================
\ TMS9900 and user variables under CAMEL99

\ USER variables are used in Multi-tasking Forth systems.
\ They are "local" to a specific task and usually reference by a pointer
\ called 'UP' (user pointer)
\ CAMEL99 does not have a user pointer. It uses the TMS9900 WP register
\ Cool trick, but it means we can't read a value from the TARGET system
\ for the cross-compiler to use.

\ So we have to create a variable UP(t) and assign the value of the for
\ of the WP register for the Cross compiler to calculate a USER variable's
\ Address.

\ For TI-994a our primary workspace is at at HEX 8300
VARIABLE UP(t)   HEX 8300 UP(t) !

: USER:
                TCREATE:                       \ compile time: create a dual header and record the Target LFA in Host Forth
                'DOUSER cfa,                   \ CROSS-compile the 'DOUSER' XT into this CFA
                ( n) T,                        \ compile the user variable no. in the PFA of the word.

                DOES> @ nfa>PFA t@  UP(t) @ + ;  \ reads parameter field (PFA) add it to the address of target UP


\ create smart TARGET colon words that abort if you try to run them
: <colon:>
                TCREATE:                       \ create a dual header and record the Target CFA in Host Forth
                'DOCOL  cfa,                   \ compile the DOCOL XT into this CFA
                                               \ PFA will contain the XTs of other words that are compiled into a new word.

                DOES> true abort" Cannot run a TARGET colon definition" ;

\ ===================================================================
\ CREATE SOME HOST COMMANDS IN THE CROSS-COMPILER NAMESPACE
\ ===================================================================
\ When we switch to TARGET-COMPILING we can use CROSS-COMPILING words
\ but have no access to the HOST Forth system.
\ We still need a few things from the host Forth compiler to be in the
\ Cross-compiling vocabulary for convenience so we just steal them
\ by duplicating the names.
\
\ immediate short forms for use in definitions
: [CC]    CROSS-COMPILING ; IMMEDIATE
: [TC]    TARGET-COMPILING ;  IMMEDIATE
: [HC]    HOST-COMPILING ; IMMEDIATE

: [TARGET]      [TARGET] ;

synonym  TO     TO

: ASMSEG        ASMSEG ;
\ : WORDS         WORDS ;

: \             POSTPONE \  ; immediate
: (     ( )     POSTPONE ( ;  immediate       ( this is for my editor's colourizing :-) )

: ?STK          ?STK ;

\ : HEX           HEX ;

\ : DECIMAL       DECIMAL ;

: [IF]          [COMPILE] [IF]        ; IMMEDIATE
: [THEN]        [COMPILE] [THEN]      ; IMMEDIATE
: [ELSE]        [COMPILE] [ELSE]      ; IMMEDIATE
: [UNDEFINED]   [COMPILE] [UNDEFINED] ; IMMEDIATE

: CR            CR ;

: ."            [COMPILE] ."  ;  IMMEDIATE

CROSS-COMPILING
: compile        COMPILE ;

: "word          "word   ;

: C"            ( string-literal)  POSTPONE  C" ; immediate

: T?            ( addr -- n) T@ . ;  \ print the contents of a TARGET variable or address

\
\ We need these in our word space so we can get back home after
\ we turn on TARGET-COMPILING
\
: CROSS-COMPILING    CROSS-COMPILING ;
: HOST-COMPILING     HOST-COMPILING ;
: TARGET-COMPILING   TARGET-COMPILING ;
: CROSS-ASSEMBLING   CROSS-ASSEMBLING ;


: ?PAIRS      ( n n -- )      ?PAIRS ;

: COMPILE,    ( addr --)       T, ;
: CELL        ( --  n)         CELL ;

: >BODY       ( addr -- addr') CELL + ;

: .HEX/DEC    ( n -- ) HEX DUP 6 U.R  SPACE DECIMAL 6 U.R  HEX ;

\ ========================================================================
\ C R O S S   C O M P I L E D   S T R I N G   S U P P O R T

CROSS-COMPILING
\ compile a string from HOST memory into target memory
: TPLACE      ( str len addr -- )
              2DUP  TC!                                    \ store the count byte
              1+  SWAP  TCMOVE  ;                          \ move the string into TARGET memory

\ This was simpler for me. I use the 'T' prefix for [ S, ,"  S" and ." ] in the cross-compiler
\ Other than the name they work as expected inside cross-compiled programs
: TS,    ( adr len -- ) THERE OVER 1+  TALLOT TPLACE TALIGN ;  \ compile a stack string into target memory
: T,"         ( <text>" -- ) [char] " PARSE TS, ;              \ parse input string into TARGET memory
: TS"         '(S") cfa, T," ; IMMEDIATE                       \ compile a string literal into TARGET

 : T."         '(S") cfa, T,"  'TYPE cfa,  ;  IMMEDIATE        \ changed to ANS style with TYPE
\ ========================================================================
\ C R O S S   C O M P I L E R   F I N D

HEX 40 CONSTANT host-immbit                                \ mask for HsForth immediate word detection

: immediate?    ( n -- ? )
\ test the HsForth immediate bits returned by hsFind83 below
                host-immbit and  0> ;


: HsFIND83      ( $ --  HOST-pfa immbits ? or 0 )
\ Cross-compiler FIND uses HsForth Forth83 search order (only also etc...)
\ Returns: hsForth pfa, immbits, flag.
\ *** PAY ATTENTION ***  this is HOST FORTH searching the MIRROR vocabulary for TARGET words
                find-buffer $!
                find-buffer DUP UPPER $find-83 ;


: TFIND83       ( $ -- target-LFA target-immbits ? or 0 )    \
\ TFIND83 is for debugging and returns the same things as FIND in the TARGET system
                 hsfind83                         \ find the HOST word in Mirror vocabulary
                 if                               \ convert to TARGET dictionary header information
                      drop                        \ drop the HOST immediate BITS from HsForth header
                      @                           \ fetch the target word's NFA from this Host word
                      DUP nfa>imm tc@             \ from a copy of the TARGET nfa, convert to precedence-field and TC@ the TARGET word`s Pbit
                      true                        \ we found it so leave a true flag
                 else
                      false
                 then ;

\ ========================================================================
\ Now rename Host Forth's colon and semi-colon to HOST: & ;HOST
\ This helps me stay sane.
\
CROSS-COMPILING

SYNONYM host: :            \ 'host:' is now part of the cross-compiler to build Host Forth words

HOST: ;HOST   [COMPILE] ;  ; IMMEDIATE

\ ========================================================================
\ T A R G E T   C O M P I L I N G  W O R D S

CROSS-COMPILING

: ?XCOMP        ( -- )    XSTATE T@ 0= Abort" XSTATE error: For Cross-Compiling only" ;

\ Again using the 'T' prefix makes the cross-compiler simpler, but the programmer must rememeber

: TLITERAL      ( n -- )  ?XCOMP  'LIT  T,  T,  ;  IMMEDIATE
: T2LITERAL     ( d -- )  ?XCOMP  'DLIT T,  SWAP T, T,   EVALUATE ;  IMMEDIATE

: T[COMPILE]    ( <name>) ( ?XCOMP)  T'    T,  ; IMMEDIATE

: TCHAR         ( <text> -- ascii)  bl word char+ c@ ;
: T[CHAR]       ( -- )    ?XCOMP TCHAR [COMPILE] TLITERAL ;  IMMEDIATE

: TNUMBER,      ( D -- )
                D>S                        \ convert to a single number. (we will deal with doubles later)
                Xstate T@                  \ are we target compiling??
                if    'LIT  t, ( n ) t,    \ yes so compile LIT address and the number into target memory
                then ;

 \ SMARTER EQUATE
: EQU:          ( n -- )
                CREATE          \ creates a HOST forth name
                      ,         \ compile n into HOST forth word
                DOES> @         \ fetch the value
                XSTATE T@       \ cross-compiler is on, compile as literal
                IF  'LIT T,  T,  THEN  ; IMMEDIATE

: XIMMEDIATE    ( -- )  \ set the immediate bit in a target word ... in the TARGET MEMORY SEGMENT!!
                              immbit XLATEST @ nfa>imm tc! ;

: XIMMEDIATE?   ( nfa -- ?) \ test if a TARGET word is immediate
                              nfa>imm tc@ immbit and 0> ;


\ ============================================================================
\ M A G I C   S T U F F:  C R O S S - C O M P I L E R  [']

\ Cross-compiling ['] looks up TARGET word BUT compiles the address
\ IN THE HOST COMPUTER AS A LITERAL.

\ When the CROSS-COMPILER word runs, it returns that address and
\ compiles it in the TARGET memory

: CC[']        ( -- <name>)
               T'                         \ lookup the TARGET word's XT
               POSTPONE LITERAL           \ compile the XT as literal in the HOST memory
               POSTPONE T, ;  IMMEDIATE   \ later, compile the XT in the TARGET memory

SYNONYM TCOMPILE  CC[']  IMMEDIATE        \ took me awhile to realize this was really tcompile :-)

\ ============================================================================
\ T A R G E T   C O M P I L I N G  [']
\ look up the word, compile into TARGET as a TARGET literal

: T[']         ( -- <name>)
               ?XCOMP
               T'             \ look up the XT (address) of the TARGET word in the input stream
               'LIT T,  T,    \ store the address as a literal in the TARGET space
               ; IMMEDIATE


: PFA'
               ?XCOMP
               T'  TCELL +    \ look up the XT (address) of the TARGET word, convert to PFA
              'LIT T,  T,    \ store the address as a literal in the TARGET space
              ; IMMEDIATE


\ these words change the TARGET's actual STATE variable. Note the use of T!
\ Addition July 29,2020: Change to [cc] vocab and back to [tc]

: T[            ( -- )  FALSE XSTATE T!  CROSS-COMPILING ;
: ]T            ( -- )  TRUE  XSTATE T!  TARGET-COMPILING ;



\ =========================================================================
\ C R O S S - C O M P I L E R  /  I N T E R P R E T E R

: TINTERPRET     ( <word> )
                BEGIN
                  BL WORD DUP LEN 0>
                WHILE
                HsFIND83 ( HOST-PFA HOST-immbit ? | 0 )   \ lookup MIRROR word, return pfa and the immediate flag
                IF ( -- host-pfa immbits )                \ we found the word in the dictionary.
                     immediate?                           \ is the HOST word immediate
                     xstate T@  0=                        \ is the TARGET compiler compiling
                     OR                                   \ or state & immediate-bits together to get the flag
                     IF
                          CFA execute                     \ convert HsForth PFA to CFA and execute the word in the HOST system
                                                          \ TARGET CONSTANTs and VARIABLEs execute OK, but other words ABORT
                     ELSE
                          @ nfa>cfa cfa,                  \ *MAGIC* The MIRROR word's PFA contains the TARGET NFA
                                                          \ so fetch the Target NFA, convert to TARGET CFA and compile it
                     THEN
                ELSE
                    find-buffer NUMBER?
                    IF   TNUMBER,                         \ converted ok so deal with the number
                    ELSE find-buffer $.  CR
                         true abort" Cross-compiler says NOT RECOGNIZED"
                    THEN
                THEN
                REPEAT
                DROP ;

\ =========================================================================
\ B R A N C H   A N D   L O O P   R E S O L V I N G

CROSS-COMPILING

: here(t)       there ;
: <mark(t)      there ;
: <resolve(t)   there - t, ;
: >mark(t)      there 0 t, ;
: >resolve(t)   there over - swap t! ;
: >body(t)      cell+ ;

?stk


DECIMAL

\ Display cross-assembler memory usage
            CR ." Target Memory:"
            CR [TARGET-IMG SEG-PTR]@  .hex/dec  ."  bytes used"
            CR [TARGET-IMG SEG-END]@ [TARGET-IMG SEG-PTR]@ -  .hex/dec ."  bytes free"

CR .( == CROSS COMPILER LOADED SUCCESSFULLY ==)
CR

\                         CROSS COMPILER ENDS
\ ============================================================================
\ load the cross-assembler

 include CC9900\COMPILER\ASM99007.HSF

\ ============================================================================

\ ============================================================================
\ SAVE the final cross-compiler
HOST-COMPILING
: READ.CMDLINE
         ARGS[] LEN 0>
         IF  ARGS[] $EVALUATE
         ELSE CR ." WARNING: Command line empty" CR ABORT THEN ;

: STARTUP
     CR ." XFC99 TI99 Forth Cross Compiler, V2.3 July 2020"  CR
     READ.CMDLINE
     CR ;

cr .( Saving cross-compiler EXE file...)

SAVE-EXE XFC99D.EXE  STARTUP
CR
CR
BYE
