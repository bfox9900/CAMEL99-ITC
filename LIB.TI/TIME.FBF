\ A simple Clock in FB Forth  (FIG Forth dialect)

\ Tiny HARNESS for FBFORTH->CAMEL99 translation
: 2DROP      DROP DROP ;
: 2DUP       OVER OVER ;
: VARIABLE   0  VARIABLE  ;
: AT-XY     ( n n -- )  GOTOXY ;
: OFF       ( addr -- ) 0 SWAP ! ;
: ^C?       ?TERMINAL ;

\ CAMEL99 version can now compile
HEX
8379 CONSTANT TICKER

DECIMAL
VARIABLE HRS
VARIABLE MINS
VARIABLE SECS
VARIABLE TICKS

58 CONSTANT ':'        \ character we will need

\ increment no. in the address
: 1+!   ( addr -- ) 1 SWAP +! ;

\ FB FORTH and CAMEL99 Forth run with interrupts enabled
\ so the ticker is changing every 1/60 of a second.
\ We can wait until ticker changes and know it's 1/60 of a second
: 1/60  ( -- )
        TICKER DUP @   \ dup ticker & fetch initial timer value
        BEGIN
             OVER @   \ read it again
             OVER -   \ subtract initial value
        UNTIL         \ loop until result is not zero
        2DROP ;       \ drop the initial value



: 1SEC   ( -- )  60 0 DO 1/60 LOOP ;

: KEEPTIME
         1SEC SECS 1+!
         SECS @ 60 = IF SECS OFF  MINS 1+! THEN
         MINS @ 60 = IF MINS OFF  HRS 1+!  THEN ;

\ formatted output
: ##  ( n -- )  0 <# # # #> TYPE ;
: :## ( n -- )  0 <# # # ':' HOLD #> TYPE ;

: .TIME ( -- )  SECS @ MINS @ HRS @  ## :## :## ;

: SETCLOCK ( hrs mins secs -- ) SECS ! MINS !  HRS ! ;

: CLOCK  ( row col -- )
         BEGIN
            2DUP AT-XY .TIME
            KEEPTIME
            ^C?        \ waits for function clear in FB Forth
         UNTIL
         2DROP ;
         
1 59 50 SETCLOCK
PAGE  10 10 CLOCK
         


